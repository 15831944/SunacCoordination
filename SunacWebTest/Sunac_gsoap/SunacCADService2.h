/* SunacCADService2.h
   Generated by wsdl2h 2.8.84 from SunacCADService.wsdl and xsdString.bat
   2019-10-25 05:52:26 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on SunacCADService2.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2019, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns1 = "http://tempuri.org/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
//gsoap ns1   schema namespace:	http://tempuri.org/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


class _ns1__StandardDesignAttribute;

class _ns1__StandardDesignAttributeResponse;

class _ns1__GetAllWindows;

class _ns1__GetAllWindowsResponse;

class _ns1__GetWindows;

class _ns1__GetWindowsResponse;

class _ns1__GetAllDoor;

class _ns1__GetAllDoorResponse;

class _ns1__GetAllDoorByParam;

class _ns1__GetAllDoorByParamResponse;

class _ns1__GetAllKitchen;

class _ns1__GetAllKitchenResponse;

class _ns1__GetAllKitchenParam;

class _ns1__GetAllKitchenParamResponse;

class _ns1__GetAllBathroom;

class _ns1__GetAllBathroomResponse;

class _ns1__GetAllBathroomByParam;

class _ns1__GetAllBathroomByParamResponse;

class _ns1__GetAllHandrailByParam;

class _ns1__GetAllHandrailByParamResponse;

class _ns1__GetAllAirconditionerByParam;

class _ns1__GetAllAirconditionerByParamResponse;

class _ns1__CadFileDownload;

class _ns1__CadFileDownloadResponse;

class _ns1__CadImgDownload;

class _ns1__CadImgDownloadResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://tempuri.org/":StandardDesignAttribute
/// @brief "http://tempuri.org/":StandardDesignAttribute is a complexType.
///
/// @note class _ns1__StandardDesignAttribute operations:
/// - _ns1__StandardDesignAttribute* soap_new__ns1__StandardDesignAttribute(soap*) allocate and default initialize
/// - _ns1__StandardDesignAttribute* soap_new__ns1__StandardDesignAttribute(soap*, int num) allocate and default initialize an array
/// - _ns1__StandardDesignAttribute* soap_new_req__ns1__StandardDesignAttribute(soap*, ...) allocate, set required members
/// - _ns1__StandardDesignAttribute* soap_new_set__ns1__StandardDesignAttribute(soap*, ...) allocate, set all public members
/// - _ns1__StandardDesignAttribute::soap_default(soap*) default initialize members
/// - int soap_read__ns1__StandardDesignAttribute(soap*, _ns1__StandardDesignAttribute*) deserialize from a stream
/// - int soap_write__ns1__StandardDesignAttribute(soap*, _ns1__StandardDesignAttribute*) serialize to a stream
/// - _ns1__StandardDesignAttribute* _ns1__StandardDesignAttribute::soap_dup(soap*) returns deep copy of _ns1__StandardDesignAttribute, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__StandardDesignAttribute::soap_del() deep deletes _ns1__StandardDesignAttribute data members, use only after _ns1__StandardDesignAttribute::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__StandardDesignAttribute::soap_type() returns SOAP_TYPE__ns1__StandardDesignAttribute or derived type identifier
class _ns1__StandardDesignAttribute
{ public:
/// Element "AtrributeName" of type xs:string.
    std::wstring*                        AtrributeName                  0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":StandardDesignAttributeResponse
/// @brief "http://tempuri.org/":StandardDesignAttributeResponse is a complexType.
///
/// @note class _ns1__StandardDesignAttributeResponse operations:
/// - _ns1__StandardDesignAttributeResponse* soap_new__ns1__StandardDesignAttributeResponse(soap*) allocate and default initialize
/// - _ns1__StandardDesignAttributeResponse* soap_new__ns1__StandardDesignAttributeResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__StandardDesignAttributeResponse* soap_new_req__ns1__StandardDesignAttributeResponse(soap*, ...) allocate, set required members
/// - _ns1__StandardDesignAttributeResponse* soap_new_set__ns1__StandardDesignAttributeResponse(soap*, ...) allocate, set all public members
/// - _ns1__StandardDesignAttributeResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__StandardDesignAttributeResponse(soap*, _ns1__StandardDesignAttributeResponse*) deserialize from a stream
/// - int soap_write__ns1__StandardDesignAttributeResponse(soap*, _ns1__StandardDesignAttributeResponse*) serialize to a stream
/// - _ns1__StandardDesignAttributeResponse* _ns1__StandardDesignAttributeResponse::soap_dup(soap*) returns deep copy of _ns1__StandardDesignAttributeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__StandardDesignAttributeResponse::soap_del() deep deletes _ns1__StandardDesignAttributeResponse data members, use only after _ns1__StandardDesignAttributeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__StandardDesignAttributeResponse::soap_type() returns SOAP_TYPE__ns1__StandardDesignAttributeResponse or derived type identifier
class _ns1__StandardDesignAttributeResponse
{ public:
/// Element "StandardDesignAttributeResult" of type xs:string.
    std::wstring*                        StandardDesignAttributeResult  0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllWindows
/// @brief "http://tempuri.org/":GetAllWindows is a complexType.
///
/// @note class _ns1__GetAllWindows operations:
/// - _ns1__GetAllWindows* soap_new__ns1__GetAllWindows(soap*) allocate and default initialize
/// - _ns1__GetAllWindows* soap_new__ns1__GetAllWindows(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllWindows* soap_new_req__ns1__GetAllWindows(soap*, ...) allocate, set required members
/// - _ns1__GetAllWindows* soap_new_set__ns1__GetAllWindows(soap*, ...) allocate, set all public members
/// - _ns1__GetAllWindows::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllWindows(soap*, _ns1__GetAllWindows*) deserialize from a stream
/// - int soap_write__ns1__GetAllWindows(soap*, _ns1__GetAllWindows*) serialize to a stream
/// - _ns1__GetAllWindows* _ns1__GetAllWindows::soap_dup(soap*) returns deep copy of _ns1__GetAllWindows, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllWindows::soap_del() deep deletes _ns1__GetAllWindows data members, use only after _ns1__GetAllWindows::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllWindows::soap_type() returns SOAP_TYPE__ns1__GetAllWindows or derived type identifier
class _ns1__GetAllWindows
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllWindowsResponse
/// @brief "http://tempuri.org/":GetAllWindowsResponse is a complexType.
///
/// @note class _ns1__GetAllWindowsResponse operations:
/// - _ns1__GetAllWindowsResponse* soap_new__ns1__GetAllWindowsResponse(soap*) allocate and default initialize
/// - _ns1__GetAllWindowsResponse* soap_new__ns1__GetAllWindowsResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllWindowsResponse* soap_new_req__ns1__GetAllWindowsResponse(soap*, ...) allocate, set required members
/// - _ns1__GetAllWindowsResponse* soap_new_set__ns1__GetAllWindowsResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetAllWindowsResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllWindowsResponse(soap*, _ns1__GetAllWindowsResponse*) deserialize from a stream
/// - int soap_write__ns1__GetAllWindowsResponse(soap*, _ns1__GetAllWindowsResponse*) serialize to a stream
/// - _ns1__GetAllWindowsResponse* _ns1__GetAllWindowsResponse::soap_dup(soap*) returns deep copy of _ns1__GetAllWindowsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllWindowsResponse::soap_del() deep deletes _ns1__GetAllWindowsResponse data members, use only after _ns1__GetAllWindowsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllWindowsResponse::soap_type() returns SOAP_TYPE__ns1__GetAllWindowsResponse or derived type identifier
class _ns1__GetAllWindowsResponse
{ public:
/// Element "GetAllWindowsResult" of type xs:string.
    std::wstring*                        GetAllWindowsResult            0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetWindows
/// @brief "http://tempuri.org/":GetWindows is a complexType.
///
/// @note class _ns1__GetWindows operations:
/// - _ns1__GetWindows* soap_new__ns1__GetWindows(soap*) allocate and default initialize
/// - _ns1__GetWindows* soap_new__ns1__GetWindows(soap*, int num) allocate and default initialize an array
/// - _ns1__GetWindows* soap_new_req__ns1__GetWindows(soap*, ...) allocate, set required members
/// - _ns1__GetWindows* soap_new_set__ns1__GetWindows(soap*, ...) allocate, set all public members
/// - _ns1__GetWindows::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetWindows(soap*, _ns1__GetWindows*) deserialize from a stream
/// - int soap_write__ns1__GetWindows(soap*, _ns1__GetWindows*) serialize to a stream
/// - _ns1__GetWindows* _ns1__GetWindows::soap_dup(soap*) returns deep copy of _ns1__GetWindows, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetWindows::soap_del() deep deletes _ns1__GetWindows data members, use only after _ns1__GetWindows::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetWindows::soap_type() returns SOAP_TYPE__ns1__GetWindows or derived type identifier
class _ns1__GetWindows
{ public:
/// Element "width" of type xs:double.
    double                               width                          1;	///< Required element.
/// Element "height" of type xs:double.
    double                               height                         1;	///< Required element.
/// Element "openType" of type xs:string.
    std::wstring*                        openType                       0;	///< Optional element.
/// Element "openNum" of type xs:string.
    std::wstring*                        openNum                        0;	///< Optional element.
/// Element "gongNengQu" of type xs:string.
    std::wstring*                        gongNengQu                     0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetWindowsResponse
/// @brief "http://tempuri.org/":GetWindowsResponse is a complexType.
///
/// @note class _ns1__GetWindowsResponse operations:
/// - _ns1__GetWindowsResponse* soap_new__ns1__GetWindowsResponse(soap*) allocate and default initialize
/// - _ns1__GetWindowsResponse* soap_new__ns1__GetWindowsResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__GetWindowsResponse* soap_new_req__ns1__GetWindowsResponse(soap*, ...) allocate, set required members
/// - _ns1__GetWindowsResponse* soap_new_set__ns1__GetWindowsResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetWindowsResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetWindowsResponse(soap*, _ns1__GetWindowsResponse*) deserialize from a stream
/// - int soap_write__ns1__GetWindowsResponse(soap*, _ns1__GetWindowsResponse*) serialize to a stream
/// - _ns1__GetWindowsResponse* _ns1__GetWindowsResponse::soap_dup(soap*) returns deep copy of _ns1__GetWindowsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetWindowsResponse::soap_del() deep deletes _ns1__GetWindowsResponse data members, use only after _ns1__GetWindowsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetWindowsResponse::soap_type() returns SOAP_TYPE__ns1__GetWindowsResponse or derived type identifier
class _ns1__GetWindowsResponse
{ public:
/// Element "GetWindowsResult" of type xs:string.
    std::wstring*                        GetWindowsResult               0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllDoor
/// @brief "http://tempuri.org/":GetAllDoor is a complexType.
///
/// @note class _ns1__GetAllDoor operations:
/// - _ns1__GetAllDoor* soap_new__ns1__GetAllDoor(soap*) allocate and default initialize
/// - _ns1__GetAllDoor* soap_new__ns1__GetAllDoor(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllDoor* soap_new_req__ns1__GetAllDoor(soap*, ...) allocate, set required members
/// - _ns1__GetAllDoor* soap_new_set__ns1__GetAllDoor(soap*, ...) allocate, set all public members
/// - _ns1__GetAllDoor::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllDoor(soap*, _ns1__GetAllDoor*) deserialize from a stream
/// - int soap_write__ns1__GetAllDoor(soap*, _ns1__GetAllDoor*) serialize to a stream
/// - _ns1__GetAllDoor* _ns1__GetAllDoor::soap_dup(soap*) returns deep copy of _ns1__GetAllDoor, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllDoor::soap_del() deep deletes _ns1__GetAllDoor data members, use only after _ns1__GetAllDoor::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllDoor::soap_type() returns SOAP_TYPE__ns1__GetAllDoor or derived type identifier
class _ns1__GetAllDoor
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllDoorResponse
/// @brief "http://tempuri.org/":GetAllDoorResponse is a complexType.
///
/// @note class _ns1__GetAllDoorResponse operations:
/// - _ns1__GetAllDoorResponse* soap_new__ns1__GetAllDoorResponse(soap*) allocate and default initialize
/// - _ns1__GetAllDoorResponse* soap_new__ns1__GetAllDoorResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllDoorResponse* soap_new_req__ns1__GetAllDoorResponse(soap*, ...) allocate, set required members
/// - _ns1__GetAllDoorResponse* soap_new_set__ns1__GetAllDoorResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetAllDoorResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllDoorResponse(soap*, _ns1__GetAllDoorResponse*) deserialize from a stream
/// - int soap_write__ns1__GetAllDoorResponse(soap*, _ns1__GetAllDoorResponse*) serialize to a stream
/// - _ns1__GetAllDoorResponse* _ns1__GetAllDoorResponse::soap_dup(soap*) returns deep copy of _ns1__GetAllDoorResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllDoorResponse::soap_del() deep deletes _ns1__GetAllDoorResponse data members, use only after _ns1__GetAllDoorResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllDoorResponse::soap_type() returns SOAP_TYPE__ns1__GetAllDoorResponse or derived type identifier
class _ns1__GetAllDoorResponse
{ public:
/// Element "GetAllDoorResult" of type xs:string.
    std::wstring*                        GetAllDoorResult               0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllDoorByParam
/// @brief "http://tempuri.org/":GetAllDoorByParam is a complexType.
///
/// @note class _ns1__GetAllDoorByParam operations:
/// - _ns1__GetAllDoorByParam* soap_new__ns1__GetAllDoorByParam(soap*) allocate and default initialize
/// - _ns1__GetAllDoorByParam* soap_new__ns1__GetAllDoorByParam(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllDoorByParam* soap_new_req__ns1__GetAllDoorByParam(soap*, ...) allocate, set required members
/// - _ns1__GetAllDoorByParam* soap_new_set__ns1__GetAllDoorByParam(soap*, ...) allocate, set all public members
/// - _ns1__GetAllDoorByParam::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllDoorByParam(soap*, _ns1__GetAllDoorByParam*) deserialize from a stream
/// - int soap_write__ns1__GetAllDoorByParam(soap*, _ns1__GetAllDoorByParam*) serialize to a stream
/// - _ns1__GetAllDoorByParam* _ns1__GetAllDoorByParam::soap_dup(soap*) returns deep copy of _ns1__GetAllDoorByParam, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllDoorByParam::soap_del() deep deletes _ns1__GetAllDoorByParam data members, use only after _ns1__GetAllDoorByParam::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllDoorByParam::soap_type() returns SOAP_TYPE__ns1__GetAllDoorByParam or derived type identifier
class _ns1__GetAllDoorByParam
{ public:
/// Element "width" of type xs:double.
    double                               width                          1;	///< Required element.
/// Element "doorType" of type xs:string.
    std::wstring*                        doorType                       0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllDoorByParamResponse
/// @brief "http://tempuri.org/":GetAllDoorByParamResponse is a complexType.
///
/// @note class _ns1__GetAllDoorByParamResponse operations:
/// - _ns1__GetAllDoorByParamResponse* soap_new__ns1__GetAllDoorByParamResponse(soap*) allocate and default initialize
/// - _ns1__GetAllDoorByParamResponse* soap_new__ns1__GetAllDoorByParamResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllDoorByParamResponse* soap_new_req__ns1__GetAllDoorByParamResponse(soap*, ...) allocate, set required members
/// - _ns1__GetAllDoorByParamResponse* soap_new_set__ns1__GetAllDoorByParamResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetAllDoorByParamResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllDoorByParamResponse(soap*, _ns1__GetAllDoorByParamResponse*) deserialize from a stream
/// - int soap_write__ns1__GetAllDoorByParamResponse(soap*, _ns1__GetAllDoorByParamResponse*) serialize to a stream
/// - _ns1__GetAllDoorByParamResponse* _ns1__GetAllDoorByParamResponse::soap_dup(soap*) returns deep copy of _ns1__GetAllDoorByParamResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllDoorByParamResponse::soap_del() deep deletes _ns1__GetAllDoorByParamResponse data members, use only after _ns1__GetAllDoorByParamResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllDoorByParamResponse::soap_type() returns SOAP_TYPE__ns1__GetAllDoorByParamResponse or derived type identifier
class _ns1__GetAllDoorByParamResponse
{ public:
/// Element "GetAllDoorByParamResult" of type xs:string.
    std::wstring*                        GetAllDoorByParamResult        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllKitchen
/// @brief "http://tempuri.org/":GetAllKitchen is a complexType.
///
/// @note class _ns1__GetAllKitchen operations:
/// - _ns1__GetAllKitchen* soap_new__ns1__GetAllKitchen(soap*) allocate and default initialize
/// - _ns1__GetAllKitchen* soap_new__ns1__GetAllKitchen(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllKitchen* soap_new_req__ns1__GetAllKitchen(soap*, ...) allocate, set required members
/// - _ns1__GetAllKitchen* soap_new_set__ns1__GetAllKitchen(soap*, ...) allocate, set all public members
/// - _ns1__GetAllKitchen::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllKitchen(soap*, _ns1__GetAllKitchen*) deserialize from a stream
/// - int soap_write__ns1__GetAllKitchen(soap*, _ns1__GetAllKitchen*) serialize to a stream
/// - _ns1__GetAllKitchen* _ns1__GetAllKitchen::soap_dup(soap*) returns deep copy of _ns1__GetAllKitchen, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllKitchen::soap_del() deep deletes _ns1__GetAllKitchen data members, use only after _ns1__GetAllKitchen::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllKitchen::soap_type() returns SOAP_TYPE__ns1__GetAllKitchen or derived type identifier
class _ns1__GetAllKitchen
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllKitchenResponse
/// @brief "http://tempuri.org/":GetAllKitchenResponse is a complexType.
///
/// @note class _ns1__GetAllKitchenResponse operations:
/// - _ns1__GetAllKitchenResponse* soap_new__ns1__GetAllKitchenResponse(soap*) allocate and default initialize
/// - _ns1__GetAllKitchenResponse* soap_new__ns1__GetAllKitchenResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllKitchenResponse* soap_new_req__ns1__GetAllKitchenResponse(soap*, ...) allocate, set required members
/// - _ns1__GetAllKitchenResponse* soap_new_set__ns1__GetAllKitchenResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetAllKitchenResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllKitchenResponse(soap*, _ns1__GetAllKitchenResponse*) deserialize from a stream
/// - int soap_write__ns1__GetAllKitchenResponse(soap*, _ns1__GetAllKitchenResponse*) serialize to a stream
/// - _ns1__GetAllKitchenResponse* _ns1__GetAllKitchenResponse::soap_dup(soap*) returns deep copy of _ns1__GetAllKitchenResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllKitchenResponse::soap_del() deep deletes _ns1__GetAllKitchenResponse data members, use only after _ns1__GetAllKitchenResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllKitchenResponse::soap_type() returns SOAP_TYPE__ns1__GetAllKitchenResponse or derived type identifier
class _ns1__GetAllKitchenResponse
{ public:
/// Element "GetAllKitchenResult" of type xs:string.
    std::wstring*                        GetAllKitchenResult            0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllKitchenParam
/// @brief "http://tempuri.org/":GetAllKitchenParam is a complexType.
///
/// @note class _ns1__GetAllKitchenParam operations:
/// - _ns1__GetAllKitchenParam* soap_new__ns1__GetAllKitchenParam(soap*) allocate and default initialize
/// - _ns1__GetAllKitchenParam* soap_new__ns1__GetAllKitchenParam(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllKitchenParam* soap_new_req__ns1__GetAllKitchenParam(soap*, ...) allocate, set required members
/// - _ns1__GetAllKitchenParam* soap_new_set__ns1__GetAllKitchenParam(soap*, ...) allocate, set all public members
/// - _ns1__GetAllKitchenParam::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllKitchenParam(soap*, _ns1__GetAllKitchenParam*) deserialize from a stream
/// - int soap_write__ns1__GetAllKitchenParam(soap*, _ns1__GetAllKitchenParam*) serialize to a stream
/// - _ns1__GetAllKitchenParam* _ns1__GetAllKitchenParam::soap_dup(soap*) returns deep copy of _ns1__GetAllKitchenParam, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllKitchenParam::soap_del() deep deletes _ns1__GetAllKitchenParam data members, use only after _ns1__GetAllKitchenParam::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllKitchenParam::soap_type() returns SOAP_TYPE__ns1__GetAllKitchenParam or derived type identifier
class _ns1__GetAllKitchenParam
{ public:
/// Element "Width" of type xs:double.
    double                               Width                          1;	///< Required element.
/// Element "Height" of type xs:double.
    double                               Height                         1;	///< Required element.
/// Element "KitchenDoorWindowPosition" of type xs:string.
    std::wstring*                        KitchenDoorWindowPosition      0;	///< Optional element.
/// Element "KitchenType" of type xs:string.
    std::wstring*                        KitchenType                    0;	///< Optional element.
/// Element "AirVent" of type xs:string.
    std::wstring*                        AirVent                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllKitchenParamResponse
/// @brief "http://tempuri.org/":GetAllKitchenParamResponse is a complexType.
///
/// @note class _ns1__GetAllKitchenParamResponse operations:
/// - _ns1__GetAllKitchenParamResponse* soap_new__ns1__GetAllKitchenParamResponse(soap*) allocate and default initialize
/// - _ns1__GetAllKitchenParamResponse* soap_new__ns1__GetAllKitchenParamResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllKitchenParamResponse* soap_new_req__ns1__GetAllKitchenParamResponse(soap*, ...) allocate, set required members
/// - _ns1__GetAllKitchenParamResponse* soap_new_set__ns1__GetAllKitchenParamResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetAllKitchenParamResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllKitchenParamResponse(soap*, _ns1__GetAllKitchenParamResponse*) deserialize from a stream
/// - int soap_write__ns1__GetAllKitchenParamResponse(soap*, _ns1__GetAllKitchenParamResponse*) serialize to a stream
/// - _ns1__GetAllKitchenParamResponse* _ns1__GetAllKitchenParamResponse::soap_dup(soap*) returns deep copy of _ns1__GetAllKitchenParamResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllKitchenParamResponse::soap_del() deep deletes _ns1__GetAllKitchenParamResponse data members, use only after _ns1__GetAllKitchenParamResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllKitchenParamResponse::soap_type() returns SOAP_TYPE__ns1__GetAllKitchenParamResponse or derived type identifier
class _ns1__GetAllKitchenParamResponse
{ public:
/// Element "GetAllKitchenParamResult" of type xs:string.
    std::wstring*                        GetAllKitchenParamResult       0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllBathroom
/// @brief "http://tempuri.org/":GetAllBathroom is a complexType.
///
/// @note class _ns1__GetAllBathroom operations:
/// - _ns1__GetAllBathroom* soap_new__ns1__GetAllBathroom(soap*) allocate and default initialize
/// - _ns1__GetAllBathroom* soap_new__ns1__GetAllBathroom(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllBathroom* soap_new_req__ns1__GetAllBathroom(soap*, ...) allocate, set required members
/// - _ns1__GetAllBathroom* soap_new_set__ns1__GetAllBathroom(soap*, ...) allocate, set all public members
/// - _ns1__GetAllBathroom::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllBathroom(soap*, _ns1__GetAllBathroom*) deserialize from a stream
/// - int soap_write__ns1__GetAllBathroom(soap*, _ns1__GetAllBathroom*) serialize to a stream
/// - _ns1__GetAllBathroom* _ns1__GetAllBathroom::soap_dup(soap*) returns deep copy of _ns1__GetAllBathroom, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllBathroom::soap_del() deep deletes _ns1__GetAllBathroom data members, use only after _ns1__GetAllBathroom::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllBathroom::soap_type() returns SOAP_TYPE__ns1__GetAllBathroom or derived type identifier
class _ns1__GetAllBathroom
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllBathroomResponse
/// @brief "http://tempuri.org/":GetAllBathroomResponse is a complexType.
///
/// @note class _ns1__GetAllBathroomResponse operations:
/// - _ns1__GetAllBathroomResponse* soap_new__ns1__GetAllBathroomResponse(soap*) allocate and default initialize
/// - _ns1__GetAllBathroomResponse* soap_new__ns1__GetAllBathroomResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllBathroomResponse* soap_new_req__ns1__GetAllBathroomResponse(soap*, ...) allocate, set required members
/// - _ns1__GetAllBathroomResponse* soap_new_set__ns1__GetAllBathroomResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetAllBathroomResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllBathroomResponse(soap*, _ns1__GetAllBathroomResponse*) deserialize from a stream
/// - int soap_write__ns1__GetAllBathroomResponse(soap*, _ns1__GetAllBathroomResponse*) serialize to a stream
/// - _ns1__GetAllBathroomResponse* _ns1__GetAllBathroomResponse::soap_dup(soap*) returns deep copy of _ns1__GetAllBathroomResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllBathroomResponse::soap_del() deep deletes _ns1__GetAllBathroomResponse data members, use only after _ns1__GetAllBathroomResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllBathroomResponse::soap_type() returns SOAP_TYPE__ns1__GetAllBathroomResponse or derived type identifier
class _ns1__GetAllBathroomResponse
{ public:
/// Element "GetAllBathroomResult" of type xs:string.
    std::wstring*                        GetAllBathroomResult           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllBathroomByParam
/// @brief "http://tempuri.org/":GetAllBathroomByParam is a complexType.
///
/// @note class _ns1__GetAllBathroomByParam operations:
/// - _ns1__GetAllBathroomByParam* soap_new__ns1__GetAllBathroomByParam(soap*) allocate and default initialize
/// - _ns1__GetAllBathroomByParam* soap_new__ns1__GetAllBathroomByParam(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllBathroomByParam* soap_new_req__ns1__GetAllBathroomByParam(soap*, ...) allocate, set required members
/// - _ns1__GetAllBathroomByParam* soap_new_set__ns1__GetAllBathroomByParam(soap*, ...) allocate, set all public members
/// - _ns1__GetAllBathroomByParam::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllBathroomByParam(soap*, _ns1__GetAllBathroomByParam*) deserialize from a stream
/// - int soap_write__ns1__GetAllBathroomByParam(soap*, _ns1__GetAllBathroomByParam*) serialize to a stream
/// - _ns1__GetAllBathroomByParam* _ns1__GetAllBathroomByParam::soap_dup(soap*) returns deep copy of _ns1__GetAllBathroomByParam, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllBathroomByParam::soap_del() deep deletes _ns1__GetAllBathroomByParam data members, use only after _ns1__GetAllBathroomByParam::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllBathroomByParam::soap_type() returns SOAP_TYPE__ns1__GetAllBathroomByParam or derived type identifier
class _ns1__GetAllBathroomByParam
{ public:
/// Element "Width" of type xs:double.
    double                               Width                          1;	///< Required element.
/// Element "Height" of type xs:double.
    double                               Height                         1;	///< Required element.
/// Element "BathroomDoorWindowPosition" of type xs:string.
    std::wstring*                        BathroomDoorWindowPosition     0;	///< Optional element.
/// Element "ToiletType" of type xs:string.
    std::wstring*                        ToiletType                     0;	///< Optional element.
/// Element "AirVent" of type xs:string.
    std::wstring*                        AirVent                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllBathroomByParamResponse
/// @brief "http://tempuri.org/":GetAllBathroomByParamResponse is a complexType.
///
/// @note class _ns1__GetAllBathroomByParamResponse operations:
/// - _ns1__GetAllBathroomByParamResponse* soap_new__ns1__GetAllBathroomByParamResponse(soap*) allocate and default initialize
/// - _ns1__GetAllBathroomByParamResponse* soap_new__ns1__GetAllBathroomByParamResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllBathroomByParamResponse* soap_new_req__ns1__GetAllBathroomByParamResponse(soap*, ...) allocate, set required members
/// - _ns1__GetAllBathroomByParamResponse* soap_new_set__ns1__GetAllBathroomByParamResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetAllBathroomByParamResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllBathroomByParamResponse(soap*, _ns1__GetAllBathroomByParamResponse*) deserialize from a stream
/// - int soap_write__ns1__GetAllBathroomByParamResponse(soap*, _ns1__GetAllBathroomByParamResponse*) serialize to a stream
/// - _ns1__GetAllBathroomByParamResponse* _ns1__GetAllBathroomByParamResponse::soap_dup(soap*) returns deep copy of _ns1__GetAllBathroomByParamResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllBathroomByParamResponse::soap_del() deep deletes _ns1__GetAllBathroomByParamResponse data members, use only after _ns1__GetAllBathroomByParamResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllBathroomByParamResponse::soap_type() returns SOAP_TYPE__ns1__GetAllBathroomByParamResponse or derived type identifier
class _ns1__GetAllBathroomByParamResponse
{ public:
/// Element "GetAllBathroomByParamResult" of type xs:string.
    std::wstring*                        GetAllBathroomByParamResult    0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllHandrailByParam
/// @brief "http://tempuri.org/":GetAllHandrailByParam is a complexType.
///
/// @note class _ns1__GetAllHandrailByParam operations:
/// - _ns1__GetAllHandrailByParam* soap_new__ns1__GetAllHandrailByParam(soap*) allocate and default initialize
/// - _ns1__GetAllHandrailByParam* soap_new__ns1__GetAllHandrailByParam(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllHandrailByParam* soap_new_req__ns1__GetAllHandrailByParam(soap*, ...) allocate, set required members
/// - _ns1__GetAllHandrailByParam* soap_new_set__ns1__GetAllHandrailByParam(soap*, ...) allocate, set all public members
/// - _ns1__GetAllHandrailByParam::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllHandrailByParam(soap*, _ns1__GetAllHandrailByParam*) deserialize from a stream
/// - int soap_write__ns1__GetAllHandrailByParam(soap*, _ns1__GetAllHandrailByParam*) serialize to a stream
/// - _ns1__GetAllHandrailByParam* _ns1__GetAllHandrailByParam::soap_dup(soap*) returns deep copy of _ns1__GetAllHandrailByParam, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllHandrailByParam::soap_del() deep deletes _ns1__GetAllHandrailByParam data members, use only after _ns1__GetAllHandrailByParam::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllHandrailByParam::soap_type() returns SOAP_TYPE__ns1__GetAllHandrailByParam or derived type identifier
class _ns1__GetAllHandrailByParam
{ public:
/// Element "RailingType" of type xs:string.
    std::wstring*                        RailingType                    0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllHandrailByParamResponse
/// @brief "http://tempuri.org/":GetAllHandrailByParamResponse is a complexType.
///
/// @note class _ns1__GetAllHandrailByParamResponse operations:
/// - _ns1__GetAllHandrailByParamResponse* soap_new__ns1__GetAllHandrailByParamResponse(soap*) allocate and default initialize
/// - _ns1__GetAllHandrailByParamResponse* soap_new__ns1__GetAllHandrailByParamResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllHandrailByParamResponse* soap_new_req__ns1__GetAllHandrailByParamResponse(soap*, ...) allocate, set required members
/// - _ns1__GetAllHandrailByParamResponse* soap_new_set__ns1__GetAllHandrailByParamResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetAllHandrailByParamResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllHandrailByParamResponse(soap*, _ns1__GetAllHandrailByParamResponse*) deserialize from a stream
/// - int soap_write__ns1__GetAllHandrailByParamResponse(soap*, _ns1__GetAllHandrailByParamResponse*) serialize to a stream
/// - _ns1__GetAllHandrailByParamResponse* _ns1__GetAllHandrailByParamResponse::soap_dup(soap*) returns deep copy of _ns1__GetAllHandrailByParamResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllHandrailByParamResponse::soap_del() deep deletes _ns1__GetAllHandrailByParamResponse data members, use only after _ns1__GetAllHandrailByParamResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllHandrailByParamResponse::soap_type() returns SOAP_TYPE__ns1__GetAllHandrailByParamResponse or derived type identifier
class _ns1__GetAllHandrailByParamResponse
{ public:
/// Element "GetAllHandrailByParamResult" of type xs:string.
    std::wstring*                        GetAllHandrailByParamResult    0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllAirconditionerByParam
/// @brief "http://tempuri.org/":GetAllAirconditionerByParam is a complexType.
///
/// @note class _ns1__GetAllAirconditionerByParam operations:
/// - _ns1__GetAllAirconditionerByParam* soap_new__ns1__GetAllAirconditionerByParam(soap*) allocate and default initialize
/// - _ns1__GetAllAirconditionerByParam* soap_new__ns1__GetAllAirconditionerByParam(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllAirconditionerByParam* soap_new_req__ns1__GetAllAirconditionerByParam(soap*, ...) allocate, set required members
/// - _ns1__GetAllAirconditionerByParam* soap_new_set__ns1__GetAllAirconditionerByParam(soap*, ...) allocate, set all public members
/// - _ns1__GetAllAirconditionerByParam::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllAirconditionerByParam(soap*, _ns1__GetAllAirconditionerByParam*) deserialize from a stream
/// - int soap_write__ns1__GetAllAirconditionerByParam(soap*, _ns1__GetAllAirconditionerByParam*) serialize to a stream
/// - _ns1__GetAllAirconditionerByParam* _ns1__GetAllAirconditionerByParam::soap_dup(soap*) returns deep copy of _ns1__GetAllAirconditionerByParam, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllAirconditionerByParam::soap_del() deep deletes _ns1__GetAllAirconditionerByParam data members, use only after _ns1__GetAllAirconditionerByParam::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllAirconditionerByParam::soap_type() returns SOAP_TYPE__ns1__GetAllAirconditionerByParam or derived type identifier
class _ns1__GetAllAirconditionerByParam
{ public:
/// Element "AirconditionerPower" of type xs:string.
    std::wstring*                        AirconditionerPower            0;	///< Optional element.
/// Element "AirconditionerPipePosition" of type xs:string.
    std::wstring*                        AirconditionerPipePosition     0;	///< Optional element.
/// Element "AirconditionerIsRainpipe" of type xs:string.
    std::wstring*                        AirconditionerIsRainpipe       0;	///< Optional element.
/// Element "RainpipePosition" of type xs:string.
    std::wstring*                        RainpipePosition               0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetAllAirconditionerByParamResponse
/// @brief "http://tempuri.org/":GetAllAirconditionerByParamResponse is a complexType.
///
/// @note class _ns1__GetAllAirconditionerByParamResponse operations:
/// - _ns1__GetAllAirconditionerByParamResponse* soap_new__ns1__GetAllAirconditionerByParamResponse(soap*) allocate and default initialize
/// - _ns1__GetAllAirconditionerByParamResponse* soap_new__ns1__GetAllAirconditionerByParamResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__GetAllAirconditionerByParamResponse* soap_new_req__ns1__GetAllAirconditionerByParamResponse(soap*, ...) allocate, set required members
/// - _ns1__GetAllAirconditionerByParamResponse* soap_new_set__ns1__GetAllAirconditionerByParamResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetAllAirconditionerByParamResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllAirconditionerByParamResponse(soap*, _ns1__GetAllAirconditionerByParamResponse*) deserialize from a stream
/// - int soap_write__ns1__GetAllAirconditionerByParamResponse(soap*, _ns1__GetAllAirconditionerByParamResponse*) serialize to a stream
/// - _ns1__GetAllAirconditionerByParamResponse* _ns1__GetAllAirconditionerByParamResponse::soap_dup(soap*) returns deep copy of _ns1__GetAllAirconditionerByParamResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllAirconditionerByParamResponse::soap_del() deep deletes _ns1__GetAllAirconditionerByParamResponse data members, use only after _ns1__GetAllAirconditionerByParamResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__GetAllAirconditionerByParamResponse::soap_type() returns SOAP_TYPE__ns1__GetAllAirconditionerByParamResponse or derived type identifier
class _ns1__GetAllAirconditionerByParamResponse
{ public:
/// Element "GetAllAirconditionerByParamResult" of type xs:string.
    std::wstring*                        GetAllAirconditionerByParamResult 0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":CadFileDownload
/// @brief "http://tempuri.org/":CadFileDownload is a complexType.
///
/// @note class _ns1__CadFileDownload operations:
/// - _ns1__CadFileDownload* soap_new__ns1__CadFileDownload(soap*) allocate and default initialize
/// - _ns1__CadFileDownload* soap_new__ns1__CadFileDownload(soap*, int num) allocate and default initialize an array
/// - _ns1__CadFileDownload* soap_new_req__ns1__CadFileDownload(soap*, ...) allocate, set required members
/// - _ns1__CadFileDownload* soap_new_set__ns1__CadFileDownload(soap*, ...) allocate, set all public members
/// - _ns1__CadFileDownload::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CadFileDownload(soap*, _ns1__CadFileDownload*) deserialize from a stream
/// - int soap_write__ns1__CadFileDownload(soap*, _ns1__CadFileDownload*) serialize to a stream
/// - _ns1__CadFileDownload* _ns1__CadFileDownload::soap_dup(soap*) returns deep copy of _ns1__CadFileDownload, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CadFileDownload::soap_del() deep deletes _ns1__CadFileDownload data members, use only after _ns1__CadFileDownload::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__CadFileDownload::soap_type() returns SOAP_TYPE__ns1__CadFileDownload or derived type identifier
class _ns1__CadFileDownload
{ public:
/// Element "Id" of type xs:int.
    int                                  Id                             1;	///< Required element.
/// Element "Type" of type xs:string.
    std::wstring*                        Type                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":CadFileDownloadResponse
/// @brief "http://tempuri.org/":CadFileDownloadResponse is a complexType.
///
/// @note class _ns1__CadFileDownloadResponse operations:
/// - _ns1__CadFileDownloadResponse* soap_new__ns1__CadFileDownloadResponse(soap*) allocate and default initialize
/// - _ns1__CadFileDownloadResponse* soap_new__ns1__CadFileDownloadResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__CadFileDownloadResponse* soap_new_req__ns1__CadFileDownloadResponse(soap*, ...) allocate, set required members
/// - _ns1__CadFileDownloadResponse* soap_new_set__ns1__CadFileDownloadResponse(soap*, ...) allocate, set all public members
/// - _ns1__CadFileDownloadResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CadFileDownloadResponse(soap*, _ns1__CadFileDownloadResponse*) deserialize from a stream
/// - int soap_write__ns1__CadFileDownloadResponse(soap*, _ns1__CadFileDownloadResponse*) serialize to a stream
/// - _ns1__CadFileDownloadResponse* _ns1__CadFileDownloadResponse::soap_dup(soap*) returns deep copy of _ns1__CadFileDownloadResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CadFileDownloadResponse::soap_del() deep deletes _ns1__CadFileDownloadResponse data members, use only after _ns1__CadFileDownloadResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__CadFileDownloadResponse::soap_type() returns SOAP_TYPE__ns1__CadFileDownloadResponse or derived type identifier
class _ns1__CadFileDownloadResponse
{ public:
/// Element "CadFileDownloadResult" of type xs:string.
    std::wstring*                        CadFileDownloadResult          0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":CadImgDownload
/// @brief "http://tempuri.org/":CadImgDownload is a complexType.
///
/// @note class _ns1__CadImgDownload operations:
/// - _ns1__CadImgDownload* soap_new__ns1__CadImgDownload(soap*) allocate and default initialize
/// - _ns1__CadImgDownload* soap_new__ns1__CadImgDownload(soap*, int num) allocate and default initialize an array
/// - _ns1__CadImgDownload* soap_new_req__ns1__CadImgDownload(soap*, ...) allocate, set required members
/// - _ns1__CadImgDownload* soap_new_set__ns1__CadImgDownload(soap*, ...) allocate, set all public members
/// - _ns1__CadImgDownload::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CadImgDownload(soap*, _ns1__CadImgDownload*) deserialize from a stream
/// - int soap_write__ns1__CadImgDownload(soap*, _ns1__CadImgDownload*) serialize to a stream
/// - _ns1__CadImgDownload* _ns1__CadImgDownload::soap_dup(soap*) returns deep copy of _ns1__CadImgDownload, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CadImgDownload::soap_del() deep deletes _ns1__CadImgDownload data members, use only after _ns1__CadImgDownload::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__CadImgDownload::soap_type() returns SOAP_TYPE__ns1__CadImgDownload or derived type identifier
class _ns1__CadImgDownload
{ public:
/// Element "Id" of type xs:int.
    int                                  Id                             1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":CadImgDownloadResponse
/// @brief "http://tempuri.org/":CadImgDownloadResponse is a complexType.
///
/// @note class _ns1__CadImgDownloadResponse operations:
/// - _ns1__CadImgDownloadResponse* soap_new__ns1__CadImgDownloadResponse(soap*) allocate and default initialize
/// - _ns1__CadImgDownloadResponse* soap_new__ns1__CadImgDownloadResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__CadImgDownloadResponse* soap_new_req__ns1__CadImgDownloadResponse(soap*, ...) allocate, set required members
/// - _ns1__CadImgDownloadResponse* soap_new_set__ns1__CadImgDownloadResponse(soap*, ...) allocate, set all public members
/// - _ns1__CadImgDownloadResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CadImgDownloadResponse(soap*, _ns1__CadImgDownloadResponse*) deserialize from a stream
/// - int soap_write__ns1__CadImgDownloadResponse(soap*, _ns1__CadImgDownloadResponse*) serialize to a stream
/// - _ns1__CadImgDownloadResponse* _ns1__CadImgDownloadResponse::soap_dup(soap*) returns deep copy of _ns1__CadImgDownloadResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CadImgDownloadResponse::soap_del() deep deletes _ns1__CadImgDownloadResponse data members, use only after _ns1__CadImgDownloadResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__CadImgDownloadResponse::soap_type() returns SOAP_TYPE__ns1__CadImgDownloadResponse or derived type identifier
class _ns1__CadImgDownloadResponse
{ public:
/// Element "CadImgDownloadResult" of type xs:string.
    std::wstring*                        CadImgDownloadResult           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	ArgumentSettingServiceSoap 
//gsoap ns1  service type:	ArgumentSettingServiceSoap 
//gsoap ns1  service port:	http://10.4.64.91/SunacCADService.asmx 
//gsoap ns1  service namespace:	http://tempuri.org/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref ArgumentSettingServiceSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page ArgumentSettingServiceSoap Binding "ArgumentSettingServiceSoap"

@section ArgumentSettingServiceSoap_operations Operations of Binding "ArgumentSettingServiceSoap"

  - @ref __ns1__StandardDesignAttribute

  - @ref __ns1__GetAllWindows

  - @ref __ns1__GetWindows

  - @ref __ns1__GetAllDoor

  - @ref __ns1__GetAllDoorByParam

  - @ref __ns1__GetAllKitchen

  - @ref __ns1__GetAllKitchenParam

  - @ref __ns1__GetAllBathroom

  - @ref __ns1__GetAllBathroomByParam

  - @ref __ns1__GetAllHandrailByParam

  - @ref __ns1__GetAllAirconditionerByParam

  - @ref __ns1__CadFileDownload

  - @ref __ns1__CadImgDownload

  - @ref __ns1__StandardDesignAttribute_

  - @ref __ns1__GetAllWindows_

  - @ref __ns1__GetWindows_

  - @ref __ns1__GetAllDoor_

  - @ref __ns1__GetAllDoorByParam_

  - @ref __ns1__GetAllKitchen_

  - @ref __ns1__GetAllKitchenParam_

  - @ref __ns1__GetAllBathroom_

  - @ref __ns1__GetAllBathroomByParam_

  - @ref __ns1__GetAllHandrailByParam_

  - @ref __ns1__GetAllAirconditionerByParam_

  - @ref __ns1__CadFileDownload_

  - @ref __ns1__CadImgDownload_

@section ArgumentSettingServiceSoap_ports Default endpoints of Binding "ArgumentSettingServiceSoap"

  - http://10.4.64.91/SunacCADService.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   ArgumentSettingServiceSoap                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__StandardDesignAttribute                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__StandardDesignAttribute" of service binding "ArgumentSettingServiceSoap".
1;2

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/StandardDesignAttribute"

  - Addressing input action: "http://tempuri.org/StandardDesignAttribute"

  - Addressing output action: "http://tempuri.org/StandardDesignAttributeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__StandardDesignAttribute(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__StandardDesignAttribute*      ns1__StandardDesignAttribute,
    // output parameters:
    _ns1__StandardDesignAttributeResponse&ns1__StandardDesignAttributeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__StandardDesignAttribute(
    struct soap *soap,
    // input parameters:
    _ns1__StandardDesignAttribute*      ns1__StandardDesignAttribute,
    // output parameters:
    _ns1__StandardDesignAttributeResponse&ns1__StandardDesignAttributeResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	StandardDesignAttribute SOAP
//gsoap ns1  service method-style:	StandardDesignAttribute document
//gsoap ns1  service method-encoding:	StandardDesignAttribute literal
//gsoap ns1  service method-input-action:	StandardDesignAttribute http://tempuri.org/StandardDesignAttribute
//gsoap ns1  service method-output-action:	StandardDesignAttribute http://tempuri.org/StandardDesignAttributeResponse
int __ns1__StandardDesignAttribute(
    _ns1__StandardDesignAttribute*      ns1__StandardDesignAttribute,	///< Input parameter
    _ns1__StandardDesignAttributeResponse&ns1__StandardDesignAttributeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllWindows                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllWindows" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllWindows"

  - Addressing input action: "http://tempuri.org/GetAllWindows"

  - Addressing output action: "http://tempuri.org/GetAllWindowsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllWindows(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllWindows*                ns1__GetAllWindows,
    // output parameters:
    _ns1__GetAllWindowsResponse        &ns1__GetAllWindowsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllWindows(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllWindows*                ns1__GetAllWindows,
    // output parameters:
    _ns1__GetAllWindowsResponse        &ns1__GetAllWindowsResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllWindows SOAP
//gsoap ns1  service method-style:	GetAllWindows document
//gsoap ns1  service method-encoding:	GetAllWindows literal
//gsoap ns1  service method-input-action:	GetAllWindows http://tempuri.org/GetAllWindows
//gsoap ns1  service method-output-action:	GetAllWindows http://tempuri.org/GetAllWindowsResponse
int __ns1__GetAllWindows(
    _ns1__GetAllWindows*                ns1__GetAllWindows,	///< Input parameter
    _ns1__GetAllWindowsResponse        &ns1__GetAllWindowsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetWindows                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetWindows" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetWindows"

  - Addressing input action: "http://tempuri.org/GetWindows"

  - Addressing output action: "http://tempuri.org/GetWindowsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetWindows(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetWindows*                   ns1__GetWindows,
    // output parameters:
    _ns1__GetWindowsResponse           &ns1__GetWindowsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetWindows(
    struct soap *soap,
    // input parameters:
    _ns1__GetWindows*                   ns1__GetWindows,
    // output parameters:
    _ns1__GetWindowsResponse           &ns1__GetWindowsResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetWindows SOAP
//gsoap ns1  service method-style:	GetWindows document
//gsoap ns1  service method-encoding:	GetWindows literal
//gsoap ns1  service method-input-action:	GetWindows http://tempuri.org/GetWindows
//gsoap ns1  service method-output-action:	GetWindows http://tempuri.org/GetWindowsResponse
int __ns1__GetWindows(
    _ns1__GetWindows*                   ns1__GetWindows,	///< Input parameter
    _ns1__GetWindowsResponse           &ns1__GetWindowsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllDoor                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllDoor" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllDoor"

  - Addressing input action: "http://tempuri.org/GetAllDoor"

  - Addressing output action: "http://tempuri.org/GetAllDoorResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllDoor(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllDoor*                   ns1__GetAllDoor,
    // output parameters:
    _ns1__GetAllDoorResponse           &ns1__GetAllDoorResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllDoor(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllDoor*                   ns1__GetAllDoor,
    // output parameters:
    _ns1__GetAllDoorResponse           &ns1__GetAllDoorResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllDoor SOAP
//gsoap ns1  service method-style:	GetAllDoor document
//gsoap ns1  service method-encoding:	GetAllDoor literal
//gsoap ns1  service method-input-action:	GetAllDoor http://tempuri.org/GetAllDoor
//gsoap ns1  service method-output-action:	GetAllDoor http://tempuri.org/GetAllDoorResponse
int __ns1__GetAllDoor(
    _ns1__GetAllDoor*                   ns1__GetAllDoor,	///< Input parameter
    _ns1__GetAllDoorResponse           &ns1__GetAllDoorResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllDoorByParam                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllDoorByParam" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllDoorByParam"

  - Addressing input action: "http://tempuri.org/GetAllDoorByParam"

  - Addressing output action: "http://tempuri.org/GetAllDoorByParamResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllDoorByParam(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllDoorByParam*            ns1__GetAllDoorByParam,
    // output parameters:
    _ns1__GetAllDoorByParamResponse    &ns1__GetAllDoorByParamResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllDoorByParam(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllDoorByParam*            ns1__GetAllDoorByParam,
    // output parameters:
    _ns1__GetAllDoorByParamResponse    &ns1__GetAllDoorByParamResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllDoorByParam SOAP
//gsoap ns1  service method-style:	GetAllDoorByParam document
//gsoap ns1  service method-encoding:	GetAllDoorByParam literal
//gsoap ns1  service method-input-action:	GetAllDoorByParam http://tempuri.org/GetAllDoorByParam
//gsoap ns1  service method-output-action:	GetAllDoorByParam http://tempuri.org/GetAllDoorByParamResponse
int __ns1__GetAllDoorByParam(
    _ns1__GetAllDoorByParam*            ns1__GetAllDoorByParam,	///< Input parameter
    _ns1__GetAllDoorByParamResponse    &ns1__GetAllDoorByParamResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllKitchen                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllKitchen" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllKitchen"

  - Addressing input action: "http://tempuri.org/GetAllKitchen"

  - Addressing output action: "http://tempuri.org/GetAllKitchenResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllKitchen(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllKitchen*                ns1__GetAllKitchen,
    // output parameters:
    _ns1__GetAllKitchenResponse        &ns1__GetAllKitchenResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllKitchen(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllKitchen*                ns1__GetAllKitchen,
    // output parameters:
    _ns1__GetAllKitchenResponse        &ns1__GetAllKitchenResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllKitchen SOAP
//gsoap ns1  service method-style:	GetAllKitchen document
//gsoap ns1  service method-encoding:	GetAllKitchen literal
//gsoap ns1  service method-input-action:	GetAllKitchen http://tempuri.org/GetAllKitchen
//gsoap ns1  service method-output-action:	GetAllKitchen http://tempuri.org/GetAllKitchenResponse
int __ns1__GetAllKitchen(
    _ns1__GetAllKitchen*                ns1__GetAllKitchen,	///< Input parameter
    _ns1__GetAllKitchenResponse        &ns1__GetAllKitchenResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllKitchenParam                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllKitchenParam" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllKitchenParam"

  - Addressing input action: "http://tempuri.org/GetAllKitchenParam"

  - Addressing output action: "http://tempuri.org/GetAllKitchenParamResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllKitchenParam(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllKitchenParam*           ns1__GetAllKitchenParam,
    // output parameters:
    _ns1__GetAllKitchenParamResponse   &ns1__GetAllKitchenParamResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllKitchenParam(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllKitchenParam*           ns1__GetAllKitchenParam,
    // output parameters:
    _ns1__GetAllKitchenParamResponse   &ns1__GetAllKitchenParamResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllKitchenParam SOAP
//gsoap ns1  service method-style:	GetAllKitchenParam document
//gsoap ns1  service method-encoding:	GetAllKitchenParam literal
//gsoap ns1  service method-input-action:	GetAllKitchenParam http://tempuri.org/GetAllKitchenParam
//gsoap ns1  service method-output-action:	GetAllKitchenParam http://tempuri.org/GetAllKitchenParamResponse
int __ns1__GetAllKitchenParam(
    _ns1__GetAllKitchenParam*           ns1__GetAllKitchenParam,	///< Input parameter
    _ns1__GetAllKitchenParamResponse   &ns1__GetAllKitchenParamResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllBathroom                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllBathroom" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllBathroom"

  - Addressing input action: "http://tempuri.org/GetAllBathroom"

  - Addressing output action: "http://tempuri.org/GetAllBathroomResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllBathroom(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllBathroom*               ns1__GetAllBathroom,
    // output parameters:
    _ns1__GetAllBathroomResponse       &ns1__GetAllBathroomResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllBathroom(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllBathroom*               ns1__GetAllBathroom,
    // output parameters:
    _ns1__GetAllBathroomResponse       &ns1__GetAllBathroomResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllBathroom SOAP
//gsoap ns1  service method-style:	GetAllBathroom document
//gsoap ns1  service method-encoding:	GetAllBathroom literal
//gsoap ns1  service method-input-action:	GetAllBathroom http://tempuri.org/GetAllBathroom
//gsoap ns1  service method-output-action:	GetAllBathroom http://tempuri.org/GetAllBathroomResponse
int __ns1__GetAllBathroom(
    _ns1__GetAllBathroom*               ns1__GetAllBathroom,	///< Input parameter
    _ns1__GetAllBathroomResponse       &ns1__GetAllBathroomResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllBathroomByParam                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllBathroomByParam" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllBathroomByParam"

  - Addressing input action: "http://tempuri.org/GetAllBathroomByParam"

  - Addressing output action: "http://tempuri.org/GetAllBathroomByParamResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllBathroomByParam(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllBathroomByParam*        ns1__GetAllBathroomByParam,
    // output parameters:
    _ns1__GetAllBathroomByParamResponse&ns1__GetAllBathroomByParamResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllBathroomByParam(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllBathroomByParam*        ns1__GetAllBathroomByParam,
    // output parameters:
    _ns1__GetAllBathroomByParamResponse&ns1__GetAllBathroomByParamResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllBathroomByParam SOAP
//gsoap ns1  service method-style:	GetAllBathroomByParam document
//gsoap ns1  service method-encoding:	GetAllBathroomByParam literal
//gsoap ns1  service method-input-action:	GetAllBathroomByParam http://tempuri.org/GetAllBathroomByParam
//gsoap ns1  service method-output-action:	GetAllBathroomByParam http://tempuri.org/GetAllBathroomByParamResponse
int __ns1__GetAllBathroomByParam(
    _ns1__GetAllBathroomByParam*        ns1__GetAllBathroomByParam,	///< Input parameter
    _ns1__GetAllBathroomByParamResponse&ns1__GetAllBathroomByParamResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllHandrailByParam                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllHandrailByParam" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllHandrailByParam"

  - Addressing input action: "http://tempuri.org/GetAllHandrailByParam"

  - Addressing output action: "http://tempuri.org/GetAllHandrailByParamResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllHandrailByParam(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllHandrailByParam*        ns1__GetAllHandrailByParam,
    // output parameters:
    _ns1__GetAllHandrailByParamResponse&ns1__GetAllHandrailByParamResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllHandrailByParam(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllHandrailByParam*        ns1__GetAllHandrailByParam,
    // output parameters:
    _ns1__GetAllHandrailByParamResponse&ns1__GetAllHandrailByParamResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllHandrailByParam SOAP
//gsoap ns1  service method-style:	GetAllHandrailByParam document
//gsoap ns1  service method-encoding:	GetAllHandrailByParam literal
//gsoap ns1  service method-input-action:	GetAllHandrailByParam http://tempuri.org/GetAllHandrailByParam
//gsoap ns1  service method-output-action:	GetAllHandrailByParam http://tempuri.org/GetAllHandrailByParamResponse
int __ns1__GetAllHandrailByParam(
    _ns1__GetAllHandrailByParam*        ns1__GetAllHandrailByParam,	///< Input parameter
    _ns1__GetAllHandrailByParamResponse&ns1__GetAllHandrailByParamResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllAirconditionerByParam                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllAirconditionerByParam" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllAirconditionerByParam"

  - Addressing input action: "http://tempuri.org/GetAllAirconditionerByParam"

  - Addressing output action: "http://tempuri.org/GetAllAirconditionerByParamResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllAirconditionerByParam(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllAirconditionerByParam*  ns1__GetAllAirconditionerByParam,
    // output parameters:
    _ns1__GetAllAirconditionerByParamResponse&ns1__GetAllAirconditionerByParamResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllAirconditionerByParam(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllAirconditionerByParam*  ns1__GetAllAirconditionerByParam,
    // output parameters:
    _ns1__GetAllAirconditionerByParamResponse&ns1__GetAllAirconditionerByParamResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllAirconditionerByParam SOAP
//gsoap ns1  service method-style:	GetAllAirconditionerByParam document
//gsoap ns1  service method-encoding:	GetAllAirconditionerByParam literal
//gsoap ns1  service method-input-action:	GetAllAirconditionerByParam http://tempuri.org/GetAllAirconditionerByParam
//gsoap ns1  service method-output-action:	GetAllAirconditionerByParam http://tempuri.org/GetAllAirconditionerByParamResponse
int __ns1__GetAllAirconditionerByParam(
    _ns1__GetAllAirconditionerByParam*  ns1__GetAllAirconditionerByParam,	///< Input parameter
    _ns1__GetAllAirconditionerByParamResponse&ns1__GetAllAirconditionerByParamResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CadFileDownload                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CadFileDownload" of service binding "ArgumentSettingServiceSoap".
[ CAD]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/CadFileDownload"

  - Addressing input action: "http://tempuri.org/CadFileDownload"

  - Addressing output action: "http://tempuri.org/CadFileDownloadResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CadFileDownload(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CadFileDownload*              ns1__CadFileDownload,
    // output parameters:
    _ns1__CadFileDownloadResponse      &ns1__CadFileDownloadResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CadFileDownload(
    struct soap *soap,
    // input parameters:
    _ns1__CadFileDownload*              ns1__CadFileDownload,
    // output parameters:
    _ns1__CadFileDownloadResponse      &ns1__CadFileDownloadResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CadFileDownload SOAP
//gsoap ns1  service method-style:	CadFileDownload document
//gsoap ns1  service method-encoding:	CadFileDownload literal
//gsoap ns1  service method-input-action:	CadFileDownload http://tempuri.org/CadFileDownload
//gsoap ns1  service method-output-action:	CadFileDownload http://tempuri.org/CadFileDownloadResponse
int __ns1__CadFileDownload(
    _ns1__CadFileDownload*              ns1__CadFileDownload,	///< Input parameter
    _ns1__CadFileDownloadResponse      &ns1__CadFileDownloadResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CadImgDownload                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CadImgDownload" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/CadImgDownload"

  - Addressing input action: "http://tempuri.org/CadImgDownload"

  - Addressing output action: "http://tempuri.org/CadImgDownloadResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CadImgDownload(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CadImgDownload*               ns1__CadImgDownload,
    // output parameters:
    _ns1__CadImgDownloadResponse       &ns1__CadImgDownloadResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CadImgDownload(
    struct soap *soap,
    // input parameters:
    _ns1__CadImgDownload*               ns1__CadImgDownload,
    // output parameters:
    _ns1__CadImgDownloadResponse       &ns1__CadImgDownloadResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CadImgDownload SOAP
//gsoap ns1  service method-style:	CadImgDownload document
//gsoap ns1  service method-encoding:	CadImgDownload literal
//gsoap ns1  service method-input-action:	CadImgDownload http://tempuri.org/CadImgDownload
//gsoap ns1  service method-output-action:	CadImgDownload http://tempuri.org/CadImgDownloadResponse
int __ns1__CadImgDownload(
    _ns1__CadImgDownload*               ns1__CadImgDownload,	///< Input parameter
    _ns1__CadImgDownloadResponse       &ns1__CadImgDownloadResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__StandardDesignAttribute_                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__StandardDesignAttribute_" of service binding "ArgumentSettingServiceSoap".
1;2

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/StandardDesignAttribute"

  - Addressing input action: "http://tempuri.org/StandardDesignAttribute"

  - Addressing output action: "http://tempuri.org/StandardDesignAttributeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__StandardDesignAttribute_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__StandardDesignAttribute*      ns1__StandardDesignAttribute,
    // output parameters:
    _ns1__StandardDesignAttributeResponse&ns1__StandardDesignAttributeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__StandardDesignAttribute_(
    struct soap *soap,
    // input parameters:
    _ns1__StandardDesignAttribute*      ns1__StandardDesignAttribute,
    // output parameters:
    _ns1__StandardDesignAttributeResponse&ns1__StandardDesignAttributeResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	StandardDesignAttribute_ SOAP
//gsoap ns1  service method-style:	StandardDesignAttribute_ document
//gsoap ns1  service method-encoding:	StandardDesignAttribute_ literal
//gsoap ns1  service method-input-action:	StandardDesignAttribute_ http://tempuri.org/StandardDesignAttribute
//gsoap ns1  service method-output-action:	StandardDesignAttribute_ http://tempuri.org/StandardDesignAttributeResponse
int __ns1__StandardDesignAttribute_(
    _ns1__StandardDesignAttribute*      ns1__StandardDesignAttribute,	///< Input parameter
    _ns1__StandardDesignAttributeResponse&ns1__StandardDesignAttributeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllWindows_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllWindows_" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllWindows"

  - Addressing input action: "http://tempuri.org/GetAllWindows"

  - Addressing output action: "http://tempuri.org/GetAllWindowsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllWindows_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllWindows*                ns1__GetAllWindows,
    // output parameters:
    _ns1__GetAllWindowsResponse        &ns1__GetAllWindowsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllWindows_(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllWindows*                ns1__GetAllWindows,
    // output parameters:
    _ns1__GetAllWindowsResponse        &ns1__GetAllWindowsResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllWindows_ SOAP
//gsoap ns1  service method-style:	GetAllWindows_ document
//gsoap ns1  service method-encoding:	GetAllWindows_ literal
//gsoap ns1  service method-input-action:	GetAllWindows_ http://tempuri.org/GetAllWindows
//gsoap ns1  service method-output-action:	GetAllWindows_ http://tempuri.org/GetAllWindowsResponse
int __ns1__GetAllWindows_(
    _ns1__GetAllWindows*                ns1__GetAllWindows,	///< Input parameter
    _ns1__GetAllWindowsResponse        &ns1__GetAllWindowsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetWindows_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetWindows_" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetWindows"

  - Addressing input action: "http://tempuri.org/GetWindows"

  - Addressing output action: "http://tempuri.org/GetWindowsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetWindows_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetWindows*                   ns1__GetWindows,
    // output parameters:
    _ns1__GetWindowsResponse           &ns1__GetWindowsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetWindows_(
    struct soap *soap,
    // input parameters:
    _ns1__GetWindows*                   ns1__GetWindows,
    // output parameters:
    _ns1__GetWindowsResponse           &ns1__GetWindowsResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetWindows_ SOAP
//gsoap ns1  service method-style:	GetWindows_ document
//gsoap ns1  service method-encoding:	GetWindows_ literal
//gsoap ns1  service method-input-action:	GetWindows_ http://tempuri.org/GetWindows
//gsoap ns1  service method-output-action:	GetWindows_ http://tempuri.org/GetWindowsResponse
int __ns1__GetWindows_(
    _ns1__GetWindows*                   ns1__GetWindows,	///< Input parameter
    _ns1__GetWindowsResponse           &ns1__GetWindowsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllDoor_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllDoor_" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllDoor"

  - Addressing input action: "http://tempuri.org/GetAllDoor"

  - Addressing output action: "http://tempuri.org/GetAllDoorResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllDoor_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllDoor*                   ns1__GetAllDoor,
    // output parameters:
    _ns1__GetAllDoorResponse           &ns1__GetAllDoorResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllDoor_(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllDoor*                   ns1__GetAllDoor,
    // output parameters:
    _ns1__GetAllDoorResponse           &ns1__GetAllDoorResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllDoor_ SOAP
//gsoap ns1  service method-style:	GetAllDoor_ document
//gsoap ns1  service method-encoding:	GetAllDoor_ literal
//gsoap ns1  service method-input-action:	GetAllDoor_ http://tempuri.org/GetAllDoor
//gsoap ns1  service method-output-action:	GetAllDoor_ http://tempuri.org/GetAllDoorResponse
int __ns1__GetAllDoor_(
    _ns1__GetAllDoor*                   ns1__GetAllDoor,	///< Input parameter
    _ns1__GetAllDoorResponse           &ns1__GetAllDoorResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllDoorByParam_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllDoorByParam_" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllDoorByParam"

  - Addressing input action: "http://tempuri.org/GetAllDoorByParam"

  - Addressing output action: "http://tempuri.org/GetAllDoorByParamResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllDoorByParam_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllDoorByParam*            ns1__GetAllDoorByParam,
    // output parameters:
    _ns1__GetAllDoorByParamResponse    &ns1__GetAllDoorByParamResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllDoorByParam_(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllDoorByParam*            ns1__GetAllDoorByParam,
    // output parameters:
    _ns1__GetAllDoorByParamResponse    &ns1__GetAllDoorByParamResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllDoorByParam_ SOAP
//gsoap ns1  service method-style:	GetAllDoorByParam_ document
//gsoap ns1  service method-encoding:	GetAllDoorByParam_ literal
//gsoap ns1  service method-input-action:	GetAllDoorByParam_ http://tempuri.org/GetAllDoorByParam
//gsoap ns1  service method-output-action:	GetAllDoorByParam_ http://tempuri.org/GetAllDoorByParamResponse
int __ns1__GetAllDoorByParam_(
    _ns1__GetAllDoorByParam*            ns1__GetAllDoorByParam,	///< Input parameter
    _ns1__GetAllDoorByParamResponse    &ns1__GetAllDoorByParamResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllKitchen_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllKitchen_" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllKitchen"

  - Addressing input action: "http://tempuri.org/GetAllKitchen"

  - Addressing output action: "http://tempuri.org/GetAllKitchenResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllKitchen_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllKitchen*                ns1__GetAllKitchen,
    // output parameters:
    _ns1__GetAllKitchenResponse        &ns1__GetAllKitchenResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllKitchen_(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllKitchen*                ns1__GetAllKitchen,
    // output parameters:
    _ns1__GetAllKitchenResponse        &ns1__GetAllKitchenResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllKitchen_ SOAP
//gsoap ns1  service method-style:	GetAllKitchen_ document
//gsoap ns1  service method-encoding:	GetAllKitchen_ literal
//gsoap ns1  service method-input-action:	GetAllKitchen_ http://tempuri.org/GetAllKitchen
//gsoap ns1  service method-output-action:	GetAllKitchen_ http://tempuri.org/GetAllKitchenResponse
int __ns1__GetAllKitchen_(
    _ns1__GetAllKitchen*                ns1__GetAllKitchen,	///< Input parameter
    _ns1__GetAllKitchenResponse        &ns1__GetAllKitchenResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllKitchenParam_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllKitchenParam_" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllKitchenParam"

  - Addressing input action: "http://tempuri.org/GetAllKitchenParam"

  - Addressing output action: "http://tempuri.org/GetAllKitchenParamResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllKitchenParam_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllKitchenParam*           ns1__GetAllKitchenParam,
    // output parameters:
    _ns1__GetAllKitchenParamResponse   &ns1__GetAllKitchenParamResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllKitchenParam_(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllKitchenParam*           ns1__GetAllKitchenParam,
    // output parameters:
    _ns1__GetAllKitchenParamResponse   &ns1__GetAllKitchenParamResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllKitchenParam_ SOAP
//gsoap ns1  service method-style:	GetAllKitchenParam_ document
//gsoap ns1  service method-encoding:	GetAllKitchenParam_ literal
//gsoap ns1  service method-input-action:	GetAllKitchenParam_ http://tempuri.org/GetAllKitchenParam
//gsoap ns1  service method-output-action:	GetAllKitchenParam_ http://tempuri.org/GetAllKitchenParamResponse
int __ns1__GetAllKitchenParam_(
    _ns1__GetAllKitchenParam*           ns1__GetAllKitchenParam,	///< Input parameter
    _ns1__GetAllKitchenParamResponse   &ns1__GetAllKitchenParamResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllBathroom_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllBathroom_" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllBathroom"

  - Addressing input action: "http://tempuri.org/GetAllBathroom"

  - Addressing output action: "http://tempuri.org/GetAllBathroomResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllBathroom_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllBathroom*               ns1__GetAllBathroom,
    // output parameters:
    _ns1__GetAllBathroomResponse       &ns1__GetAllBathroomResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllBathroom_(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllBathroom*               ns1__GetAllBathroom,
    // output parameters:
    _ns1__GetAllBathroomResponse       &ns1__GetAllBathroomResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllBathroom_ SOAP
//gsoap ns1  service method-style:	GetAllBathroom_ document
//gsoap ns1  service method-encoding:	GetAllBathroom_ literal
//gsoap ns1  service method-input-action:	GetAllBathroom_ http://tempuri.org/GetAllBathroom
//gsoap ns1  service method-output-action:	GetAllBathroom_ http://tempuri.org/GetAllBathroomResponse
int __ns1__GetAllBathroom_(
    _ns1__GetAllBathroom*               ns1__GetAllBathroom,	///< Input parameter
    _ns1__GetAllBathroomResponse       &ns1__GetAllBathroomResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllBathroomByParam_                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllBathroomByParam_" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllBathroomByParam"

  - Addressing input action: "http://tempuri.org/GetAllBathroomByParam"

  - Addressing output action: "http://tempuri.org/GetAllBathroomByParamResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllBathroomByParam_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllBathroomByParam*        ns1__GetAllBathroomByParam,
    // output parameters:
    _ns1__GetAllBathroomByParamResponse&ns1__GetAllBathroomByParamResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllBathroomByParam_(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllBathroomByParam*        ns1__GetAllBathroomByParam,
    // output parameters:
    _ns1__GetAllBathroomByParamResponse&ns1__GetAllBathroomByParamResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllBathroomByParam_ SOAP
//gsoap ns1  service method-style:	GetAllBathroomByParam_ document
//gsoap ns1  service method-encoding:	GetAllBathroomByParam_ literal
//gsoap ns1  service method-input-action:	GetAllBathroomByParam_ http://tempuri.org/GetAllBathroomByParam
//gsoap ns1  service method-output-action:	GetAllBathroomByParam_ http://tempuri.org/GetAllBathroomByParamResponse
int __ns1__GetAllBathroomByParam_(
    _ns1__GetAllBathroomByParam*        ns1__GetAllBathroomByParam,	///< Input parameter
    _ns1__GetAllBathroomByParamResponse&ns1__GetAllBathroomByParamResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllHandrailByParam_                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllHandrailByParam_" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllHandrailByParam"

  - Addressing input action: "http://tempuri.org/GetAllHandrailByParam"

  - Addressing output action: "http://tempuri.org/GetAllHandrailByParamResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllHandrailByParam_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllHandrailByParam*        ns1__GetAllHandrailByParam,
    // output parameters:
    _ns1__GetAllHandrailByParamResponse&ns1__GetAllHandrailByParamResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllHandrailByParam_(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllHandrailByParam*        ns1__GetAllHandrailByParam,
    // output parameters:
    _ns1__GetAllHandrailByParamResponse&ns1__GetAllHandrailByParamResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllHandrailByParam_ SOAP
//gsoap ns1  service method-style:	GetAllHandrailByParam_ document
//gsoap ns1  service method-encoding:	GetAllHandrailByParam_ literal
//gsoap ns1  service method-input-action:	GetAllHandrailByParam_ http://tempuri.org/GetAllHandrailByParam
//gsoap ns1  service method-output-action:	GetAllHandrailByParam_ http://tempuri.org/GetAllHandrailByParamResponse
int __ns1__GetAllHandrailByParam_(
    _ns1__GetAllHandrailByParam*        ns1__GetAllHandrailByParam,	///< Input parameter
    _ns1__GetAllHandrailByParamResponse&ns1__GetAllHandrailByParamResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllAirconditionerByParam_                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllAirconditionerByParam_" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetAllAirconditionerByParam"

  - Addressing input action: "http://tempuri.org/GetAllAirconditionerByParam"

  - Addressing output action: "http://tempuri.org/GetAllAirconditionerByParamResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllAirconditionerByParam_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllAirconditionerByParam*  ns1__GetAllAirconditionerByParam,
    // output parameters:
    _ns1__GetAllAirconditionerByParamResponse&ns1__GetAllAirconditionerByParamResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllAirconditionerByParam_(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllAirconditionerByParam*  ns1__GetAllAirconditionerByParam,
    // output parameters:
    _ns1__GetAllAirconditionerByParamResponse&ns1__GetAllAirconditionerByParamResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllAirconditionerByParam_ SOAP
//gsoap ns1  service method-style:	GetAllAirconditionerByParam_ document
//gsoap ns1  service method-encoding:	GetAllAirconditionerByParam_ literal
//gsoap ns1  service method-input-action:	GetAllAirconditionerByParam_ http://tempuri.org/GetAllAirconditionerByParam
//gsoap ns1  service method-output-action:	GetAllAirconditionerByParam_ http://tempuri.org/GetAllAirconditionerByParamResponse
int __ns1__GetAllAirconditionerByParam_(
    _ns1__GetAllAirconditionerByParam*  ns1__GetAllAirconditionerByParam,	///< Input parameter
    _ns1__GetAllAirconditionerByParamResponse&ns1__GetAllAirconditionerByParamResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CadFileDownload_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CadFileDownload_" of service binding "ArgumentSettingServiceSoap".
[ CAD]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/CadFileDownload"

  - Addressing input action: "http://tempuri.org/CadFileDownload"

  - Addressing output action: "http://tempuri.org/CadFileDownloadResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CadFileDownload_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CadFileDownload*              ns1__CadFileDownload,
    // output parameters:
    _ns1__CadFileDownloadResponse      &ns1__CadFileDownloadResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CadFileDownload_(
    struct soap *soap,
    // input parameters:
    _ns1__CadFileDownload*              ns1__CadFileDownload,
    // output parameters:
    _ns1__CadFileDownloadResponse      &ns1__CadFileDownloadResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CadFileDownload_ SOAP
//gsoap ns1  service method-style:	CadFileDownload_ document
//gsoap ns1  service method-encoding:	CadFileDownload_ literal
//gsoap ns1  service method-input-action:	CadFileDownload_ http://tempuri.org/CadFileDownload
//gsoap ns1  service method-output-action:	CadFileDownload_ http://tempuri.org/CadFileDownloadResponse
int __ns1__CadFileDownload_(
    _ns1__CadFileDownload*              ns1__CadFileDownload,	///< Input parameter
    _ns1__CadFileDownloadResponse      &ns1__CadFileDownloadResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CadImgDownload_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CadImgDownload_" of service binding "ArgumentSettingServiceSoap".
[]

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/CadImgDownload"

  - Addressing input action: "http://tempuri.org/CadImgDownload"

  - Addressing output action: "http://tempuri.org/CadImgDownloadResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CadImgDownload_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CadImgDownload*               ns1__CadImgDownload,
    // output parameters:
    _ns1__CadImgDownloadResponse       &ns1__CadImgDownloadResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CadImgDownload_(
    struct soap *soap,
    // input parameters:
    _ns1__CadImgDownload*               ns1__CadImgDownload,
    // output parameters:
    _ns1__CadImgDownloadResponse       &ns1__CadImgDownloadResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CadImgDownload_ SOAP
//gsoap ns1  service method-style:	CadImgDownload_ document
//gsoap ns1  service method-encoding:	CadImgDownload_ literal
//gsoap ns1  service method-input-action:	CadImgDownload_ http://tempuri.org/CadImgDownload
//gsoap ns1  service method-output-action:	CadImgDownload_ http://tempuri.org/CadImgDownloadResponse
int __ns1__CadImgDownload_(
    _ns1__CadImgDownload*               ns1__CadImgDownload,	///< Input parameter
    _ns1__CadImgDownloadResponse       &ns1__CadImgDownloadResponse	///< Output parameter
);

/**

@page ArgumentSettingServiceSoap Binding "ArgumentSettingServiceSoap"

@section ArgumentSettingServiceSoap_policy_enablers Policy Enablers of Binding "ArgumentSettingServiceSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDL and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://tempuri.org/"

  - <ns1:StandardDesignAttribute> @ref _ns1__StandardDesignAttribute
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StandardDesignAttribute(struct soap*, _ns1__StandardDesignAttribute*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StandardDesignAttribute(struct soap*, _ns1__StandardDesignAttribute*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__StandardDesignAttribute(struct soap*, const char *URL, _ns1__StandardDesignAttribute*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__StandardDesignAttribute(struct soap*, const char *URL, _ns1__StandardDesignAttribute*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__StandardDesignAttribute(struct soap*, const char *URL, _ns1__StandardDesignAttribute*);
    soap_POST_recv__ns1__StandardDesignAttribute(struct soap*, _ns1__StandardDesignAttribute*);
    @endcode

  - <ns1:StandardDesignAttributeResponse> @ref _ns1__StandardDesignAttributeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StandardDesignAttributeResponse(struct soap*, _ns1__StandardDesignAttributeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StandardDesignAttributeResponse(struct soap*, _ns1__StandardDesignAttributeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__StandardDesignAttributeResponse(struct soap*, const char *URL, _ns1__StandardDesignAttributeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__StandardDesignAttributeResponse(struct soap*, const char *URL, _ns1__StandardDesignAttributeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__StandardDesignAttributeResponse(struct soap*, const char *URL, _ns1__StandardDesignAttributeResponse*);
    soap_POST_recv__ns1__StandardDesignAttributeResponse(struct soap*, _ns1__StandardDesignAttributeResponse*);
    @endcode

  - <ns1:GetAllWindows> @ref _ns1__GetAllWindows
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllWindows(struct soap*, _ns1__GetAllWindows*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllWindows(struct soap*, _ns1__GetAllWindows*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllWindows(struct soap*, const char *URL, _ns1__GetAllWindows*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllWindows(struct soap*, const char *URL, _ns1__GetAllWindows*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllWindows(struct soap*, const char *URL, _ns1__GetAllWindows*);
    soap_POST_recv__ns1__GetAllWindows(struct soap*, _ns1__GetAllWindows*);
    @endcode

  - <ns1:GetAllWindowsResponse> @ref _ns1__GetAllWindowsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllWindowsResponse(struct soap*, _ns1__GetAllWindowsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllWindowsResponse(struct soap*, _ns1__GetAllWindowsResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllWindowsResponse(struct soap*, const char *URL, _ns1__GetAllWindowsResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllWindowsResponse(struct soap*, const char *URL, _ns1__GetAllWindowsResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllWindowsResponse(struct soap*, const char *URL, _ns1__GetAllWindowsResponse*);
    soap_POST_recv__ns1__GetAllWindowsResponse(struct soap*, _ns1__GetAllWindowsResponse*);
    @endcode

  - <ns1:GetWindows> @ref _ns1__GetWindows
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetWindows(struct soap*, _ns1__GetWindows*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetWindows(struct soap*, _ns1__GetWindows*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetWindows(struct soap*, const char *URL, _ns1__GetWindows*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetWindows(struct soap*, const char *URL, _ns1__GetWindows*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetWindows(struct soap*, const char *URL, _ns1__GetWindows*);
    soap_POST_recv__ns1__GetWindows(struct soap*, _ns1__GetWindows*);
    @endcode

  - <ns1:GetWindowsResponse> @ref _ns1__GetWindowsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetWindowsResponse(struct soap*, _ns1__GetWindowsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetWindowsResponse(struct soap*, _ns1__GetWindowsResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetWindowsResponse(struct soap*, const char *URL, _ns1__GetWindowsResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetWindowsResponse(struct soap*, const char *URL, _ns1__GetWindowsResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetWindowsResponse(struct soap*, const char *URL, _ns1__GetWindowsResponse*);
    soap_POST_recv__ns1__GetWindowsResponse(struct soap*, _ns1__GetWindowsResponse*);
    @endcode

  - <ns1:GetAllDoor> @ref _ns1__GetAllDoor
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllDoor(struct soap*, _ns1__GetAllDoor*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllDoor(struct soap*, _ns1__GetAllDoor*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllDoor(struct soap*, const char *URL, _ns1__GetAllDoor*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllDoor(struct soap*, const char *URL, _ns1__GetAllDoor*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllDoor(struct soap*, const char *URL, _ns1__GetAllDoor*);
    soap_POST_recv__ns1__GetAllDoor(struct soap*, _ns1__GetAllDoor*);
    @endcode

  - <ns1:GetAllDoorResponse> @ref _ns1__GetAllDoorResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllDoorResponse(struct soap*, _ns1__GetAllDoorResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllDoorResponse(struct soap*, _ns1__GetAllDoorResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllDoorResponse(struct soap*, const char *URL, _ns1__GetAllDoorResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllDoorResponse(struct soap*, const char *URL, _ns1__GetAllDoorResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllDoorResponse(struct soap*, const char *URL, _ns1__GetAllDoorResponse*);
    soap_POST_recv__ns1__GetAllDoorResponse(struct soap*, _ns1__GetAllDoorResponse*);
    @endcode

  - <ns1:GetAllDoorByParam> @ref _ns1__GetAllDoorByParam
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllDoorByParam(struct soap*, _ns1__GetAllDoorByParam*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllDoorByParam(struct soap*, _ns1__GetAllDoorByParam*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllDoorByParam(struct soap*, const char *URL, _ns1__GetAllDoorByParam*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllDoorByParam(struct soap*, const char *URL, _ns1__GetAllDoorByParam*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllDoorByParam(struct soap*, const char *URL, _ns1__GetAllDoorByParam*);
    soap_POST_recv__ns1__GetAllDoorByParam(struct soap*, _ns1__GetAllDoorByParam*);
    @endcode

  - <ns1:GetAllDoorByParamResponse> @ref _ns1__GetAllDoorByParamResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllDoorByParamResponse(struct soap*, _ns1__GetAllDoorByParamResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllDoorByParamResponse(struct soap*, _ns1__GetAllDoorByParamResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllDoorByParamResponse(struct soap*, const char *URL, _ns1__GetAllDoorByParamResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllDoorByParamResponse(struct soap*, const char *URL, _ns1__GetAllDoorByParamResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllDoorByParamResponse(struct soap*, const char *URL, _ns1__GetAllDoorByParamResponse*);
    soap_POST_recv__ns1__GetAllDoorByParamResponse(struct soap*, _ns1__GetAllDoorByParamResponse*);
    @endcode

  - <ns1:GetAllKitchen> @ref _ns1__GetAllKitchen
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllKitchen(struct soap*, _ns1__GetAllKitchen*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllKitchen(struct soap*, _ns1__GetAllKitchen*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllKitchen(struct soap*, const char *URL, _ns1__GetAllKitchen*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllKitchen(struct soap*, const char *URL, _ns1__GetAllKitchen*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllKitchen(struct soap*, const char *URL, _ns1__GetAllKitchen*);
    soap_POST_recv__ns1__GetAllKitchen(struct soap*, _ns1__GetAllKitchen*);
    @endcode

  - <ns1:GetAllKitchenResponse> @ref _ns1__GetAllKitchenResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllKitchenResponse(struct soap*, _ns1__GetAllKitchenResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllKitchenResponse(struct soap*, _ns1__GetAllKitchenResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllKitchenResponse(struct soap*, const char *URL, _ns1__GetAllKitchenResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllKitchenResponse(struct soap*, const char *URL, _ns1__GetAllKitchenResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllKitchenResponse(struct soap*, const char *URL, _ns1__GetAllKitchenResponse*);
    soap_POST_recv__ns1__GetAllKitchenResponse(struct soap*, _ns1__GetAllKitchenResponse*);
    @endcode

  - <ns1:GetAllKitchenParam> @ref _ns1__GetAllKitchenParam
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllKitchenParam(struct soap*, _ns1__GetAllKitchenParam*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllKitchenParam(struct soap*, _ns1__GetAllKitchenParam*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllKitchenParam(struct soap*, const char *URL, _ns1__GetAllKitchenParam*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllKitchenParam(struct soap*, const char *URL, _ns1__GetAllKitchenParam*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllKitchenParam(struct soap*, const char *URL, _ns1__GetAllKitchenParam*);
    soap_POST_recv__ns1__GetAllKitchenParam(struct soap*, _ns1__GetAllKitchenParam*);
    @endcode

  - <ns1:GetAllKitchenParamResponse> @ref _ns1__GetAllKitchenParamResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllKitchenParamResponse(struct soap*, _ns1__GetAllKitchenParamResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllKitchenParamResponse(struct soap*, _ns1__GetAllKitchenParamResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllKitchenParamResponse(struct soap*, const char *URL, _ns1__GetAllKitchenParamResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllKitchenParamResponse(struct soap*, const char *URL, _ns1__GetAllKitchenParamResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllKitchenParamResponse(struct soap*, const char *URL, _ns1__GetAllKitchenParamResponse*);
    soap_POST_recv__ns1__GetAllKitchenParamResponse(struct soap*, _ns1__GetAllKitchenParamResponse*);
    @endcode

  - <ns1:GetAllBathroom> @ref _ns1__GetAllBathroom
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllBathroom(struct soap*, _ns1__GetAllBathroom*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllBathroom(struct soap*, _ns1__GetAllBathroom*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllBathroom(struct soap*, const char *URL, _ns1__GetAllBathroom*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllBathroom(struct soap*, const char *URL, _ns1__GetAllBathroom*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllBathroom(struct soap*, const char *URL, _ns1__GetAllBathroom*);
    soap_POST_recv__ns1__GetAllBathroom(struct soap*, _ns1__GetAllBathroom*);
    @endcode

  - <ns1:GetAllBathroomResponse> @ref _ns1__GetAllBathroomResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllBathroomResponse(struct soap*, _ns1__GetAllBathroomResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllBathroomResponse(struct soap*, _ns1__GetAllBathroomResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllBathroomResponse(struct soap*, const char *URL, _ns1__GetAllBathroomResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllBathroomResponse(struct soap*, const char *URL, _ns1__GetAllBathroomResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllBathroomResponse(struct soap*, const char *URL, _ns1__GetAllBathroomResponse*);
    soap_POST_recv__ns1__GetAllBathroomResponse(struct soap*, _ns1__GetAllBathroomResponse*);
    @endcode

  - <ns1:GetAllBathroomByParam> @ref _ns1__GetAllBathroomByParam
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllBathroomByParam(struct soap*, _ns1__GetAllBathroomByParam*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllBathroomByParam(struct soap*, _ns1__GetAllBathroomByParam*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllBathroomByParam(struct soap*, const char *URL, _ns1__GetAllBathroomByParam*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllBathroomByParam(struct soap*, const char *URL, _ns1__GetAllBathroomByParam*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllBathroomByParam(struct soap*, const char *URL, _ns1__GetAllBathroomByParam*);
    soap_POST_recv__ns1__GetAllBathroomByParam(struct soap*, _ns1__GetAllBathroomByParam*);
    @endcode

  - <ns1:GetAllBathroomByParamResponse> @ref _ns1__GetAllBathroomByParamResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllBathroomByParamResponse(struct soap*, _ns1__GetAllBathroomByParamResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllBathroomByParamResponse(struct soap*, _ns1__GetAllBathroomByParamResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllBathroomByParamResponse(struct soap*, const char *URL, _ns1__GetAllBathroomByParamResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllBathroomByParamResponse(struct soap*, const char *URL, _ns1__GetAllBathroomByParamResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllBathroomByParamResponse(struct soap*, const char *URL, _ns1__GetAllBathroomByParamResponse*);
    soap_POST_recv__ns1__GetAllBathroomByParamResponse(struct soap*, _ns1__GetAllBathroomByParamResponse*);
    @endcode

  - <ns1:GetAllHandrailByParam> @ref _ns1__GetAllHandrailByParam
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllHandrailByParam(struct soap*, _ns1__GetAllHandrailByParam*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllHandrailByParam(struct soap*, _ns1__GetAllHandrailByParam*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllHandrailByParam(struct soap*, const char *URL, _ns1__GetAllHandrailByParam*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllHandrailByParam(struct soap*, const char *URL, _ns1__GetAllHandrailByParam*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllHandrailByParam(struct soap*, const char *URL, _ns1__GetAllHandrailByParam*);
    soap_POST_recv__ns1__GetAllHandrailByParam(struct soap*, _ns1__GetAllHandrailByParam*);
    @endcode

  - <ns1:GetAllHandrailByParamResponse> @ref _ns1__GetAllHandrailByParamResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllHandrailByParamResponse(struct soap*, _ns1__GetAllHandrailByParamResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllHandrailByParamResponse(struct soap*, _ns1__GetAllHandrailByParamResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllHandrailByParamResponse(struct soap*, const char *URL, _ns1__GetAllHandrailByParamResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllHandrailByParamResponse(struct soap*, const char *URL, _ns1__GetAllHandrailByParamResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllHandrailByParamResponse(struct soap*, const char *URL, _ns1__GetAllHandrailByParamResponse*);
    soap_POST_recv__ns1__GetAllHandrailByParamResponse(struct soap*, _ns1__GetAllHandrailByParamResponse*);
    @endcode

  - <ns1:GetAllAirconditionerByParam> @ref _ns1__GetAllAirconditionerByParam
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllAirconditionerByParam(struct soap*, _ns1__GetAllAirconditionerByParam*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllAirconditionerByParam(struct soap*, _ns1__GetAllAirconditionerByParam*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllAirconditionerByParam(struct soap*, const char *URL, _ns1__GetAllAirconditionerByParam*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllAirconditionerByParam(struct soap*, const char *URL, _ns1__GetAllAirconditionerByParam*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllAirconditionerByParam(struct soap*, const char *URL, _ns1__GetAllAirconditionerByParam*);
    soap_POST_recv__ns1__GetAllAirconditionerByParam(struct soap*, _ns1__GetAllAirconditionerByParam*);
    @endcode

  - <ns1:GetAllAirconditionerByParamResponse> @ref _ns1__GetAllAirconditionerByParamResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllAirconditionerByParamResponse(struct soap*, _ns1__GetAllAirconditionerByParamResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllAirconditionerByParamResponse(struct soap*, _ns1__GetAllAirconditionerByParamResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllAirconditionerByParamResponse(struct soap*, const char *URL, _ns1__GetAllAirconditionerByParamResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllAirconditionerByParamResponse(struct soap*, const char *URL, _ns1__GetAllAirconditionerByParamResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllAirconditionerByParamResponse(struct soap*, const char *URL, _ns1__GetAllAirconditionerByParamResponse*);
    soap_POST_recv__ns1__GetAllAirconditionerByParamResponse(struct soap*, _ns1__GetAllAirconditionerByParamResponse*);
    @endcode

  - <ns1:CadFileDownload> @ref _ns1__CadFileDownload
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CadFileDownload(struct soap*, _ns1__CadFileDownload*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CadFileDownload(struct soap*, _ns1__CadFileDownload*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CadFileDownload(struct soap*, const char *URL, _ns1__CadFileDownload*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CadFileDownload(struct soap*, const char *URL, _ns1__CadFileDownload*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CadFileDownload(struct soap*, const char *URL, _ns1__CadFileDownload*);
    soap_POST_recv__ns1__CadFileDownload(struct soap*, _ns1__CadFileDownload*);
    @endcode

  - <ns1:CadFileDownloadResponse> @ref _ns1__CadFileDownloadResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CadFileDownloadResponse(struct soap*, _ns1__CadFileDownloadResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CadFileDownloadResponse(struct soap*, _ns1__CadFileDownloadResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CadFileDownloadResponse(struct soap*, const char *URL, _ns1__CadFileDownloadResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CadFileDownloadResponse(struct soap*, const char *URL, _ns1__CadFileDownloadResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CadFileDownloadResponse(struct soap*, const char *URL, _ns1__CadFileDownloadResponse*);
    soap_POST_recv__ns1__CadFileDownloadResponse(struct soap*, _ns1__CadFileDownloadResponse*);
    @endcode

  - <ns1:CadImgDownload> @ref _ns1__CadImgDownload
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CadImgDownload(struct soap*, _ns1__CadImgDownload*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CadImgDownload(struct soap*, _ns1__CadImgDownload*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CadImgDownload(struct soap*, const char *URL, _ns1__CadImgDownload*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CadImgDownload(struct soap*, const char *URL, _ns1__CadImgDownload*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CadImgDownload(struct soap*, const char *URL, _ns1__CadImgDownload*);
    soap_POST_recv__ns1__CadImgDownload(struct soap*, _ns1__CadImgDownload*);
    @endcode

  - <ns1:CadImgDownloadResponse> @ref _ns1__CadImgDownloadResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CadImgDownloadResponse(struct soap*, _ns1__CadImgDownloadResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CadImgDownloadResponse(struct soap*, _ns1__CadImgDownloadResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CadImgDownloadResponse(struct soap*, const char *URL, _ns1__CadImgDownloadResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CadImgDownloadResponse(struct soap*, const char *URL, _ns1__CadImgDownloadResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CadImgDownloadResponse(struct soap*, const char *URL, _ns1__CadImgDownloadResponse*);
    soap_POST_recv__ns1__CadImgDownloadResponse(struct soap*, _ns1__CadImgDownloadResponse*);
    @endcode

*/

/* End of SunacCADService2.h */
