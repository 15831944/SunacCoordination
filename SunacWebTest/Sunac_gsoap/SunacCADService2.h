/* SunacCADService2.h
   Generated by wsdl2h 2.8.84 from SunacCADService.wsdl and xsdString.bat
   2019-09-21 14:22:17 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on SunacCADService2.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2019, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns1 = "http://tempuri.org/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
//gsoap ns1   schema namespace:	http://tempuri.org/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


class _ns1__StandardDesignAttribute;

class _ns1__StandardDesignAttributeResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://tempuri.org/":StandardDesignAttribute
/// @brief "http://tempuri.org/":StandardDesignAttribute is a complexType.
///
/// @note class _ns1__StandardDesignAttribute operations:
/// - _ns1__StandardDesignAttribute* soap_new__ns1__StandardDesignAttribute(soap*) allocate and default initialize
/// - _ns1__StandardDesignAttribute* soap_new__ns1__StandardDesignAttribute(soap*, int num) allocate and default initialize an array
/// - _ns1__StandardDesignAttribute* soap_new_req__ns1__StandardDesignAttribute(soap*, ...) allocate, set required members
/// - _ns1__StandardDesignAttribute* soap_new_set__ns1__StandardDesignAttribute(soap*, ...) allocate, set all public members
/// - _ns1__StandardDesignAttribute::soap_default(soap*) default initialize members
/// - int soap_read__ns1__StandardDesignAttribute(soap*, _ns1__StandardDesignAttribute*) deserialize from a stream
/// - int soap_write__ns1__StandardDesignAttribute(soap*, _ns1__StandardDesignAttribute*) serialize to a stream
/// - _ns1__StandardDesignAttribute* _ns1__StandardDesignAttribute::soap_dup(soap*) returns deep copy of _ns1__StandardDesignAttribute, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__StandardDesignAttribute::soap_del() deep deletes _ns1__StandardDesignAttribute data members, use only after _ns1__StandardDesignAttribute::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__StandardDesignAttribute::soap_type() returns SOAP_TYPE__ns1__StandardDesignAttribute or derived type identifier
class _ns1__StandardDesignAttribute
{ public:
/// Element "AtrributeName" of type xs:string.
    std::wstring*                        AtrributeName                  0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":StandardDesignAttributeResponse
/// @brief "http://tempuri.org/":StandardDesignAttributeResponse is a complexType.
///
/// @note class _ns1__StandardDesignAttributeResponse operations:
/// - _ns1__StandardDesignAttributeResponse* soap_new__ns1__StandardDesignAttributeResponse(soap*) allocate and default initialize
/// - _ns1__StandardDesignAttributeResponse* soap_new__ns1__StandardDesignAttributeResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__StandardDesignAttributeResponse* soap_new_req__ns1__StandardDesignAttributeResponse(soap*, ...) allocate, set required members
/// - _ns1__StandardDesignAttributeResponse* soap_new_set__ns1__StandardDesignAttributeResponse(soap*, ...) allocate, set all public members
/// - _ns1__StandardDesignAttributeResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__StandardDesignAttributeResponse(soap*, _ns1__StandardDesignAttributeResponse*) deserialize from a stream
/// - int soap_write__ns1__StandardDesignAttributeResponse(soap*, _ns1__StandardDesignAttributeResponse*) serialize to a stream
/// - _ns1__StandardDesignAttributeResponse* _ns1__StandardDesignAttributeResponse::soap_dup(soap*) returns deep copy of _ns1__StandardDesignAttributeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__StandardDesignAttributeResponse::soap_del() deep deletes _ns1__StandardDesignAttributeResponse data members, use only after _ns1__StandardDesignAttributeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__StandardDesignAttributeResponse::soap_type() returns SOAP_TYPE__ns1__StandardDesignAttributeResponse or derived type identifier
class _ns1__StandardDesignAttributeResponse
{ public:
/// Element "StandardDesignAttributeResult" of type xs:string.
    std::wstring*                        StandardDesignAttributeResult  0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	ArgumentSettingServiceSoap 
//gsoap ns1  service type:	ArgumentSettingServiceSoap 
//gsoap ns1  service port:	http://10.4.64.91/SunacCADService.asmx 
//gsoap ns1  service namespace:	http://tempuri.org/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref ArgumentSettingServiceSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page ArgumentSettingServiceSoap Binding "ArgumentSettingServiceSoap"

@section ArgumentSettingServiceSoap_operations Operations of Binding "ArgumentSettingServiceSoap"

  - @ref __ns1__StandardDesignAttribute

  - @ref __ns1__StandardDesignAttribute_

@section ArgumentSettingServiceSoap_ports Default endpoints of Binding "ArgumentSettingServiceSoap"

  - http://10.4.64.91/SunacCADService.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   ArgumentSettingServiceSoap                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__StandardDesignAttribute                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__StandardDesignAttribute" of service binding "ArgumentSettingServiceSoap".
1;2

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/StandardDesignAttribute"

  - Addressing input action: "http://tempuri.org/StandardDesignAttribute"

  - Addressing output action: "http://tempuri.org/StandardDesignAttributeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__StandardDesignAttribute(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__StandardDesignAttribute*      ns1__StandardDesignAttribute,
    // output parameters:
    _ns1__StandardDesignAttributeResponse&ns1__StandardDesignAttributeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__StandardDesignAttribute(
    struct soap *soap,
    // input parameters:
    _ns1__StandardDesignAttribute*      ns1__StandardDesignAttribute,
    // output parameters:
    _ns1__StandardDesignAttributeResponse&ns1__StandardDesignAttributeResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	StandardDesignAttribute SOAP
//gsoap ns1  service method-style:	StandardDesignAttribute document
//gsoap ns1  service method-encoding:	StandardDesignAttribute literal
//gsoap ns1  service method-input-action:	StandardDesignAttribute http://tempuri.org/StandardDesignAttribute
//gsoap ns1  service method-output-action:	StandardDesignAttribute http://tempuri.org/StandardDesignAttributeResponse
int __ns1__StandardDesignAttribute(
    _ns1__StandardDesignAttribute*      ns1__StandardDesignAttribute,	///< Input parameter
    _ns1__StandardDesignAttributeResponse&ns1__StandardDesignAttributeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__StandardDesignAttribute_                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__StandardDesignAttribute_" of service binding "ArgumentSettingServiceSoap".
1;2

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.4.64.91/SunacCADService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/StandardDesignAttribute"

  - Addressing input action: "http://tempuri.org/StandardDesignAttribute"

  - Addressing output action: "http://tempuri.org/StandardDesignAttributeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__StandardDesignAttribute_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__StandardDesignAttribute*      ns1__StandardDesignAttribute,
    // output parameters:
    _ns1__StandardDesignAttributeResponse&ns1__StandardDesignAttributeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__StandardDesignAttribute_(
    struct soap *soap,
    // input parameters:
    _ns1__StandardDesignAttribute*      ns1__StandardDesignAttribute,
    // output parameters:
    _ns1__StandardDesignAttributeResponse&ns1__StandardDesignAttributeResponse
  );
@endcode

C++ proxy class (defined in soapArgumentSettingServiceSoapProxy.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapArgumentSettingServiceSoapService.h generated with soapcpp2):
@code
  class ArgumentSettingServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	StandardDesignAttribute_ SOAP
//gsoap ns1  service method-style:	StandardDesignAttribute_ document
//gsoap ns1  service method-encoding:	StandardDesignAttribute_ literal
//gsoap ns1  service method-input-action:	StandardDesignAttribute_ http://tempuri.org/StandardDesignAttribute
//gsoap ns1  service method-output-action:	StandardDesignAttribute_ http://tempuri.org/StandardDesignAttributeResponse
int __ns1__StandardDesignAttribute_(
    _ns1__StandardDesignAttribute*      ns1__StandardDesignAttribute,	///< Input parameter
    _ns1__StandardDesignAttributeResponse&ns1__StandardDesignAttributeResponse	///< Output parameter
);

/**

@page ArgumentSettingServiceSoap Binding "ArgumentSettingServiceSoap"

@section ArgumentSettingServiceSoap_policy_enablers Policy Enablers of Binding "ArgumentSettingServiceSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDL and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://tempuri.org/"

  - <ns1:StandardDesignAttribute> @ref _ns1__StandardDesignAttribute
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StandardDesignAttribute(struct soap*, _ns1__StandardDesignAttribute*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StandardDesignAttribute(struct soap*, _ns1__StandardDesignAttribute*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__StandardDesignAttribute(struct soap*, const char *URL, _ns1__StandardDesignAttribute*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__StandardDesignAttribute(struct soap*, const char *URL, _ns1__StandardDesignAttribute*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__StandardDesignAttribute(struct soap*, const char *URL, _ns1__StandardDesignAttribute*);
    soap_POST_recv__ns1__StandardDesignAttribute(struct soap*, _ns1__StandardDesignAttribute*);
    @endcode

  - <ns1:StandardDesignAttributeResponse> @ref _ns1__StandardDesignAttributeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StandardDesignAttributeResponse(struct soap*, _ns1__StandardDesignAttributeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StandardDesignAttributeResponse(struct soap*, _ns1__StandardDesignAttributeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__StandardDesignAttributeResponse(struct soap*, const char *URL, _ns1__StandardDesignAttributeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__StandardDesignAttributeResponse(struct soap*, const char *URL, _ns1__StandardDesignAttributeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__StandardDesignAttributeResponse(struct soap*, const char *URL, _ns1__StandardDesignAttributeResponse*);
    soap_POST_recv__ns1__StandardDesignAttributeResponse(struct soap*, _ns1__StandardDesignAttributeResponse*);
    @endcode

*/

/* End of SunacCADService2.h */
