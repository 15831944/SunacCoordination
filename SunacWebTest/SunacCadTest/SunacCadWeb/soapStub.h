/* soapStub.h
   Generated by gSOAP 2.8.84 for .\SunacCADService.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_AS	"http://tempuri.org/"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20884
# error "GSOAP VERSION 20884 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class _AS__StandardDesignAttribute;	/* .\SunacCADService.h:151 */
class _AS__StandardDesignAttributeResponse;	/* .\SunacCADService.h:153 */
struct __AS2__StandardDesignAttribute;	/* .\SunacCADService.h:381 */
struct __AS3__StandardDesignAttribute;	/* .\SunacCADService.h:470 */

/* .\SunacCADService.h:151 */
#ifndef SOAP_TYPE__AS__StandardDesignAttribute
#define SOAP_TYPE__AS__StandardDesignAttribute (8)
/* complex XML schema type 'AS:StandardDesignAttribute': */
class SOAP_CMAC _AS__StandardDesignAttribute {
      public:
        /// Optional element 'AS:AtrributeName' of XML schema type 'xsd:string'
        wchar_t *AtrributeName;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__AS__StandardDesignAttribute
        virtual long soap_type(void) const { return SOAP_TYPE__AS__StandardDesignAttribute; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _AS__StandardDesignAttribute, default initialized and not managed by a soap context
        virtual _AS__StandardDesignAttribute *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_AS__StandardDesignAttribute); }
      public:
        /// Constructor with default initializations
        _AS__StandardDesignAttribute() : AtrributeName(), soap() { }
        virtual ~_AS__StandardDesignAttribute() { }
        /// Friend allocator used by soap_new__AS__StandardDesignAttribute(struct soap*, int)
        friend SOAP_FMAC1 _AS__StandardDesignAttribute * SOAP_FMAC2 soap_instantiate__AS__StandardDesignAttribute(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService.h:153 */
#ifndef SOAP_TYPE__AS__StandardDesignAttributeResponse
#define SOAP_TYPE__AS__StandardDesignAttributeResponse (9)
/* complex XML schema type 'AS:StandardDesignAttributeResponse': */
class SOAP_CMAC _AS__StandardDesignAttributeResponse {
      public:
        /// Optional element 'AS:StandardDesignAttributeResult' of XML schema type 'xsd:string'
        wchar_t *StandardDesignAttributeResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__AS__StandardDesignAttributeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__AS__StandardDesignAttributeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _AS__StandardDesignAttributeResponse, default initialized and not managed by a soap context
        virtual _AS__StandardDesignAttributeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_AS__StandardDesignAttributeResponse); }
      public:
        /// Constructor with default initializations
        _AS__StandardDesignAttributeResponse() : StandardDesignAttributeResult(), soap() { }
        virtual ~_AS__StandardDesignAttributeResponse() { }
        /// Friend allocator used by soap_new__AS__StandardDesignAttributeResponse(struct soap*, int)
        friend SOAP_FMAC1 _AS__StandardDesignAttributeResponse * SOAP_FMAC2 soap_instantiate__AS__StandardDesignAttributeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService.h:381 */
#ifndef SOAP_TYPE___AS2__StandardDesignAttribute
#define SOAP_TYPE___AS2__StandardDesignAttribute (16)
/* Wrapper: */
struct SOAP_CMAC __AS2__StandardDesignAttribute {
      public:
        /** Optional element 'AS:StandardDesignAttribute' of XML schema type 'AS:StandardDesignAttribute' */
        _AS__StandardDesignAttribute *AS__StandardDesignAttribute;
      public:
        /** Return unique type id SOAP_TYPE___AS2__StandardDesignAttribute */
        long soap_type() const { return SOAP_TYPE___AS2__StandardDesignAttribute; }
        /** Constructor with member initializations */
        __AS2__StandardDesignAttribute() : AS__StandardDesignAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __AS2__StandardDesignAttribute * SOAP_FMAC2 soap_instantiate___AS2__StandardDesignAttribute(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService.h:470 */
#ifndef SOAP_TYPE___AS3__StandardDesignAttribute
#define SOAP_TYPE___AS3__StandardDesignAttribute (18)
/* Wrapper: */
struct SOAP_CMAC __AS3__StandardDesignAttribute {
      public:
        /** Optional element 'AS:StandardDesignAttribute' of XML schema type 'AS:StandardDesignAttribute' */
        _AS__StandardDesignAttribute *AS__StandardDesignAttribute;
      public:
        /** Return unique type id SOAP_TYPE___AS3__StandardDesignAttribute */
        long soap_type() const { return SOAP_TYPE___AS3__StandardDesignAttribute; }
        /** Constructor with member initializations */
        __AS3__StandardDesignAttribute() : AS__StandardDesignAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __AS3__StandardDesignAttribute * SOAP_FMAC2 soap_instantiate___AS3__StandardDesignAttribute(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService.h:561 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (19)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* .\SunacCADService.h:561 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (20)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* .\SunacCADService.h:561 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (22)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* .\SunacCADService.h:561 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (25)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* .\SunacCADService.h:561 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (26)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* _AS__StandardDesignAttributeResponse has binding name '_AS__StandardDesignAttributeResponse' for type '' */
#ifndef SOAP_TYPE__AS__StandardDesignAttributeResponse
#define SOAP_TYPE__AS__StandardDesignAttributeResponse (9)
#endif

/* _AS__StandardDesignAttribute has binding name '_AS__StandardDesignAttribute' for type '' */
#ifndef SOAP_TYPE__AS__StandardDesignAttribute
#define SOAP_TYPE__AS__StandardDesignAttribute (8)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (26)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (25)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (22)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (20)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (19)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (28)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (27)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (21)
#endif

/* _AS__StandardDesignAttribute * has binding name 'PointerTo_AS__StandardDesignAttribute' for type '' */
#ifndef SOAP_TYPE_PointerTo_AS__StandardDesignAttribute
#define SOAP_TYPE_PointerTo_AS__StandardDesignAttribute (13)
#endif

/* wchar_t * has binding name 'wstring' for type 'xsd:string' */
#ifndef SOAP_TYPE_wstring
#define SOAP_TYPE_wstring (11)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
