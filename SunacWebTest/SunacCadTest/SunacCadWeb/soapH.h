/* soapH.h
   Generated by gSOAP 2.8.84 for .\SunacCADService2.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__wstring_DEFINED
#define SOAP_TYPE_std__wstring_DEFINED

inline void soap_default_std__wstring(struct soap *soap, std::wstring *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap*, const std::wstring *);

#define soap_std__wstring2s(soap, a) soap_wchar2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap*, const char*, int, const std::wstring*, const char*);

#define soap_s2std__wstring(soap, s, a) soap_s2stdwchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap*, const char*, std::wstring*, const char*);
SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::wstring * soap_new_std__wstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__wstring(soap, n, NULL, NULL, NULL);
}

inline std::wstring * soap_new_req_std__wstring(
	struct soap *soap)
{
	std::wstring *_p = ::soap_new_std__wstring(soap);
	if (_p)
	{	::soap_default_std__wstring(soap, _p);
	}
	return _p;
}

inline std::wstring * soap_new_set_std__wstring(
	struct soap *soap)
{
	std::wstring *_p = ::soap_new_std__wstring(soap);
	if (_p)
	{	::soap_default_std__wstring(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap*, const std::wstring *, const char*, const char*);

inline int soap_write_std__wstring(struct soap *soap, std::wstring const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__wstring(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__wstring(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__wstring(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap*, std::wstring *, const char*, const char*);

inline int soap_read_std__wstring(struct soap *soap, std::wstring *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__wstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__wstring(struct soap *soap, const char *URL, std::wstring *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__wstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__wstring(struct soap *soap, std::wstring *p)
{
	if (::soap_read_std__wstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__CadFileDownloadResponse_DEFINED
#define SOAP_TYPE__ns1__CadFileDownloadResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CadFileDownloadResponse(struct soap*, const char*, int, const _ns1__CadFileDownloadResponse *, const char*);
SOAP_FMAC3 _ns1__CadFileDownloadResponse * SOAP_FMAC4 soap_in__ns1__CadFileDownloadResponse(struct soap*, const char*, _ns1__CadFileDownloadResponse *, const char*);
SOAP_FMAC1 _ns1__CadFileDownloadResponse * SOAP_FMAC2 soap_instantiate__ns1__CadFileDownloadResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CadFileDownloadResponse * soap_new__ns1__CadFileDownloadResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CadFileDownloadResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CadFileDownloadResponse * soap_new_req__ns1__CadFileDownloadResponse(
	struct soap *soap)
{
	_ns1__CadFileDownloadResponse *_p = ::soap_new__ns1__CadFileDownloadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CadFileDownloadResponse * soap_new_set__ns1__CadFileDownloadResponse(
	struct soap *soap,
	std::wstring *CadFileDownloadResult)
{
	_ns1__CadFileDownloadResponse *_p = ::soap_new__ns1__CadFileDownloadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CadFileDownloadResponse::CadFileDownloadResult = CadFileDownloadResult;
	}
	return _p;
}

inline int soap_write__ns1__CadFileDownloadResponse(struct soap *soap, _ns1__CadFileDownloadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CadFileDownloadResponse", p->soap_type() == SOAP_TYPE__ns1__CadFileDownloadResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CadFileDownloadResponse(struct soap *soap, const char *URL, _ns1__CadFileDownloadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CadFileDownloadResponse", p->soap_type() == SOAP_TYPE__ns1__CadFileDownloadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__CadFileDownloadResponse(struct soap *soap, const char *URL, _ns1__CadFileDownloadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CadFileDownloadResponse", p->soap_type() == SOAP_TYPE__ns1__CadFileDownloadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CadFileDownloadResponse(struct soap *soap, const char *URL, _ns1__CadFileDownloadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CadFileDownloadResponse", p->soap_type() == SOAP_TYPE__ns1__CadFileDownloadResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CadFileDownloadResponse * SOAP_FMAC4 soap_get__ns1__CadFileDownloadResponse(struct soap*, _ns1__CadFileDownloadResponse *, const char*, const char*);

inline int soap_read__ns1__CadFileDownloadResponse(struct soap *soap, _ns1__CadFileDownloadResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__CadFileDownloadResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CadFileDownloadResponse(struct soap *soap, const char *URL, _ns1__CadFileDownloadResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__CadFileDownloadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__CadFileDownloadResponse(struct soap *soap, _ns1__CadFileDownloadResponse *p)
{
	if (::soap_read__ns1__CadFileDownloadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__CadFileDownload_DEFINED
#define SOAP_TYPE__ns1__CadFileDownload_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CadFileDownload(struct soap*, const char*, int, const _ns1__CadFileDownload *, const char*);
SOAP_FMAC3 _ns1__CadFileDownload * SOAP_FMAC4 soap_in__ns1__CadFileDownload(struct soap*, const char*, _ns1__CadFileDownload *, const char*);
SOAP_FMAC1 _ns1__CadFileDownload * SOAP_FMAC2 soap_instantiate__ns1__CadFileDownload(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CadFileDownload * soap_new__ns1__CadFileDownload(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CadFileDownload(soap, n, NULL, NULL, NULL);
}

inline _ns1__CadFileDownload * soap_new_req__ns1__CadFileDownload(
	struct soap *soap,
	int Id)
{
	_ns1__CadFileDownload *_p = ::soap_new__ns1__CadFileDownload(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CadFileDownload::Id = Id;
	}
	return _p;
}

inline _ns1__CadFileDownload * soap_new_set__ns1__CadFileDownload(
	struct soap *soap,
	int Id)
{
	_ns1__CadFileDownload *_p = ::soap_new__ns1__CadFileDownload(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CadFileDownload::Id = Id;
	}
	return _p;
}

inline int soap_write__ns1__CadFileDownload(struct soap *soap, _ns1__CadFileDownload const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CadFileDownload", p->soap_type() == SOAP_TYPE__ns1__CadFileDownload ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CadFileDownload(struct soap *soap, const char *URL, _ns1__CadFileDownload const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CadFileDownload", p->soap_type() == SOAP_TYPE__ns1__CadFileDownload ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__CadFileDownload(struct soap *soap, const char *URL, _ns1__CadFileDownload const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CadFileDownload", p->soap_type() == SOAP_TYPE__ns1__CadFileDownload ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CadFileDownload(struct soap *soap, const char *URL, _ns1__CadFileDownload const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CadFileDownload", p->soap_type() == SOAP_TYPE__ns1__CadFileDownload ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CadFileDownload * SOAP_FMAC4 soap_get__ns1__CadFileDownload(struct soap*, _ns1__CadFileDownload *, const char*, const char*);

inline int soap_read__ns1__CadFileDownload(struct soap *soap, _ns1__CadFileDownload *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__CadFileDownload(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CadFileDownload(struct soap *soap, const char *URL, _ns1__CadFileDownload *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__CadFileDownload(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__CadFileDownload(struct soap *soap, _ns1__CadFileDownload *p)
{
	if (::soap_read__ns1__CadFileDownload(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__GetWindowsResponse_DEFINED
#define SOAP_TYPE__ns1__GetWindowsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetWindowsResponse(struct soap*, const char*, int, const _ns1__GetWindowsResponse *, const char*);
SOAP_FMAC3 _ns1__GetWindowsResponse * SOAP_FMAC4 soap_in__ns1__GetWindowsResponse(struct soap*, const char*, _ns1__GetWindowsResponse *, const char*);
SOAP_FMAC1 _ns1__GetWindowsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetWindowsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetWindowsResponse * soap_new__ns1__GetWindowsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetWindowsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetWindowsResponse * soap_new_req__ns1__GetWindowsResponse(
	struct soap *soap)
{
	_ns1__GetWindowsResponse *_p = ::soap_new__ns1__GetWindowsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetWindowsResponse * soap_new_set__ns1__GetWindowsResponse(
	struct soap *soap,
	std::wstring *GetWindowsResult)
{
	_ns1__GetWindowsResponse *_p = ::soap_new__ns1__GetWindowsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetWindowsResponse::GetWindowsResult = GetWindowsResult;
	}
	return _p;
}

inline int soap_write__ns1__GetWindowsResponse(struct soap *soap, _ns1__GetWindowsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWindowsResponse", p->soap_type() == SOAP_TYPE__ns1__GetWindowsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetWindowsResponse(struct soap *soap, const char *URL, _ns1__GetWindowsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWindowsResponse", p->soap_type() == SOAP_TYPE__ns1__GetWindowsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__GetWindowsResponse(struct soap *soap, const char *URL, _ns1__GetWindowsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWindowsResponse", p->soap_type() == SOAP_TYPE__ns1__GetWindowsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetWindowsResponse(struct soap *soap, const char *URL, _ns1__GetWindowsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWindowsResponse", p->soap_type() == SOAP_TYPE__ns1__GetWindowsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetWindowsResponse * SOAP_FMAC4 soap_get__ns1__GetWindowsResponse(struct soap*, _ns1__GetWindowsResponse *, const char*, const char*);

inline int soap_read__ns1__GetWindowsResponse(struct soap *soap, _ns1__GetWindowsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetWindowsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetWindowsResponse(struct soap *soap, const char *URL, _ns1__GetWindowsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetWindowsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__GetWindowsResponse(struct soap *soap, _ns1__GetWindowsResponse *p)
{
	if (::soap_read__ns1__GetWindowsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__GetWindows_DEFINED
#define SOAP_TYPE__ns1__GetWindows_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetWindows(struct soap*, const char*, int, const _ns1__GetWindows *, const char*);
SOAP_FMAC3 _ns1__GetWindows * SOAP_FMAC4 soap_in__ns1__GetWindows(struct soap*, const char*, _ns1__GetWindows *, const char*);
SOAP_FMAC1 _ns1__GetWindows * SOAP_FMAC2 soap_instantiate__ns1__GetWindows(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetWindows * soap_new__ns1__GetWindows(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetWindows(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetWindows * soap_new_req__ns1__GetWindows(
	struct soap *soap,
	double width,
	double height)
{
	_ns1__GetWindows *_p = ::soap_new__ns1__GetWindows(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetWindows::width = width;
		_p->_ns1__GetWindows::height = height;
	}
	return _p;
}

inline _ns1__GetWindows * soap_new_set__ns1__GetWindows(
	struct soap *soap,
	double width,
	double height,
	std::wstring *openType,
	std::wstring *openNum,
	std::wstring *gongNengQu)
{
	_ns1__GetWindows *_p = ::soap_new__ns1__GetWindows(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetWindows::width = width;
		_p->_ns1__GetWindows::height = height;
		_p->_ns1__GetWindows::openType = openType;
		_p->_ns1__GetWindows::openNum = openNum;
		_p->_ns1__GetWindows::gongNengQu = gongNengQu;
	}
	return _p;
}

inline int soap_write__ns1__GetWindows(struct soap *soap, _ns1__GetWindows const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWindows", p->soap_type() == SOAP_TYPE__ns1__GetWindows ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetWindows(struct soap *soap, const char *URL, _ns1__GetWindows const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWindows", p->soap_type() == SOAP_TYPE__ns1__GetWindows ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__GetWindows(struct soap *soap, const char *URL, _ns1__GetWindows const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWindows", p->soap_type() == SOAP_TYPE__ns1__GetWindows ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetWindows(struct soap *soap, const char *URL, _ns1__GetWindows const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWindows", p->soap_type() == SOAP_TYPE__ns1__GetWindows ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetWindows * SOAP_FMAC4 soap_get__ns1__GetWindows(struct soap*, _ns1__GetWindows *, const char*, const char*);

inline int soap_read__ns1__GetWindows(struct soap *soap, _ns1__GetWindows *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetWindows(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetWindows(struct soap *soap, const char *URL, _ns1__GetWindows *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetWindows(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__GetWindows(struct soap *soap, _ns1__GetWindows *p)
{
	if (::soap_read__ns1__GetWindows(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__GetAllWindowsResponse_DEFINED
#define SOAP_TYPE__ns1__GetAllWindowsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAllWindowsResponse(struct soap*, const char*, int, const _ns1__GetAllWindowsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAllWindowsResponse * SOAP_FMAC4 soap_in__ns1__GetAllWindowsResponse(struct soap*, const char*, _ns1__GetAllWindowsResponse *, const char*);
SOAP_FMAC1 _ns1__GetAllWindowsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAllWindowsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAllWindowsResponse * soap_new__ns1__GetAllWindowsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetAllWindowsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetAllWindowsResponse * soap_new_req__ns1__GetAllWindowsResponse(
	struct soap *soap)
{
	_ns1__GetAllWindowsResponse *_p = ::soap_new__ns1__GetAllWindowsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetAllWindowsResponse * soap_new_set__ns1__GetAllWindowsResponse(
	struct soap *soap,
	std::wstring *GetAllWindowsResult)
{
	_ns1__GetAllWindowsResponse *_p = ::soap_new__ns1__GetAllWindowsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAllWindowsResponse::GetAllWindowsResult = GetAllWindowsResult;
	}
	return _p;
}

inline int soap_write__ns1__GetAllWindowsResponse(struct soap *soap, _ns1__GetAllWindowsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllWindowsResponse", p->soap_type() == SOAP_TYPE__ns1__GetAllWindowsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetAllWindowsResponse(struct soap *soap, const char *URL, _ns1__GetAllWindowsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllWindowsResponse", p->soap_type() == SOAP_TYPE__ns1__GetAllWindowsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__GetAllWindowsResponse(struct soap *soap, const char *URL, _ns1__GetAllWindowsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllWindowsResponse", p->soap_type() == SOAP_TYPE__ns1__GetAllWindowsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetAllWindowsResponse(struct soap *soap, const char *URL, _ns1__GetAllWindowsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllWindowsResponse", p->soap_type() == SOAP_TYPE__ns1__GetAllWindowsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetAllWindowsResponse * SOAP_FMAC4 soap_get__ns1__GetAllWindowsResponse(struct soap*, _ns1__GetAllWindowsResponse *, const char*, const char*);

inline int soap_read__ns1__GetAllWindowsResponse(struct soap *soap, _ns1__GetAllWindowsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetAllWindowsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetAllWindowsResponse(struct soap *soap, const char *URL, _ns1__GetAllWindowsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetAllWindowsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__GetAllWindowsResponse(struct soap *soap, _ns1__GetAllWindowsResponse *p)
{
	if (::soap_read__ns1__GetAllWindowsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__GetAllWindows_DEFINED
#define SOAP_TYPE__ns1__GetAllWindows_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAllWindows(struct soap*, const char*, int, const _ns1__GetAllWindows *, const char*);
SOAP_FMAC3 _ns1__GetAllWindows * SOAP_FMAC4 soap_in__ns1__GetAllWindows(struct soap*, const char*, _ns1__GetAllWindows *, const char*);
SOAP_FMAC1 _ns1__GetAllWindows * SOAP_FMAC2 soap_instantiate__ns1__GetAllWindows(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAllWindows * soap_new__ns1__GetAllWindows(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetAllWindows(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetAllWindows * soap_new_req__ns1__GetAllWindows(
	struct soap *soap)
{
	_ns1__GetAllWindows *_p = ::soap_new__ns1__GetAllWindows(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetAllWindows * soap_new_set__ns1__GetAllWindows(
	struct soap *soap)
{
	_ns1__GetAllWindows *_p = ::soap_new__ns1__GetAllWindows(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetAllWindows(struct soap *soap, _ns1__GetAllWindows const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllWindows", p->soap_type() == SOAP_TYPE__ns1__GetAllWindows ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetAllWindows(struct soap *soap, const char *URL, _ns1__GetAllWindows const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllWindows", p->soap_type() == SOAP_TYPE__ns1__GetAllWindows ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__GetAllWindows(struct soap *soap, const char *URL, _ns1__GetAllWindows const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllWindows", p->soap_type() == SOAP_TYPE__ns1__GetAllWindows ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetAllWindows(struct soap *soap, const char *URL, _ns1__GetAllWindows const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllWindows", p->soap_type() == SOAP_TYPE__ns1__GetAllWindows ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetAllWindows * SOAP_FMAC4 soap_get__ns1__GetAllWindows(struct soap*, _ns1__GetAllWindows *, const char*, const char*);

inline int soap_read__ns1__GetAllWindows(struct soap *soap, _ns1__GetAllWindows *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetAllWindows(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetAllWindows(struct soap *soap, const char *URL, _ns1__GetAllWindows *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetAllWindows(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__GetAllWindows(struct soap *soap, _ns1__GetAllWindows *p)
{
	if (::soap_read__ns1__GetAllWindows(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__StandardDesignAttributeResponse_DEFINED
#define SOAP_TYPE__ns1__StandardDesignAttributeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StandardDesignAttributeResponse(struct soap*, const char*, int, const _ns1__StandardDesignAttributeResponse *, const char*);
SOAP_FMAC3 _ns1__StandardDesignAttributeResponse * SOAP_FMAC4 soap_in__ns1__StandardDesignAttributeResponse(struct soap*, const char*, _ns1__StandardDesignAttributeResponse *, const char*);
SOAP_FMAC1 _ns1__StandardDesignAttributeResponse * SOAP_FMAC2 soap_instantiate__ns1__StandardDesignAttributeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StandardDesignAttributeResponse * soap_new__ns1__StandardDesignAttributeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__StandardDesignAttributeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__StandardDesignAttributeResponse * soap_new_req__ns1__StandardDesignAttributeResponse(
	struct soap *soap)
{
	_ns1__StandardDesignAttributeResponse *_p = ::soap_new__ns1__StandardDesignAttributeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__StandardDesignAttributeResponse * soap_new_set__ns1__StandardDesignAttributeResponse(
	struct soap *soap,
	std::wstring *StandardDesignAttributeResult)
{
	_ns1__StandardDesignAttributeResponse *_p = ::soap_new__ns1__StandardDesignAttributeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StandardDesignAttributeResponse::StandardDesignAttributeResult = StandardDesignAttributeResult;
	}
	return _p;
}

inline int soap_write__ns1__StandardDesignAttributeResponse(struct soap *soap, _ns1__StandardDesignAttributeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StandardDesignAttributeResponse", p->soap_type() == SOAP_TYPE__ns1__StandardDesignAttributeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__StandardDesignAttributeResponse(struct soap *soap, const char *URL, _ns1__StandardDesignAttributeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StandardDesignAttributeResponse", p->soap_type() == SOAP_TYPE__ns1__StandardDesignAttributeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__StandardDesignAttributeResponse(struct soap *soap, const char *URL, _ns1__StandardDesignAttributeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StandardDesignAttributeResponse", p->soap_type() == SOAP_TYPE__ns1__StandardDesignAttributeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__StandardDesignAttributeResponse(struct soap *soap, const char *URL, _ns1__StandardDesignAttributeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StandardDesignAttributeResponse", p->soap_type() == SOAP_TYPE__ns1__StandardDesignAttributeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__StandardDesignAttributeResponse * SOAP_FMAC4 soap_get__ns1__StandardDesignAttributeResponse(struct soap*, _ns1__StandardDesignAttributeResponse *, const char*, const char*);

inline int soap_read__ns1__StandardDesignAttributeResponse(struct soap *soap, _ns1__StandardDesignAttributeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__StandardDesignAttributeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__StandardDesignAttributeResponse(struct soap *soap, const char *URL, _ns1__StandardDesignAttributeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__StandardDesignAttributeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__StandardDesignAttributeResponse(struct soap *soap, _ns1__StandardDesignAttributeResponse *p)
{
	if (::soap_read__ns1__StandardDesignAttributeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__StandardDesignAttribute_DEFINED
#define SOAP_TYPE__ns1__StandardDesignAttribute_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StandardDesignAttribute(struct soap*, const char*, int, const _ns1__StandardDesignAttribute *, const char*);
SOAP_FMAC3 _ns1__StandardDesignAttribute * SOAP_FMAC4 soap_in__ns1__StandardDesignAttribute(struct soap*, const char*, _ns1__StandardDesignAttribute *, const char*);
SOAP_FMAC1 _ns1__StandardDesignAttribute * SOAP_FMAC2 soap_instantiate__ns1__StandardDesignAttribute(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StandardDesignAttribute * soap_new__ns1__StandardDesignAttribute(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__StandardDesignAttribute(soap, n, NULL, NULL, NULL);
}

inline _ns1__StandardDesignAttribute * soap_new_req__ns1__StandardDesignAttribute(
	struct soap *soap)
{
	_ns1__StandardDesignAttribute *_p = ::soap_new__ns1__StandardDesignAttribute(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__StandardDesignAttribute * soap_new_set__ns1__StandardDesignAttribute(
	struct soap *soap,
	std::wstring *AtrributeName)
{
	_ns1__StandardDesignAttribute *_p = ::soap_new__ns1__StandardDesignAttribute(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StandardDesignAttribute::AtrributeName = AtrributeName;
	}
	return _p;
}

inline int soap_write__ns1__StandardDesignAttribute(struct soap *soap, _ns1__StandardDesignAttribute const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StandardDesignAttribute", p->soap_type() == SOAP_TYPE__ns1__StandardDesignAttribute ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__StandardDesignAttribute(struct soap *soap, const char *URL, _ns1__StandardDesignAttribute const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StandardDesignAttribute", p->soap_type() == SOAP_TYPE__ns1__StandardDesignAttribute ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__StandardDesignAttribute(struct soap *soap, const char *URL, _ns1__StandardDesignAttribute const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StandardDesignAttribute", p->soap_type() == SOAP_TYPE__ns1__StandardDesignAttribute ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__StandardDesignAttribute(struct soap *soap, const char *URL, _ns1__StandardDesignAttribute const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StandardDesignAttribute", p->soap_type() == SOAP_TYPE__ns1__StandardDesignAttribute ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__StandardDesignAttribute * SOAP_FMAC4 soap_get__ns1__StandardDesignAttribute(struct soap*, _ns1__StandardDesignAttribute *, const char*, const char*);

inline int soap_read__ns1__StandardDesignAttribute(struct soap *soap, _ns1__StandardDesignAttribute *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__StandardDesignAttribute(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__StandardDesignAttribute(struct soap *soap, const char *URL, _ns1__StandardDesignAttribute *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__StandardDesignAttribute(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__StandardDesignAttribute(struct soap *soap, _ns1__StandardDesignAttribute *p)
{
	if (::soap_read__ns1__StandardDesignAttribute(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__CadFileDownload__DEFINED
#define SOAP_TYPE___ns1__CadFileDownload__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CadFileDownload_(struct soap*, struct __ns1__CadFileDownload_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CadFileDownload_(struct soap*, const struct __ns1__CadFileDownload_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CadFileDownload_(struct soap*, const char*, int, const struct __ns1__CadFileDownload_ *, const char*);
SOAP_FMAC3 struct __ns1__CadFileDownload_ * SOAP_FMAC4 soap_in___ns1__CadFileDownload_(struct soap*, const char*, struct __ns1__CadFileDownload_ *, const char*);
SOAP_FMAC1 struct __ns1__CadFileDownload_ * SOAP_FMAC2 soap_instantiate___ns1__CadFileDownload_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CadFileDownload_ * soap_new___ns1__CadFileDownload_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CadFileDownload_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CadFileDownload_ * soap_new_req___ns1__CadFileDownload_(
	struct soap *soap)
{
	struct __ns1__CadFileDownload_ *_p = ::soap_new___ns1__CadFileDownload_(soap);
	if (_p)
	{	::soap_default___ns1__CadFileDownload_(soap, _p);
	}
	return _p;
}

inline struct __ns1__CadFileDownload_ * soap_new_set___ns1__CadFileDownload_(
	struct soap *soap,
	_ns1__CadFileDownload *ns1__CadFileDownload)
{
	struct __ns1__CadFileDownload_ *_p = ::soap_new___ns1__CadFileDownload_(soap);
	if (_p)
	{	::soap_default___ns1__CadFileDownload_(soap, _p);
		_p->ns1__CadFileDownload = ns1__CadFileDownload;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CadFileDownload_(struct soap*, const struct __ns1__CadFileDownload_ *, const char*, const char*);

inline int soap_write___ns1__CadFileDownload_(struct soap *soap, struct __ns1__CadFileDownload_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__CadFileDownload_(soap, p), 0) || ::soap_put___ns1__CadFileDownload_(soap, p, "-ns1:CadFileDownload", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CadFileDownload_(struct soap *soap, const char *URL, struct __ns1__CadFileDownload_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__CadFileDownload_(soap, p), 0) || ::soap_put___ns1__CadFileDownload_(soap, p, "-ns1:CadFileDownload", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__CadFileDownload_(struct soap *soap, const char *URL, struct __ns1__CadFileDownload_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__CadFileDownload_(soap, p), 0) || ::soap_put___ns1__CadFileDownload_(soap, p, "-ns1:CadFileDownload", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CadFileDownload_(struct soap *soap, const char *URL, struct __ns1__CadFileDownload_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__CadFileDownload_(soap, p), 0) || ::soap_put___ns1__CadFileDownload_(soap, p, "-ns1:CadFileDownload", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CadFileDownload_ * SOAP_FMAC4 soap_get___ns1__CadFileDownload_(struct soap*, struct __ns1__CadFileDownload_ *, const char*, const char*);

inline int soap_read___ns1__CadFileDownload_(struct soap *soap, struct __ns1__CadFileDownload_ *p)
{
	if (p)
	{	::soap_default___ns1__CadFileDownload_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__CadFileDownload_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CadFileDownload_(struct soap *soap, const char *URL, struct __ns1__CadFileDownload_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__CadFileDownload_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__CadFileDownload_(struct soap *soap, struct __ns1__CadFileDownload_ *p)
{
	if (::soap_read___ns1__CadFileDownload_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__GetWindows__DEFINED
#define SOAP_TYPE___ns1__GetWindows__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetWindows_(struct soap*, struct __ns1__GetWindows_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetWindows_(struct soap*, const struct __ns1__GetWindows_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetWindows_(struct soap*, const char*, int, const struct __ns1__GetWindows_ *, const char*);
SOAP_FMAC3 struct __ns1__GetWindows_ * SOAP_FMAC4 soap_in___ns1__GetWindows_(struct soap*, const char*, struct __ns1__GetWindows_ *, const char*);
SOAP_FMAC1 struct __ns1__GetWindows_ * SOAP_FMAC2 soap_instantiate___ns1__GetWindows_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetWindows_ * soap_new___ns1__GetWindows_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetWindows_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetWindows_ * soap_new_req___ns1__GetWindows_(
	struct soap *soap)
{
	struct __ns1__GetWindows_ *_p = ::soap_new___ns1__GetWindows_(soap);
	if (_p)
	{	::soap_default___ns1__GetWindows_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetWindows_ * soap_new_set___ns1__GetWindows_(
	struct soap *soap,
	_ns1__GetWindows *ns1__GetWindows)
{
	struct __ns1__GetWindows_ *_p = ::soap_new___ns1__GetWindows_(soap);
	if (_p)
	{	::soap_default___ns1__GetWindows_(soap, _p);
		_p->ns1__GetWindows = ns1__GetWindows;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetWindows_(struct soap*, const struct __ns1__GetWindows_ *, const char*, const char*);

inline int soap_write___ns1__GetWindows_(struct soap *soap, struct __ns1__GetWindows_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetWindows_(soap, p), 0) || ::soap_put___ns1__GetWindows_(soap, p, "-ns1:GetWindows", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetWindows_(struct soap *soap, const char *URL, struct __ns1__GetWindows_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetWindows_(soap, p), 0) || ::soap_put___ns1__GetWindows_(soap, p, "-ns1:GetWindows", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__GetWindows_(struct soap *soap, const char *URL, struct __ns1__GetWindows_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetWindows_(soap, p), 0) || ::soap_put___ns1__GetWindows_(soap, p, "-ns1:GetWindows", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetWindows_(struct soap *soap, const char *URL, struct __ns1__GetWindows_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetWindows_(soap, p), 0) || ::soap_put___ns1__GetWindows_(soap, p, "-ns1:GetWindows", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetWindows_ * SOAP_FMAC4 soap_get___ns1__GetWindows_(struct soap*, struct __ns1__GetWindows_ *, const char*, const char*);

inline int soap_read___ns1__GetWindows_(struct soap *soap, struct __ns1__GetWindows_ *p)
{
	if (p)
	{	::soap_default___ns1__GetWindows_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetWindows_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetWindows_(struct soap *soap, const char *URL, struct __ns1__GetWindows_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetWindows_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__GetWindows_(struct soap *soap, struct __ns1__GetWindows_ *p)
{
	if (::soap_read___ns1__GetWindows_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__GetAllWindows__DEFINED
#define SOAP_TYPE___ns1__GetAllWindows__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAllWindows_(struct soap*, struct __ns1__GetAllWindows_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAllWindows_(struct soap*, const struct __ns1__GetAllWindows_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAllWindows_(struct soap*, const char*, int, const struct __ns1__GetAllWindows_ *, const char*);
SOAP_FMAC3 struct __ns1__GetAllWindows_ * SOAP_FMAC4 soap_in___ns1__GetAllWindows_(struct soap*, const char*, struct __ns1__GetAllWindows_ *, const char*);
SOAP_FMAC1 struct __ns1__GetAllWindows_ * SOAP_FMAC2 soap_instantiate___ns1__GetAllWindows_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAllWindows_ * soap_new___ns1__GetAllWindows_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetAllWindows_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetAllWindows_ * soap_new_req___ns1__GetAllWindows_(
	struct soap *soap)
{
	struct __ns1__GetAllWindows_ *_p = ::soap_new___ns1__GetAllWindows_(soap);
	if (_p)
	{	::soap_default___ns1__GetAllWindows_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetAllWindows_ * soap_new_set___ns1__GetAllWindows_(
	struct soap *soap,
	_ns1__GetAllWindows *ns1__GetAllWindows)
{
	struct __ns1__GetAllWindows_ *_p = ::soap_new___ns1__GetAllWindows_(soap);
	if (_p)
	{	::soap_default___ns1__GetAllWindows_(soap, _p);
		_p->ns1__GetAllWindows = ns1__GetAllWindows;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAllWindows_(struct soap*, const struct __ns1__GetAllWindows_ *, const char*, const char*);

inline int soap_write___ns1__GetAllWindows_(struct soap *soap, struct __ns1__GetAllWindows_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetAllWindows_(soap, p), 0) || ::soap_put___ns1__GetAllWindows_(soap, p, "-ns1:GetAllWindows", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetAllWindows_(struct soap *soap, const char *URL, struct __ns1__GetAllWindows_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetAllWindows_(soap, p), 0) || ::soap_put___ns1__GetAllWindows_(soap, p, "-ns1:GetAllWindows", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__GetAllWindows_(struct soap *soap, const char *URL, struct __ns1__GetAllWindows_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetAllWindows_(soap, p), 0) || ::soap_put___ns1__GetAllWindows_(soap, p, "-ns1:GetAllWindows", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetAllWindows_(struct soap *soap, const char *URL, struct __ns1__GetAllWindows_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetAllWindows_(soap, p), 0) || ::soap_put___ns1__GetAllWindows_(soap, p, "-ns1:GetAllWindows", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetAllWindows_ * SOAP_FMAC4 soap_get___ns1__GetAllWindows_(struct soap*, struct __ns1__GetAllWindows_ *, const char*, const char*);

inline int soap_read___ns1__GetAllWindows_(struct soap *soap, struct __ns1__GetAllWindows_ *p)
{
	if (p)
	{	::soap_default___ns1__GetAllWindows_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetAllWindows_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetAllWindows_(struct soap *soap, const char *URL, struct __ns1__GetAllWindows_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetAllWindows_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__GetAllWindows_(struct soap *soap, struct __ns1__GetAllWindows_ *p)
{
	if (::soap_read___ns1__GetAllWindows_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__StandardDesignAttribute__DEFINED
#define SOAP_TYPE___ns1__StandardDesignAttribute__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__StandardDesignAttribute_(struct soap*, struct __ns1__StandardDesignAttribute_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__StandardDesignAttribute_(struct soap*, const struct __ns1__StandardDesignAttribute_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__StandardDesignAttribute_(struct soap*, const char*, int, const struct __ns1__StandardDesignAttribute_ *, const char*);
SOAP_FMAC3 struct __ns1__StandardDesignAttribute_ * SOAP_FMAC4 soap_in___ns1__StandardDesignAttribute_(struct soap*, const char*, struct __ns1__StandardDesignAttribute_ *, const char*);
SOAP_FMAC1 struct __ns1__StandardDesignAttribute_ * SOAP_FMAC2 soap_instantiate___ns1__StandardDesignAttribute_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__StandardDesignAttribute_ * soap_new___ns1__StandardDesignAttribute_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__StandardDesignAttribute_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__StandardDesignAttribute_ * soap_new_req___ns1__StandardDesignAttribute_(
	struct soap *soap)
{
	struct __ns1__StandardDesignAttribute_ *_p = ::soap_new___ns1__StandardDesignAttribute_(soap);
	if (_p)
	{	::soap_default___ns1__StandardDesignAttribute_(soap, _p);
	}
	return _p;
}

inline struct __ns1__StandardDesignAttribute_ * soap_new_set___ns1__StandardDesignAttribute_(
	struct soap *soap,
	_ns1__StandardDesignAttribute *ns1__StandardDesignAttribute)
{
	struct __ns1__StandardDesignAttribute_ *_p = ::soap_new___ns1__StandardDesignAttribute_(soap);
	if (_p)
	{	::soap_default___ns1__StandardDesignAttribute_(soap, _p);
		_p->ns1__StandardDesignAttribute = ns1__StandardDesignAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__StandardDesignAttribute_(struct soap*, const struct __ns1__StandardDesignAttribute_ *, const char*, const char*);

inline int soap_write___ns1__StandardDesignAttribute_(struct soap *soap, struct __ns1__StandardDesignAttribute_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__StandardDesignAttribute_(soap, p), 0) || ::soap_put___ns1__StandardDesignAttribute_(soap, p, "-ns1:StandardDesignAttribute", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__StandardDesignAttribute_(struct soap *soap, const char *URL, struct __ns1__StandardDesignAttribute_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__StandardDesignAttribute_(soap, p), 0) || ::soap_put___ns1__StandardDesignAttribute_(soap, p, "-ns1:StandardDesignAttribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__StandardDesignAttribute_(struct soap *soap, const char *URL, struct __ns1__StandardDesignAttribute_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__StandardDesignAttribute_(soap, p), 0) || ::soap_put___ns1__StandardDesignAttribute_(soap, p, "-ns1:StandardDesignAttribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__StandardDesignAttribute_(struct soap *soap, const char *URL, struct __ns1__StandardDesignAttribute_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__StandardDesignAttribute_(soap, p), 0) || ::soap_put___ns1__StandardDesignAttribute_(soap, p, "-ns1:StandardDesignAttribute", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__StandardDesignAttribute_ * SOAP_FMAC4 soap_get___ns1__StandardDesignAttribute_(struct soap*, struct __ns1__StandardDesignAttribute_ *, const char*, const char*);

inline int soap_read___ns1__StandardDesignAttribute_(struct soap *soap, struct __ns1__StandardDesignAttribute_ *p)
{
	if (p)
	{	::soap_default___ns1__StandardDesignAttribute_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__StandardDesignAttribute_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__StandardDesignAttribute_(struct soap *soap, const char *URL, struct __ns1__StandardDesignAttribute_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__StandardDesignAttribute_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__StandardDesignAttribute_(struct soap *soap, struct __ns1__StandardDesignAttribute_ *p)
{
	if (::soap_read___ns1__StandardDesignAttribute_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__CadFileDownload_DEFINED
#define SOAP_TYPE___ns1__CadFileDownload_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CadFileDownload(struct soap*, struct __ns1__CadFileDownload *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CadFileDownload(struct soap*, const struct __ns1__CadFileDownload *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CadFileDownload(struct soap*, const char*, int, const struct __ns1__CadFileDownload *, const char*);
SOAP_FMAC3 struct __ns1__CadFileDownload * SOAP_FMAC4 soap_in___ns1__CadFileDownload(struct soap*, const char*, struct __ns1__CadFileDownload *, const char*);
SOAP_FMAC1 struct __ns1__CadFileDownload * SOAP_FMAC2 soap_instantiate___ns1__CadFileDownload(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CadFileDownload * soap_new___ns1__CadFileDownload(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CadFileDownload(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CadFileDownload * soap_new_req___ns1__CadFileDownload(
	struct soap *soap)
{
	struct __ns1__CadFileDownload *_p = ::soap_new___ns1__CadFileDownload(soap);
	if (_p)
	{	::soap_default___ns1__CadFileDownload(soap, _p);
	}
	return _p;
}

inline struct __ns1__CadFileDownload * soap_new_set___ns1__CadFileDownload(
	struct soap *soap,
	_ns1__CadFileDownload *ns1__CadFileDownload)
{
	struct __ns1__CadFileDownload *_p = ::soap_new___ns1__CadFileDownload(soap);
	if (_p)
	{	::soap_default___ns1__CadFileDownload(soap, _p);
		_p->ns1__CadFileDownload = ns1__CadFileDownload;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CadFileDownload(struct soap*, const struct __ns1__CadFileDownload *, const char*, const char*);

inline int soap_write___ns1__CadFileDownload(struct soap *soap, struct __ns1__CadFileDownload const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__CadFileDownload(soap, p), 0) || ::soap_put___ns1__CadFileDownload(soap, p, "-ns1:CadFileDownload", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CadFileDownload(struct soap *soap, const char *URL, struct __ns1__CadFileDownload const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__CadFileDownload(soap, p), 0) || ::soap_put___ns1__CadFileDownload(soap, p, "-ns1:CadFileDownload", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__CadFileDownload(struct soap *soap, const char *URL, struct __ns1__CadFileDownload const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__CadFileDownload(soap, p), 0) || ::soap_put___ns1__CadFileDownload(soap, p, "-ns1:CadFileDownload", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CadFileDownload(struct soap *soap, const char *URL, struct __ns1__CadFileDownload const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__CadFileDownload(soap, p), 0) || ::soap_put___ns1__CadFileDownload(soap, p, "-ns1:CadFileDownload", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CadFileDownload * SOAP_FMAC4 soap_get___ns1__CadFileDownload(struct soap*, struct __ns1__CadFileDownload *, const char*, const char*);

inline int soap_read___ns1__CadFileDownload(struct soap *soap, struct __ns1__CadFileDownload *p)
{
	if (p)
	{	::soap_default___ns1__CadFileDownload(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__CadFileDownload(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CadFileDownload(struct soap *soap, const char *URL, struct __ns1__CadFileDownload *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__CadFileDownload(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__CadFileDownload(struct soap *soap, struct __ns1__CadFileDownload *p)
{
	if (::soap_read___ns1__CadFileDownload(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__GetWindows_DEFINED
#define SOAP_TYPE___ns1__GetWindows_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetWindows(struct soap*, struct __ns1__GetWindows *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetWindows(struct soap*, const struct __ns1__GetWindows *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetWindows(struct soap*, const char*, int, const struct __ns1__GetWindows *, const char*);
SOAP_FMAC3 struct __ns1__GetWindows * SOAP_FMAC4 soap_in___ns1__GetWindows(struct soap*, const char*, struct __ns1__GetWindows *, const char*);
SOAP_FMAC1 struct __ns1__GetWindows * SOAP_FMAC2 soap_instantiate___ns1__GetWindows(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetWindows * soap_new___ns1__GetWindows(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetWindows(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetWindows * soap_new_req___ns1__GetWindows(
	struct soap *soap)
{
	struct __ns1__GetWindows *_p = ::soap_new___ns1__GetWindows(soap);
	if (_p)
	{	::soap_default___ns1__GetWindows(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetWindows * soap_new_set___ns1__GetWindows(
	struct soap *soap,
	_ns1__GetWindows *ns1__GetWindows)
{
	struct __ns1__GetWindows *_p = ::soap_new___ns1__GetWindows(soap);
	if (_p)
	{	::soap_default___ns1__GetWindows(soap, _p);
		_p->ns1__GetWindows = ns1__GetWindows;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetWindows(struct soap*, const struct __ns1__GetWindows *, const char*, const char*);

inline int soap_write___ns1__GetWindows(struct soap *soap, struct __ns1__GetWindows const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetWindows(soap, p), 0) || ::soap_put___ns1__GetWindows(soap, p, "-ns1:GetWindows", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetWindows(struct soap *soap, const char *URL, struct __ns1__GetWindows const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetWindows(soap, p), 0) || ::soap_put___ns1__GetWindows(soap, p, "-ns1:GetWindows", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__GetWindows(struct soap *soap, const char *URL, struct __ns1__GetWindows const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetWindows(soap, p), 0) || ::soap_put___ns1__GetWindows(soap, p, "-ns1:GetWindows", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetWindows(struct soap *soap, const char *URL, struct __ns1__GetWindows const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetWindows(soap, p), 0) || ::soap_put___ns1__GetWindows(soap, p, "-ns1:GetWindows", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetWindows * SOAP_FMAC4 soap_get___ns1__GetWindows(struct soap*, struct __ns1__GetWindows *, const char*, const char*);

inline int soap_read___ns1__GetWindows(struct soap *soap, struct __ns1__GetWindows *p)
{
	if (p)
	{	::soap_default___ns1__GetWindows(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetWindows(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetWindows(struct soap *soap, const char *URL, struct __ns1__GetWindows *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetWindows(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__GetWindows(struct soap *soap, struct __ns1__GetWindows *p)
{
	if (::soap_read___ns1__GetWindows(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__GetAllWindows_DEFINED
#define SOAP_TYPE___ns1__GetAllWindows_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAllWindows(struct soap*, struct __ns1__GetAllWindows *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAllWindows(struct soap*, const struct __ns1__GetAllWindows *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAllWindows(struct soap*, const char*, int, const struct __ns1__GetAllWindows *, const char*);
SOAP_FMAC3 struct __ns1__GetAllWindows * SOAP_FMAC4 soap_in___ns1__GetAllWindows(struct soap*, const char*, struct __ns1__GetAllWindows *, const char*);
SOAP_FMAC1 struct __ns1__GetAllWindows * SOAP_FMAC2 soap_instantiate___ns1__GetAllWindows(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAllWindows * soap_new___ns1__GetAllWindows(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetAllWindows(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetAllWindows * soap_new_req___ns1__GetAllWindows(
	struct soap *soap)
{
	struct __ns1__GetAllWindows *_p = ::soap_new___ns1__GetAllWindows(soap);
	if (_p)
	{	::soap_default___ns1__GetAllWindows(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetAllWindows * soap_new_set___ns1__GetAllWindows(
	struct soap *soap,
	_ns1__GetAllWindows *ns1__GetAllWindows)
{
	struct __ns1__GetAllWindows *_p = ::soap_new___ns1__GetAllWindows(soap);
	if (_p)
	{	::soap_default___ns1__GetAllWindows(soap, _p);
		_p->ns1__GetAllWindows = ns1__GetAllWindows;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAllWindows(struct soap*, const struct __ns1__GetAllWindows *, const char*, const char*);

inline int soap_write___ns1__GetAllWindows(struct soap *soap, struct __ns1__GetAllWindows const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetAllWindows(soap, p), 0) || ::soap_put___ns1__GetAllWindows(soap, p, "-ns1:GetAllWindows", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetAllWindows(struct soap *soap, const char *URL, struct __ns1__GetAllWindows const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetAllWindows(soap, p), 0) || ::soap_put___ns1__GetAllWindows(soap, p, "-ns1:GetAllWindows", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__GetAllWindows(struct soap *soap, const char *URL, struct __ns1__GetAllWindows const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetAllWindows(soap, p), 0) || ::soap_put___ns1__GetAllWindows(soap, p, "-ns1:GetAllWindows", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetAllWindows(struct soap *soap, const char *URL, struct __ns1__GetAllWindows const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetAllWindows(soap, p), 0) || ::soap_put___ns1__GetAllWindows(soap, p, "-ns1:GetAllWindows", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetAllWindows * SOAP_FMAC4 soap_get___ns1__GetAllWindows(struct soap*, struct __ns1__GetAllWindows *, const char*, const char*);

inline int soap_read___ns1__GetAllWindows(struct soap *soap, struct __ns1__GetAllWindows *p)
{
	if (p)
	{	::soap_default___ns1__GetAllWindows(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetAllWindows(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetAllWindows(struct soap *soap, const char *URL, struct __ns1__GetAllWindows *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetAllWindows(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__GetAllWindows(struct soap *soap, struct __ns1__GetAllWindows *p)
{
	if (::soap_read___ns1__GetAllWindows(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__StandardDesignAttribute_DEFINED
#define SOAP_TYPE___ns1__StandardDesignAttribute_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__StandardDesignAttribute(struct soap*, struct __ns1__StandardDesignAttribute *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__StandardDesignAttribute(struct soap*, const struct __ns1__StandardDesignAttribute *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__StandardDesignAttribute(struct soap*, const char*, int, const struct __ns1__StandardDesignAttribute *, const char*);
SOAP_FMAC3 struct __ns1__StandardDesignAttribute * SOAP_FMAC4 soap_in___ns1__StandardDesignAttribute(struct soap*, const char*, struct __ns1__StandardDesignAttribute *, const char*);
SOAP_FMAC1 struct __ns1__StandardDesignAttribute * SOAP_FMAC2 soap_instantiate___ns1__StandardDesignAttribute(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__StandardDesignAttribute * soap_new___ns1__StandardDesignAttribute(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__StandardDesignAttribute(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__StandardDesignAttribute * soap_new_req___ns1__StandardDesignAttribute(
	struct soap *soap)
{
	struct __ns1__StandardDesignAttribute *_p = ::soap_new___ns1__StandardDesignAttribute(soap);
	if (_p)
	{	::soap_default___ns1__StandardDesignAttribute(soap, _p);
	}
	return _p;
}

inline struct __ns1__StandardDesignAttribute * soap_new_set___ns1__StandardDesignAttribute(
	struct soap *soap,
	_ns1__StandardDesignAttribute *ns1__StandardDesignAttribute)
{
	struct __ns1__StandardDesignAttribute *_p = ::soap_new___ns1__StandardDesignAttribute(soap);
	if (_p)
	{	::soap_default___ns1__StandardDesignAttribute(soap, _p);
		_p->ns1__StandardDesignAttribute = ns1__StandardDesignAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__StandardDesignAttribute(struct soap*, const struct __ns1__StandardDesignAttribute *, const char*, const char*);

inline int soap_write___ns1__StandardDesignAttribute(struct soap *soap, struct __ns1__StandardDesignAttribute const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__StandardDesignAttribute(soap, p), 0) || ::soap_put___ns1__StandardDesignAttribute(soap, p, "-ns1:StandardDesignAttribute", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__StandardDesignAttribute(struct soap *soap, const char *URL, struct __ns1__StandardDesignAttribute const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__StandardDesignAttribute(soap, p), 0) || ::soap_put___ns1__StandardDesignAttribute(soap, p, "-ns1:StandardDesignAttribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__StandardDesignAttribute(struct soap *soap, const char *URL, struct __ns1__StandardDesignAttribute const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__StandardDesignAttribute(soap, p), 0) || ::soap_put___ns1__StandardDesignAttribute(soap, p, "-ns1:StandardDesignAttribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__StandardDesignAttribute(struct soap *soap, const char *URL, struct __ns1__StandardDesignAttribute const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__StandardDesignAttribute(soap, p), 0) || ::soap_put___ns1__StandardDesignAttribute(soap, p, "-ns1:StandardDesignAttribute", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__StandardDesignAttribute * SOAP_FMAC4 soap_get___ns1__StandardDesignAttribute(struct soap*, struct __ns1__StandardDesignAttribute *, const char*, const char*);

inline int soap_read___ns1__StandardDesignAttribute(struct soap *soap, struct __ns1__StandardDesignAttribute *p)
{
	if (p)
	{	::soap_default___ns1__StandardDesignAttribute(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__StandardDesignAttribute(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__StandardDesignAttribute(struct soap *soap, const char *URL, struct __ns1__StandardDesignAttribute *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__StandardDesignAttribute(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__StandardDesignAttribute(struct soap *soap, struct __ns1__StandardDesignAttribute *p)
{
	if (::soap_read___ns1__StandardDesignAttribute(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CadFileDownload_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CadFileDownload_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CadFileDownload(struct soap*, _ns1__CadFileDownload *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CadFileDownload(struct soap*, const char *, int, _ns1__CadFileDownload *const*, const char *);
SOAP_FMAC3 _ns1__CadFileDownload ** SOAP_FMAC4 soap_in_PointerTo_ns1__CadFileDownload(struct soap*, const char*, _ns1__CadFileDownload **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CadFileDownload(struct soap*, _ns1__CadFileDownload *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CadFileDownload ** SOAP_FMAC4 soap_get_PointerTo_ns1__CadFileDownload(struct soap*, _ns1__CadFileDownload **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetWindows_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetWindows_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetWindows(struct soap*, _ns1__GetWindows *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetWindows(struct soap*, const char *, int, _ns1__GetWindows *const*, const char *);
SOAP_FMAC3 _ns1__GetWindows ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetWindows(struct soap*, const char*, _ns1__GetWindows **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetWindows(struct soap*, _ns1__GetWindows *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetWindows ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetWindows(struct soap*, _ns1__GetWindows **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetAllWindows_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetAllWindows_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAllWindows(struct soap*, _ns1__GetAllWindows *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAllWindows(struct soap*, const char *, int, _ns1__GetAllWindows *const*, const char *);
SOAP_FMAC3 _ns1__GetAllWindows ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAllWindows(struct soap*, const char*, _ns1__GetAllWindows **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAllWindows(struct soap*, _ns1__GetAllWindows *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetAllWindows ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAllWindows(struct soap*, _ns1__GetAllWindows **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__StandardDesignAttribute_DEFINED
#define SOAP_TYPE_PointerTo_ns1__StandardDesignAttribute_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__StandardDesignAttribute(struct soap*, _ns1__StandardDesignAttribute *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__StandardDesignAttribute(struct soap*, const char *, int, _ns1__StandardDesignAttribute *const*, const char *);
SOAP_FMAC3 _ns1__StandardDesignAttribute ** SOAP_FMAC4 soap_in_PointerTo_ns1__StandardDesignAttribute(struct soap*, const char*, _ns1__StandardDesignAttribute **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__StandardDesignAttribute(struct soap*, _ns1__StandardDesignAttribute *const*, const char*, const char*);
SOAP_FMAC3 _ns1__StandardDesignAttribute ** SOAP_FMAC4 soap_get_PointerTo_ns1__StandardDesignAttribute(struct soap*, _ns1__StandardDesignAttribute **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__wstring_DEFINED
#define SOAP_TYPE_PointerTostd__wstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__wstring(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__wstring(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTostd__wstring(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__wstring(struct soap*, std::wstring *const*, const char*, const char*);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTostd__wstring(struct soap*, std::wstring **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

/* End of soapH.h */
