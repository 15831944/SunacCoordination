/* soapArgumentSettingServiceSoapProxy.cpp
   Generated by gSOAP 2.8.84 for .\SunacCADService2.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "StdAfx.h"
#include "soapArgumentSettingServiceSoapProxy.h"
#include "..\..\GlobalSetting.h"

ArgumentSettingServiceSoapProxy::ArgumentSettingServiceSoapProxy() : soap(SOAP_IO_DEFAULT)
{	ArgumentSettingServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ArgumentSettingServiceSoapProxy::ArgumentSettingServiceSoapProxy(const ArgumentSettingServiceSoapProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

ArgumentSettingServiceSoapProxy::ArgumentSettingServiceSoapProxy(const struct soap &_soap) : soap(_soap)
{ }

ArgumentSettingServiceSoapProxy::ArgumentSettingServiceSoapProxy(const struct soap &_soap, const char *soap_endpoint_url) : soap(_soap)
{
	soap_endpoint = soap_endpoint_url;
}

ArgumentSettingServiceSoapProxy::ArgumentSettingServiceSoapProxy(const char *soap_endpoint_url) : soap(SOAP_IO_DEFAULT)
{	ArgumentSettingServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

ArgumentSettingServiceSoapProxy::ArgumentSettingServiceSoapProxy(soap_mode iomode) : soap(iomode)
{	ArgumentSettingServiceSoapProxy_init(iomode, iomode);
}

ArgumentSettingServiceSoapProxy::ArgumentSettingServiceSoapProxy(const char *soap_endpoint_url, soap_mode iomode) : soap(iomode)
{	ArgumentSettingServiceSoapProxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

ArgumentSettingServiceSoapProxy::ArgumentSettingServiceSoapProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	ArgumentSettingServiceSoapProxy_init(imode, omode);
}

ArgumentSettingServiceSoapProxy::~ArgumentSettingServiceSoapProxy()
{
	this->destroy();
}

void ArgumentSettingServiceSoapProxy::ArgumentSettingServiceSoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL },
        { "SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "ns1", "http://tempuri.org/", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

ArgumentSettingServiceSoapProxy *ArgumentSettingServiceSoapProxy::copy()
{	ArgumentSettingServiceSoapProxy *dup = SOAP_NEW_UNMANAGED(ArgumentSettingServiceSoapProxy(*(struct soap*)this));
	return dup;
}

ArgumentSettingServiceSoapProxy& ArgumentSettingServiceSoapProxy::operator=(const ArgumentSettingServiceSoapProxy& rhs)
{	soap_done(this);
	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void ArgumentSettingServiceSoapProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void ArgumentSettingServiceSoapProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	ArgumentSettingServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void ArgumentSettingServiceSoapProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *ArgumentSettingServiceSoapProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *ArgumentSettingServiceSoapProxy::soap_fault()
{	return this->fault;
}

const char *ArgumentSettingServiceSoapProxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this);
}

const char *ArgumentSettingServiceSoapProxy::soap_fault_string()
{	return ::soap_fault_string(this);
}

const char *ArgumentSettingServiceSoapProxy::soap_fault_detail()
{	return ::soap_fault_detail(this);
}

int ArgumentSettingServiceSoapProxy::soap_close_socket()
{	return ::soap_closesock(this);
}

int ArgumentSettingServiceSoapProxy::soap_force_close_socket()
{	return ::soap_force_closesock(this);
}

void ArgumentSettingServiceSoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ArgumentSettingServiceSoapProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *ArgumentSettingServiceSoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int ArgumentSettingServiceSoapProxy::send_StandardDesignAttribute(const char *soap_endpoint_url, const char *soap_action, _ns1__StandardDesignAttribute *ns1__StandardDesignAttribute)
{
	struct soap *soap = this;
	struct __ns1__StandardDesignAttribute soap_tmp___ns1__StandardDesignAttribute;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/StandardDesignAttribute";
	soap_tmp___ns1__StandardDesignAttribute.ns1__StandardDesignAttribute = ns1__StandardDesignAttribute;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__StandardDesignAttribute(soap, &soap_tmp___ns1__StandardDesignAttribute);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__StandardDesignAttribute(soap, &soap_tmp___ns1__StandardDesignAttribute, "-ns1:StandardDesignAttribute", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__StandardDesignAttribute(soap, &soap_tmp___ns1__StandardDesignAttribute, "-ns1:StandardDesignAttribute", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_StandardDesignAttribute(_ns1__StandardDesignAttributeResponse &ns1__StandardDesignAttributeResponse)
{
	struct soap *soap = this;
	ns1__StandardDesignAttributeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StandardDesignAttributeResponse.soap_get(soap, "ns1:StandardDesignAttributeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllWindows(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllWindows *ns1__GetAllWindows)
{
	struct soap *soap = this;
	struct __ns1__GetAllWindows soap_tmp___ns1__GetAllWindows;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllWindows";
	soap_tmp___ns1__GetAllWindows.ns1__GetAllWindows = ns1__GetAllWindows;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllWindows(soap, &soap_tmp___ns1__GetAllWindows);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllWindows(soap, &soap_tmp___ns1__GetAllWindows, "-ns1:GetAllWindows", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllWindows(soap, &soap_tmp___ns1__GetAllWindows, "-ns1:GetAllWindows", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllWindows(_ns1__GetAllWindowsResponse &ns1__GetAllWindowsResponse)
{
	struct soap *soap = this;
	ns1__GetAllWindowsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllWindowsResponse.soap_get(soap, "ns1:GetAllWindowsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetWindows(const char *soap_endpoint_url, const char *soap_action, _ns1__GetWindows *ns1__GetWindows)
{
	struct soap *soap = this;
	struct __ns1__GetWindows soap_tmp___ns1__GetWindows;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetWindows";
	soap_tmp___ns1__GetWindows.ns1__GetWindows = ns1__GetWindows;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetWindows(soap, &soap_tmp___ns1__GetWindows);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetWindows(soap, &soap_tmp___ns1__GetWindows, "-ns1:GetWindows", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetWindows(soap, &soap_tmp___ns1__GetWindows, "-ns1:GetWindows", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetWindows(_ns1__GetWindowsResponse &ns1__GetWindowsResponse)
{
	struct soap *soap = this;
	ns1__GetWindowsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetWindowsResponse.soap_get(soap, "ns1:GetWindowsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllDoor(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllDoor *ns1__GetAllDoor)
{
	struct soap *soap = this;
	struct __ns1__GetAllDoor soap_tmp___ns1__GetAllDoor;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllDoor";
	soap_tmp___ns1__GetAllDoor.ns1__GetAllDoor = ns1__GetAllDoor;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllDoor(soap, &soap_tmp___ns1__GetAllDoor);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllDoor(soap, &soap_tmp___ns1__GetAllDoor, "-ns1:GetAllDoor", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllDoor(soap, &soap_tmp___ns1__GetAllDoor, "-ns1:GetAllDoor", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllDoor(_ns1__GetAllDoorResponse &ns1__GetAllDoorResponse)
{
	struct soap *soap = this;
	ns1__GetAllDoorResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllDoorResponse.soap_get(soap, "ns1:GetAllDoorResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllDoorByParam(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllDoorByParam *ns1__GetAllDoorByParam)
{
	struct soap *soap = this;
	struct __ns1__GetAllDoorByParam soap_tmp___ns1__GetAllDoorByParam;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllDoorByParam";
	soap_tmp___ns1__GetAllDoorByParam.ns1__GetAllDoorByParam = ns1__GetAllDoorByParam;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllDoorByParam(soap, &soap_tmp___ns1__GetAllDoorByParam);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllDoorByParam(soap, &soap_tmp___ns1__GetAllDoorByParam, "-ns1:GetAllDoorByParam", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllDoorByParam(soap, &soap_tmp___ns1__GetAllDoorByParam, "-ns1:GetAllDoorByParam", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllDoorByParam(_ns1__GetAllDoorByParamResponse &ns1__GetAllDoorByParamResponse)
{
	struct soap *soap = this;
	ns1__GetAllDoorByParamResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllDoorByParamResponse.soap_get(soap, "ns1:GetAllDoorByParamResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllKitchen(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllKitchen *ns1__GetAllKitchen)
{
	struct soap *soap = this;
	struct __ns1__GetAllKitchen soap_tmp___ns1__GetAllKitchen;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllKitchen";
	soap_tmp___ns1__GetAllKitchen.ns1__GetAllKitchen = ns1__GetAllKitchen;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllKitchen(soap, &soap_tmp___ns1__GetAllKitchen);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllKitchen(soap, &soap_tmp___ns1__GetAllKitchen, "-ns1:GetAllKitchen", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllKitchen(soap, &soap_tmp___ns1__GetAllKitchen, "-ns1:GetAllKitchen", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllKitchen(_ns1__GetAllKitchenResponse &ns1__GetAllKitchenResponse)
{
	struct soap *soap = this;
	ns1__GetAllKitchenResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllKitchenResponse.soap_get(soap, "ns1:GetAllKitchenResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllKitchenParam(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllKitchenParam *ns1__GetAllKitchenParam)
{
	struct soap *soap = this;
	struct __ns1__GetAllKitchenParam soap_tmp___ns1__GetAllKitchenParam;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllKitchenParam";
	soap_tmp___ns1__GetAllKitchenParam.ns1__GetAllKitchenParam = ns1__GetAllKitchenParam;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllKitchenParam(soap, &soap_tmp___ns1__GetAllKitchenParam);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllKitchenParam(soap, &soap_tmp___ns1__GetAllKitchenParam, "-ns1:GetAllKitchenParam", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllKitchenParam(soap, &soap_tmp___ns1__GetAllKitchenParam, "-ns1:GetAllKitchenParam", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllKitchenParam(_ns1__GetAllKitchenParamResponse &ns1__GetAllKitchenParamResponse)
{
	struct soap *soap = this;
	ns1__GetAllKitchenParamResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllKitchenParamResponse.soap_get(soap, "ns1:GetAllKitchenParamResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllBathroom(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllBathroom *ns1__GetAllBathroom)
{
	struct soap *soap = this;
	struct __ns1__GetAllBathroom soap_tmp___ns1__GetAllBathroom;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllBathroom";
	soap_tmp___ns1__GetAllBathroom.ns1__GetAllBathroom = ns1__GetAllBathroom;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllBathroom(soap, &soap_tmp___ns1__GetAllBathroom);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllBathroom(soap, &soap_tmp___ns1__GetAllBathroom, "-ns1:GetAllBathroom", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllBathroom(soap, &soap_tmp___ns1__GetAllBathroom, "-ns1:GetAllBathroom", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllBathroom(_ns1__GetAllBathroomResponse &ns1__GetAllBathroomResponse)
{
	struct soap *soap = this;
	ns1__GetAllBathroomResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllBathroomResponse.soap_get(soap, "ns1:GetAllBathroomResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllBathroomByParam(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllBathroomByParam *ns1__GetAllBathroomByParam)
{
	struct soap *soap = this;
	struct __ns1__GetAllBathroomByParam soap_tmp___ns1__GetAllBathroomByParam;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllBathroomByParam";
	soap_tmp___ns1__GetAllBathroomByParam.ns1__GetAllBathroomByParam = ns1__GetAllBathroomByParam;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllBathroomByParam(soap, &soap_tmp___ns1__GetAllBathroomByParam);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllBathroomByParam(soap, &soap_tmp___ns1__GetAllBathroomByParam, "-ns1:GetAllBathroomByParam", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllBathroomByParam(soap, &soap_tmp___ns1__GetAllBathroomByParam, "-ns1:GetAllBathroomByParam", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllBathroomByParam(_ns1__GetAllBathroomByParamResponse &ns1__GetAllBathroomByParamResponse)
{
	struct soap *soap = this;
	ns1__GetAllBathroomByParamResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllBathroomByParamResponse.soap_get(soap, "ns1:GetAllBathroomByParamResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllHandrailByParam(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllHandrailByParam *ns1__GetAllHandrailByParam)
{
	struct soap *soap = this;
	struct __ns1__GetAllHandrailByParam soap_tmp___ns1__GetAllHandrailByParam;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllHandrailByParam";
	soap_tmp___ns1__GetAllHandrailByParam.ns1__GetAllHandrailByParam = ns1__GetAllHandrailByParam;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllHandrailByParam(soap, &soap_tmp___ns1__GetAllHandrailByParam);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllHandrailByParam(soap, &soap_tmp___ns1__GetAllHandrailByParam, "-ns1:GetAllHandrailByParam", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllHandrailByParam(soap, &soap_tmp___ns1__GetAllHandrailByParam, "-ns1:GetAllHandrailByParam", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllHandrailByParam(_ns1__GetAllHandrailByParamResponse &ns1__GetAllHandrailByParamResponse)
{
	struct soap *soap = this;
	ns1__GetAllHandrailByParamResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllHandrailByParamResponse.soap_get(soap, "ns1:GetAllHandrailByParamResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllAirconditionerByParam(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllAirconditionerByParam *ns1__GetAllAirconditionerByParam)
{
	struct soap *soap = this;
	struct __ns1__GetAllAirconditionerByParam soap_tmp___ns1__GetAllAirconditionerByParam;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllAirconditionerByParam";
	soap_tmp___ns1__GetAllAirconditionerByParam.ns1__GetAllAirconditionerByParam = ns1__GetAllAirconditionerByParam;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllAirconditionerByParam(soap, &soap_tmp___ns1__GetAllAirconditionerByParam);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllAirconditionerByParam(soap, &soap_tmp___ns1__GetAllAirconditionerByParam, "-ns1:GetAllAirconditionerByParam", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllAirconditionerByParam(soap, &soap_tmp___ns1__GetAllAirconditionerByParam, "-ns1:GetAllAirconditionerByParam", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllAirconditionerByParam(_ns1__GetAllAirconditionerByParamResponse &ns1__GetAllAirconditionerByParamResponse)
{
	struct soap *soap = this;
	ns1__GetAllAirconditionerByParamResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllAirconditionerByParamResponse.soap_get(soap, "ns1:GetAllAirconditionerByParamResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_CadFileDownload(const char *soap_endpoint_url, const char *soap_action, _ns1__CadFileDownload *ns1__CadFileDownload)
{
	struct soap *soap = this;
	struct __ns1__CadFileDownload soap_tmp___ns1__CadFileDownload;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/CadFileDownload";
	soap_tmp___ns1__CadFileDownload.ns1__CadFileDownload = ns1__CadFileDownload;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__CadFileDownload(soap, &soap_tmp___ns1__CadFileDownload);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CadFileDownload(soap, &soap_tmp___ns1__CadFileDownload, "-ns1:CadFileDownload", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CadFileDownload(soap, &soap_tmp___ns1__CadFileDownload, "-ns1:CadFileDownload", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_CadFileDownload(_ns1__CadFileDownloadResponse &ns1__CadFileDownloadResponse)
{
	struct soap *soap = this;
	ns1__CadFileDownloadResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CadFileDownloadResponse.soap_get(soap, "ns1:CadFileDownloadResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_CadImgDownload(const char *soap_endpoint_url, const char *soap_action, _ns1__CadImgDownload *ns1__CadImgDownload)
{
	struct soap *soap = this;
	struct __ns1__CadImgDownload soap_tmp___ns1__CadImgDownload;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/CadImgDownload";
	soap_tmp___ns1__CadImgDownload.ns1__CadImgDownload = ns1__CadImgDownload;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__CadImgDownload(soap, &soap_tmp___ns1__CadImgDownload);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CadImgDownload(soap, &soap_tmp___ns1__CadImgDownload, "-ns1:CadImgDownload", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CadImgDownload(soap, &soap_tmp___ns1__CadImgDownload, "-ns1:CadImgDownload", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_CadImgDownload(_ns1__CadImgDownloadResponse &ns1__CadImgDownloadResponse)
{
	struct soap *soap = this;
	ns1__CadImgDownloadResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CadImgDownloadResponse.soap_get(soap, "ns1:CadImgDownloadResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_NewCadFileDir(const char *soap_endpoint_url, const char *soap_action, _ns1__NewCadFileDir *ns1__NewCadFileDir)
{
	struct soap *soap = this;
	struct __ns1__NewCadFileDir soap_tmp___ns1__NewCadFileDir;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/NewCadFileDir";
	soap_tmp___ns1__NewCadFileDir.ns1__NewCadFileDir = ns1__NewCadFileDir;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__NewCadFileDir(soap, &soap_tmp___ns1__NewCadFileDir);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__NewCadFileDir(soap, &soap_tmp___ns1__NewCadFileDir, "-ns1:NewCadFileDir", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__NewCadFileDir(soap, &soap_tmp___ns1__NewCadFileDir, "-ns1:NewCadFileDir", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_NewCadFileDir(_ns1__NewCadFileDirResponse &ns1__NewCadFileDirResponse)
{
	struct soap *soap = this;
	ns1__NewCadFileDirResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__NewCadFileDirResponse.soap_get(soap, "ns1:NewCadFileDirResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_DeleteCadFileDir(const char *soap_endpoint_url, const char *soap_action, _ns1__DeleteCadFileDir *ns1__DeleteCadFileDir)
{
	struct soap *soap = this;
	struct __ns1__DeleteCadFileDir soap_tmp___ns1__DeleteCadFileDir;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/DeleteCadFileDir";
	soap_tmp___ns1__DeleteCadFileDir.ns1__DeleteCadFileDir = ns1__DeleteCadFileDir;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteCadFileDir(soap, &soap_tmp___ns1__DeleteCadFileDir);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteCadFileDir(soap, &soap_tmp___ns1__DeleteCadFileDir, "-ns1:DeleteCadFileDir", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteCadFileDir(soap, &soap_tmp___ns1__DeleteCadFileDir, "-ns1:DeleteCadFileDir", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_DeleteCadFileDir(_ns1__DeleteCadFileDirResponse &ns1__DeleteCadFileDirResponse)
{
	struct soap *soap = this;
	ns1__DeleteCadFileDirResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteCadFileDirResponse.soap_get(soap, "ns1:DeleteCadFileDirResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_DeleteCadFileDirByDirId(const char *soap_endpoint_url, const char *soap_action, _ns1__DeleteCadFileDirByDirId *ns1__DeleteCadFileDirByDirId)
{
	struct soap *soap = this;
	struct __ns1__DeleteCadFileDirByDirId soap_tmp___ns1__DeleteCadFileDirByDirId;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/DeleteCadFileDirByDirId";
	soap_tmp___ns1__DeleteCadFileDirByDirId.ns1__DeleteCadFileDirByDirId = ns1__DeleteCadFileDirByDirId;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteCadFileDirByDirId(soap, &soap_tmp___ns1__DeleteCadFileDirByDirId);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteCadFileDirByDirId(soap, &soap_tmp___ns1__DeleteCadFileDirByDirId, "-ns1:DeleteCadFileDirByDirId", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteCadFileDirByDirId(soap, &soap_tmp___ns1__DeleteCadFileDirByDirId, "-ns1:DeleteCadFileDirByDirId", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_DeleteCadFileDirByDirId(_ns1__DeleteCadFileDirByDirIdResponse &ns1__DeleteCadFileDirByDirIdResponse)
{
	struct soap *soap = this;
	ns1__DeleteCadFileDirByDirIdResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteCadFileDirByDirIdResponse.soap_get(soap, "ns1:DeleteCadFileDirByDirIdResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_RenameCadFileDir(const char *soap_endpoint_url, const char *soap_action, _ns1__RenameCadFileDir *ns1__RenameCadFileDir)
{
	struct soap *soap = this;
	struct __ns1__RenameCadFileDir soap_tmp___ns1__RenameCadFileDir;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/RenameCadFileDir";
	soap_tmp___ns1__RenameCadFileDir.ns1__RenameCadFileDir = ns1__RenameCadFileDir;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__RenameCadFileDir(soap, &soap_tmp___ns1__RenameCadFileDir);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RenameCadFileDir(soap, &soap_tmp___ns1__RenameCadFileDir, "-ns1:RenameCadFileDir", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RenameCadFileDir(soap, &soap_tmp___ns1__RenameCadFileDir, "-ns1:RenameCadFileDir", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_RenameCadFileDir(_ns1__RenameCadFileDirResponse &ns1__RenameCadFileDirResponse)
{
	struct soap *soap = this;
	ns1__RenameCadFileDirResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RenameCadFileDirResponse.soap_get(soap, "ns1:RenameCadFileDirResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetProjectInfo(const char *soap_endpoint_url, const char *soap_action, _ns1__GetProjectInfo *ns1__GetProjectInfo)
{
	struct soap *soap = this;
	struct __ns1__GetProjectInfo soap_tmp___ns1__GetProjectInfo;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetProjectInfo";
	soap_tmp___ns1__GetProjectInfo.ns1__GetProjectInfo = ns1__GetProjectInfo;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetProjectInfo(soap, &soap_tmp___ns1__GetProjectInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetProjectInfo(soap, &soap_tmp___ns1__GetProjectInfo, "-ns1:GetProjectInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetProjectInfo(soap, &soap_tmp___ns1__GetProjectInfo, "-ns1:GetProjectInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetProjectInfo(_ns1__GetProjectInfoResponse &ns1__GetProjectInfoResponse)
{
	struct soap *soap = this;
	ns1__GetProjectInfoResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetProjectInfoResponse.soap_get(soap, "ns1:GetProjectInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_UpdateCadDrawing(const char *soap_endpoint_url, const char *soap_action, _ns1__UpdateCadDrawing *ns1__UpdateCadDrawing)
{
	struct soap *soap = this;
	struct __ns1__UpdateCadDrawing soap_tmp___ns1__UpdateCadDrawing;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/UpdateCadDrawing";
	soap_tmp___ns1__UpdateCadDrawing.ns1__UpdateCadDrawing = ns1__UpdateCadDrawing;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateCadDrawing(soap, &soap_tmp___ns1__UpdateCadDrawing);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateCadDrawing(soap, &soap_tmp___ns1__UpdateCadDrawing, "-ns1:UpdateCadDrawing", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateCadDrawing(soap, &soap_tmp___ns1__UpdateCadDrawing, "-ns1:UpdateCadDrawing", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_UpdateCadDrawing(_ns1__UpdateCadDrawingResponse &ns1__UpdateCadDrawingResponse)
{
	struct soap *soap = this;
	ns1__UpdateCadDrawingResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateCadDrawingResponse.soap_get(soap, "ns1:UpdateCadDrawingResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_DeleteCadDrawing(const char *soap_endpoint_url, const char *soap_action, _ns1__DeleteCadDrawing *ns1__DeleteCadDrawing)
{
	struct soap *soap = this;
	struct __ns1__DeleteCadDrawing soap_tmp___ns1__DeleteCadDrawing;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/DeleteCadDrawing";
	soap_tmp___ns1__DeleteCadDrawing.ns1__DeleteCadDrawing = ns1__DeleteCadDrawing;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteCadDrawing(soap, &soap_tmp___ns1__DeleteCadDrawing);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteCadDrawing(soap, &soap_tmp___ns1__DeleteCadDrawing, "-ns1:DeleteCadDrawing", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteCadDrawing(soap, &soap_tmp___ns1__DeleteCadDrawing, "-ns1:DeleteCadDrawing", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_DeleteCadDrawing(_ns1__DeleteCadDrawingResponse &ns1__DeleteCadDrawingResponse)
{
	struct soap *soap = this;
	ns1__DeleteCadDrawingResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteCadDrawingResponse.soap_get(soap, "ns1:DeleteCadDrawingResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_DeleteCadDrawingByFileID(const char *soap_endpoint_url, const char *soap_action, _ns1__DeleteCadDrawingByFileID *ns1__DeleteCadDrawingByFileID)
{
	struct soap *soap = this;
	struct __ns1__DeleteCadDrawingByFileID soap_tmp___ns1__DeleteCadDrawingByFileID;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/DeleteCadDrawingByFileID";
	soap_tmp___ns1__DeleteCadDrawingByFileID.ns1__DeleteCadDrawingByFileID = ns1__DeleteCadDrawingByFileID;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteCadDrawingByFileID(soap, &soap_tmp___ns1__DeleteCadDrawingByFileID);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteCadDrawingByFileID(soap, &soap_tmp___ns1__DeleteCadDrawingByFileID, "-ns1:DeleteCadDrawingByFileID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteCadDrawingByFileID(soap, &soap_tmp___ns1__DeleteCadDrawingByFileID, "-ns1:DeleteCadDrawingByFileID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_DeleteCadDrawingByFileID(_ns1__DeleteCadDrawingByFileIDResponse &ns1__DeleteCadDrawingByFileIDResponse)
{
	struct soap *soap = this;
	ns1__DeleteCadDrawingByFileIDResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteCadDrawingByFileIDResponse.soap_get(soap, "ns1:DeleteCadDrawingByFileIDResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_CheckUserInfo(const char *soap_endpoint_url, const char *soap_action, _ns1__CheckUserInfo *ns1__CheckUserInfo)
{
	struct soap *soap = this;
	struct __ns1__CheckUserInfo soap_tmp___ns1__CheckUserInfo;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/CheckUserInfo";
	soap_tmp___ns1__CheckUserInfo.ns1__CheckUserInfo = ns1__CheckUserInfo;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckUserInfo(soap, &soap_tmp___ns1__CheckUserInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckUserInfo(soap, &soap_tmp___ns1__CheckUserInfo, "-ns1:CheckUserInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckUserInfo(soap, &soap_tmp___ns1__CheckUserInfo, "-ns1:CheckUserInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_CheckUserInfo(_ns1__CheckUserInfoResponse &ns1__CheckUserInfoResponse)
{
	struct soap *soap = this;
	ns1__CheckUserInfoResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckUserInfoResponse.soap_get(soap, "ns1:CheckUserInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_StandardDesignAttribute_(const char *soap_endpoint_url, const char *soap_action, _ns1__StandardDesignAttribute *ns1__StandardDesignAttribute)
{
	struct soap *soap = this;
	struct __ns1__StandardDesignAttribute_ soap_tmp___ns1__StandardDesignAttribute_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/StandardDesignAttribute";
	soap_tmp___ns1__StandardDesignAttribute_.ns1__StandardDesignAttribute = ns1__StandardDesignAttribute;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__StandardDesignAttribute_(soap, &soap_tmp___ns1__StandardDesignAttribute_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__StandardDesignAttribute_(soap, &soap_tmp___ns1__StandardDesignAttribute_, "-ns1:StandardDesignAttribute", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__StandardDesignAttribute_(soap, &soap_tmp___ns1__StandardDesignAttribute_, "-ns1:StandardDesignAttribute", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_StandardDesignAttribute_(_ns1__StandardDesignAttributeResponse &ns1__StandardDesignAttributeResponse)
{
	struct soap *soap = this;
	ns1__StandardDesignAttributeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StandardDesignAttributeResponse.soap_get(soap, "ns1:StandardDesignAttributeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllWindows_(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllWindows *ns1__GetAllWindows)
{
	struct soap *soap = this;
	struct __ns1__GetAllWindows_ soap_tmp___ns1__GetAllWindows_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllWindows";
	soap_tmp___ns1__GetAllWindows_.ns1__GetAllWindows = ns1__GetAllWindows;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllWindows_(soap, &soap_tmp___ns1__GetAllWindows_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllWindows_(soap, &soap_tmp___ns1__GetAllWindows_, "-ns1:GetAllWindows", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllWindows_(soap, &soap_tmp___ns1__GetAllWindows_, "-ns1:GetAllWindows", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllWindows_(_ns1__GetAllWindowsResponse &ns1__GetAllWindowsResponse)
{
	struct soap *soap = this;
	ns1__GetAllWindowsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllWindowsResponse.soap_get(soap, "ns1:GetAllWindowsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetWindows_(const char *soap_endpoint_url, const char *soap_action, _ns1__GetWindows *ns1__GetWindows)
{
	struct soap *soap = this;
	struct __ns1__GetWindows_ soap_tmp___ns1__GetWindows_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetWindows";
	soap_tmp___ns1__GetWindows_.ns1__GetWindows = ns1__GetWindows;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetWindows_(soap, &soap_tmp___ns1__GetWindows_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetWindows_(soap, &soap_tmp___ns1__GetWindows_, "-ns1:GetWindows", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetWindows_(soap, &soap_tmp___ns1__GetWindows_, "-ns1:GetWindows", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetWindows_(_ns1__GetWindowsResponse &ns1__GetWindowsResponse)
{
	struct soap *soap = this;
	ns1__GetWindowsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetWindowsResponse.soap_get(soap, "ns1:GetWindowsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllDoor_(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllDoor *ns1__GetAllDoor)
{
	struct soap *soap = this;
	struct __ns1__GetAllDoor_ soap_tmp___ns1__GetAllDoor_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllDoor";
	soap_tmp___ns1__GetAllDoor_.ns1__GetAllDoor = ns1__GetAllDoor;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllDoor_(soap, &soap_tmp___ns1__GetAllDoor_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllDoor_(soap, &soap_tmp___ns1__GetAllDoor_, "-ns1:GetAllDoor", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllDoor_(soap, &soap_tmp___ns1__GetAllDoor_, "-ns1:GetAllDoor", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllDoor_(_ns1__GetAllDoorResponse &ns1__GetAllDoorResponse)
{
	struct soap *soap = this;
	ns1__GetAllDoorResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllDoorResponse.soap_get(soap, "ns1:GetAllDoorResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllDoorByParam_(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllDoorByParam *ns1__GetAllDoorByParam)
{
	struct soap *soap = this;
	struct __ns1__GetAllDoorByParam_ soap_tmp___ns1__GetAllDoorByParam_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllDoorByParam";
	soap_tmp___ns1__GetAllDoorByParam_.ns1__GetAllDoorByParam = ns1__GetAllDoorByParam;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllDoorByParam_(soap, &soap_tmp___ns1__GetAllDoorByParam_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllDoorByParam_(soap, &soap_tmp___ns1__GetAllDoorByParam_, "-ns1:GetAllDoorByParam", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllDoorByParam_(soap, &soap_tmp___ns1__GetAllDoorByParam_, "-ns1:GetAllDoorByParam", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllDoorByParam_(_ns1__GetAllDoorByParamResponse &ns1__GetAllDoorByParamResponse)
{
	struct soap *soap = this;
	ns1__GetAllDoorByParamResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllDoorByParamResponse.soap_get(soap, "ns1:GetAllDoorByParamResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllKitchen_(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllKitchen *ns1__GetAllKitchen)
{
	struct soap *soap = this;
	struct __ns1__GetAllKitchen_ soap_tmp___ns1__GetAllKitchen_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllKitchen";
	soap_tmp___ns1__GetAllKitchen_.ns1__GetAllKitchen = ns1__GetAllKitchen;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllKitchen_(soap, &soap_tmp___ns1__GetAllKitchen_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllKitchen_(soap, &soap_tmp___ns1__GetAllKitchen_, "-ns1:GetAllKitchen", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllKitchen_(soap, &soap_tmp___ns1__GetAllKitchen_, "-ns1:GetAllKitchen", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllKitchen_(_ns1__GetAllKitchenResponse &ns1__GetAllKitchenResponse)
{
	struct soap *soap = this;
	ns1__GetAllKitchenResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllKitchenResponse.soap_get(soap, "ns1:GetAllKitchenResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllKitchenParam_(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllKitchenParam *ns1__GetAllKitchenParam)
{
	struct soap *soap = this;
	struct __ns1__GetAllKitchenParam_ soap_tmp___ns1__GetAllKitchenParam_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllKitchenParam";
	soap_tmp___ns1__GetAllKitchenParam_.ns1__GetAllKitchenParam = ns1__GetAllKitchenParam;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllKitchenParam_(soap, &soap_tmp___ns1__GetAllKitchenParam_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllKitchenParam_(soap, &soap_tmp___ns1__GetAllKitchenParam_, "-ns1:GetAllKitchenParam", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllKitchenParam_(soap, &soap_tmp___ns1__GetAllKitchenParam_, "-ns1:GetAllKitchenParam", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllKitchenParam_(_ns1__GetAllKitchenParamResponse &ns1__GetAllKitchenParamResponse)
{
	struct soap *soap = this;
	ns1__GetAllKitchenParamResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllKitchenParamResponse.soap_get(soap, "ns1:GetAllKitchenParamResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllBathroom_(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllBathroom *ns1__GetAllBathroom)
{
	struct soap *soap = this;
	struct __ns1__GetAllBathroom_ soap_tmp___ns1__GetAllBathroom_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllBathroom";
	soap_tmp___ns1__GetAllBathroom_.ns1__GetAllBathroom = ns1__GetAllBathroom;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllBathroom_(soap, &soap_tmp___ns1__GetAllBathroom_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllBathroom_(soap, &soap_tmp___ns1__GetAllBathroom_, "-ns1:GetAllBathroom", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllBathroom_(soap, &soap_tmp___ns1__GetAllBathroom_, "-ns1:GetAllBathroom", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllBathroom_(_ns1__GetAllBathroomResponse &ns1__GetAllBathroomResponse)
{
	struct soap *soap = this;
	ns1__GetAllBathroomResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllBathroomResponse.soap_get(soap, "ns1:GetAllBathroomResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllBathroomByParam_(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllBathroomByParam *ns1__GetAllBathroomByParam)
{
	struct soap *soap = this;
	struct __ns1__GetAllBathroomByParam_ soap_tmp___ns1__GetAllBathroomByParam_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllBathroomByParam";
	soap_tmp___ns1__GetAllBathroomByParam_.ns1__GetAllBathroomByParam = ns1__GetAllBathroomByParam;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllBathroomByParam_(soap, &soap_tmp___ns1__GetAllBathroomByParam_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllBathroomByParam_(soap, &soap_tmp___ns1__GetAllBathroomByParam_, "-ns1:GetAllBathroomByParam", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllBathroomByParam_(soap, &soap_tmp___ns1__GetAllBathroomByParam_, "-ns1:GetAllBathroomByParam", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllBathroomByParam_(_ns1__GetAllBathroomByParamResponse &ns1__GetAllBathroomByParamResponse)
{
	struct soap *soap = this;
	ns1__GetAllBathroomByParamResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllBathroomByParamResponse.soap_get(soap, "ns1:GetAllBathroomByParamResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllHandrailByParam_(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllHandrailByParam *ns1__GetAllHandrailByParam)
{
	struct soap *soap = this;
	struct __ns1__GetAllHandrailByParam_ soap_tmp___ns1__GetAllHandrailByParam_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllHandrailByParam";
	soap_tmp___ns1__GetAllHandrailByParam_.ns1__GetAllHandrailByParam = ns1__GetAllHandrailByParam;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllHandrailByParam_(soap, &soap_tmp___ns1__GetAllHandrailByParam_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllHandrailByParam_(soap, &soap_tmp___ns1__GetAllHandrailByParam_, "-ns1:GetAllHandrailByParam", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllHandrailByParam_(soap, &soap_tmp___ns1__GetAllHandrailByParam_, "-ns1:GetAllHandrailByParam", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllHandrailByParam_(_ns1__GetAllHandrailByParamResponse &ns1__GetAllHandrailByParamResponse)
{
	struct soap *soap = this;
	ns1__GetAllHandrailByParamResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllHandrailByParamResponse.soap_get(soap, "ns1:GetAllHandrailByParamResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetAllAirconditionerByParam_(const char *soap_endpoint_url, const char *soap_action, _ns1__GetAllAirconditionerByParam *ns1__GetAllAirconditionerByParam)
{
	struct soap *soap = this;
	struct __ns1__GetAllAirconditionerByParam_ soap_tmp___ns1__GetAllAirconditionerByParam_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetAllAirconditionerByParam";
	soap_tmp___ns1__GetAllAirconditionerByParam_.ns1__GetAllAirconditionerByParam = ns1__GetAllAirconditionerByParam;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllAirconditionerByParam_(soap, &soap_tmp___ns1__GetAllAirconditionerByParam_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllAirconditionerByParam_(soap, &soap_tmp___ns1__GetAllAirconditionerByParam_, "-ns1:GetAllAirconditionerByParam", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllAirconditionerByParam_(soap, &soap_tmp___ns1__GetAllAirconditionerByParam_, "-ns1:GetAllAirconditionerByParam", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetAllAirconditionerByParam_(_ns1__GetAllAirconditionerByParamResponse &ns1__GetAllAirconditionerByParamResponse)
{
	struct soap *soap = this;
	ns1__GetAllAirconditionerByParamResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllAirconditionerByParamResponse.soap_get(soap, "ns1:GetAllAirconditionerByParamResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_CadFileDownload_(const char *soap_endpoint_url, const char *soap_action, _ns1__CadFileDownload *ns1__CadFileDownload)
{
	struct soap *soap = this;
	struct __ns1__CadFileDownload_ soap_tmp___ns1__CadFileDownload_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/CadFileDownload";
	soap_tmp___ns1__CadFileDownload_.ns1__CadFileDownload = ns1__CadFileDownload;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__CadFileDownload_(soap, &soap_tmp___ns1__CadFileDownload_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CadFileDownload_(soap, &soap_tmp___ns1__CadFileDownload_, "-ns1:CadFileDownload", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CadFileDownload_(soap, &soap_tmp___ns1__CadFileDownload_, "-ns1:CadFileDownload", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_CadFileDownload_(_ns1__CadFileDownloadResponse &ns1__CadFileDownloadResponse)
{
	struct soap *soap = this;
	ns1__CadFileDownloadResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CadFileDownloadResponse.soap_get(soap, "ns1:CadFileDownloadResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_CadImgDownload_(const char *soap_endpoint_url, const char *soap_action, _ns1__CadImgDownload *ns1__CadImgDownload)
{
	struct soap *soap = this;
	struct __ns1__CadImgDownload_ soap_tmp___ns1__CadImgDownload_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/CadImgDownload";
	soap_tmp___ns1__CadImgDownload_.ns1__CadImgDownload = ns1__CadImgDownload;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__CadImgDownload_(soap, &soap_tmp___ns1__CadImgDownload_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CadImgDownload_(soap, &soap_tmp___ns1__CadImgDownload_, "-ns1:CadImgDownload", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CadImgDownload_(soap, &soap_tmp___ns1__CadImgDownload_, "-ns1:CadImgDownload", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_CadImgDownload_(_ns1__CadImgDownloadResponse &ns1__CadImgDownloadResponse)
{
	struct soap *soap = this;
	ns1__CadImgDownloadResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CadImgDownloadResponse.soap_get(soap, "ns1:CadImgDownloadResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_NewCadFileDir_(const char *soap_endpoint_url, const char *soap_action, _ns1__NewCadFileDir *ns1__NewCadFileDir)
{
	struct soap *soap = this;
	struct __ns1__NewCadFileDir_ soap_tmp___ns1__NewCadFileDir_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/NewCadFileDir";
	soap_tmp___ns1__NewCadFileDir_.ns1__NewCadFileDir = ns1__NewCadFileDir;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__NewCadFileDir_(soap, &soap_tmp___ns1__NewCadFileDir_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__NewCadFileDir_(soap, &soap_tmp___ns1__NewCadFileDir_, "-ns1:NewCadFileDir", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__NewCadFileDir_(soap, &soap_tmp___ns1__NewCadFileDir_, "-ns1:NewCadFileDir", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_NewCadFileDir_(_ns1__NewCadFileDirResponse &ns1__NewCadFileDirResponse)
{
	struct soap *soap = this;
	ns1__NewCadFileDirResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__NewCadFileDirResponse.soap_get(soap, "ns1:NewCadFileDirResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_DeleteCadFileDir_(const char *soap_endpoint_url, const char *soap_action, _ns1__DeleteCadFileDir *ns1__DeleteCadFileDir)
{
	struct soap *soap = this;
	struct __ns1__DeleteCadFileDir_ soap_tmp___ns1__DeleteCadFileDir_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/DeleteCadFileDir";
	soap_tmp___ns1__DeleteCadFileDir_.ns1__DeleteCadFileDir = ns1__DeleteCadFileDir;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteCadFileDir_(soap, &soap_tmp___ns1__DeleteCadFileDir_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteCadFileDir_(soap, &soap_tmp___ns1__DeleteCadFileDir_, "-ns1:DeleteCadFileDir", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteCadFileDir_(soap, &soap_tmp___ns1__DeleteCadFileDir_, "-ns1:DeleteCadFileDir", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_DeleteCadFileDir_(_ns1__DeleteCadFileDirResponse &ns1__DeleteCadFileDirResponse)
{
	struct soap *soap = this;
	ns1__DeleteCadFileDirResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteCadFileDirResponse.soap_get(soap, "ns1:DeleteCadFileDirResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_DeleteCadFileDirByDirId_(const char *soap_endpoint_url, const char *soap_action, _ns1__DeleteCadFileDirByDirId *ns1__DeleteCadFileDirByDirId)
{
	struct soap *soap = this;
	struct __ns1__DeleteCadFileDirByDirId_ soap_tmp___ns1__DeleteCadFileDirByDirId_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/DeleteCadFileDirByDirId";
	soap_tmp___ns1__DeleteCadFileDirByDirId_.ns1__DeleteCadFileDirByDirId = ns1__DeleteCadFileDirByDirId;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteCadFileDirByDirId_(soap, &soap_tmp___ns1__DeleteCadFileDirByDirId_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteCadFileDirByDirId_(soap, &soap_tmp___ns1__DeleteCadFileDirByDirId_, "-ns1:DeleteCadFileDirByDirId", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteCadFileDirByDirId_(soap, &soap_tmp___ns1__DeleteCadFileDirByDirId_, "-ns1:DeleteCadFileDirByDirId", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_DeleteCadFileDirByDirId_(_ns1__DeleteCadFileDirByDirIdResponse &ns1__DeleteCadFileDirByDirIdResponse)
{
	struct soap *soap = this;
	ns1__DeleteCadFileDirByDirIdResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteCadFileDirByDirIdResponse.soap_get(soap, "ns1:DeleteCadFileDirByDirIdResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_RenameCadFileDir_(const char *soap_endpoint_url, const char *soap_action, _ns1__RenameCadFileDir *ns1__RenameCadFileDir)
{
	struct soap *soap = this;
	struct __ns1__RenameCadFileDir_ soap_tmp___ns1__RenameCadFileDir_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/RenameCadFileDir";
	soap_tmp___ns1__RenameCadFileDir_.ns1__RenameCadFileDir = ns1__RenameCadFileDir;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__RenameCadFileDir_(soap, &soap_tmp___ns1__RenameCadFileDir_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RenameCadFileDir_(soap, &soap_tmp___ns1__RenameCadFileDir_, "-ns1:RenameCadFileDir", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RenameCadFileDir_(soap, &soap_tmp___ns1__RenameCadFileDir_, "-ns1:RenameCadFileDir", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_RenameCadFileDir_(_ns1__RenameCadFileDirResponse &ns1__RenameCadFileDirResponse)
{
	struct soap *soap = this;
	ns1__RenameCadFileDirResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RenameCadFileDirResponse.soap_get(soap, "ns1:RenameCadFileDirResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_GetProjectInfo_(const char *soap_endpoint_url, const char *soap_action, _ns1__GetProjectInfo *ns1__GetProjectInfo)
{
	struct soap *soap = this;
	struct __ns1__GetProjectInfo_ soap_tmp___ns1__GetProjectInfo_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetProjectInfo";
	soap_tmp___ns1__GetProjectInfo_.ns1__GetProjectInfo = ns1__GetProjectInfo;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetProjectInfo_(soap, &soap_tmp___ns1__GetProjectInfo_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetProjectInfo_(soap, &soap_tmp___ns1__GetProjectInfo_, "-ns1:GetProjectInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetProjectInfo_(soap, &soap_tmp___ns1__GetProjectInfo_, "-ns1:GetProjectInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_GetProjectInfo_(_ns1__GetProjectInfoResponse &ns1__GetProjectInfoResponse)
{
	struct soap *soap = this;
	ns1__GetProjectInfoResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetProjectInfoResponse.soap_get(soap, "ns1:GetProjectInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_UpdateCadDrawing_(const char *soap_endpoint_url, const char *soap_action, _ns1__UpdateCadDrawing *ns1__UpdateCadDrawing)
{
	struct soap *soap = this;
	struct __ns1__UpdateCadDrawing_ soap_tmp___ns1__UpdateCadDrawing_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/UpdateCadDrawing";
	soap_tmp___ns1__UpdateCadDrawing_.ns1__UpdateCadDrawing = ns1__UpdateCadDrawing;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateCadDrawing_(soap, &soap_tmp___ns1__UpdateCadDrawing_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateCadDrawing_(soap, &soap_tmp___ns1__UpdateCadDrawing_, "-ns1:UpdateCadDrawing", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateCadDrawing_(soap, &soap_tmp___ns1__UpdateCadDrawing_, "-ns1:UpdateCadDrawing", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_UpdateCadDrawing_(_ns1__UpdateCadDrawingResponse &ns1__UpdateCadDrawingResponse)
{
	struct soap *soap = this;
	ns1__UpdateCadDrawingResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateCadDrawingResponse.soap_get(soap, "ns1:UpdateCadDrawingResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_DeleteCadDrawing_(const char *soap_endpoint_url, const char *soap_action, _ns1__DeleteCadDrawing *ns1__DeleteCadDrawing)
{
	struct soap *soap = this;
	struct __ns1__DeleteCadDrawing_ soap_tmp___ns1__DeleteCadDrawing_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/DeleteCadDrawing";
	soap_tmp___ns1__DeleteCadDrawing_.ns1__DeleteCadDrawing = ns1__DeleteCadDrawing;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteCadDrawing_(soap, &soap_tmp___ns1__DeleteCadDrawing_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteCadDrawing_(soap, &soap_tmp___ns1__DeleteCadDrawing_, "-ns1:DeleteCadDrawing", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteCadDrawing_(soap, &soap_tmp___ns1__DeleteCadDrawing_, "-ns1:DeleteCadDrawing", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_DeleteCadDrawing_(_ns1__DeleteCadDrawingResponse &ns1__DeleteCadDrawingResponse)
{
	struct soap *soap = this;
	ns1__DeleteCadDrawingResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteCadDrawingResponse.soap_get(soap, "ns1:DeleteCadDrawingResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_DeleteCadDrawingByFileID_(const char *soap_endpoint_url, const char *soap_action, _ns1__DeleteCadDrawingByFileID *ns1__DeleteCadDrawingByFileID)
{
	struct soap *soap = this;
	struct __ns1__DeleteCadDrawingByFileID_ soap_tmp___ns1__DeleteCadDrawingByFileID_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/DeleteCadDrawingByFileID";
	soap_tmp___ns1__DeleteCadDrawingByFileID_.ns1__DeleteCadDrawingByFileID = ns1__DeleteCadDrawingByFileID;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteCadDrawingByFileID_(soap, &soap_tmp___ns1__DeleteCadDrawingByFileID_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteCadDrawingByFileID_(soap, &soap_tmp___ns1__DeleteCadDrawingByFileID_, "-ns1:DeleteCadDrawingByFileID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteCadDrawingByFileID_(soap, &soap_tmp___ns1__DeleteCadDrawingByFileID_, "-ns1:DeleteCadDrawingByFileID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_DeleteCadDrawingByFileID_(_ns1__DeleteCadDrawingByFileIDResponse &ns1__DeleteCadDrawingByFileIDResponse)
{
	struct soap *soap = this;
	ns1__DeleteCadDrawingByFileIDResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteCadDrawingByFileIDResponse.soap_get(soap, "ns1:DeleteCadDrawingByFileIDResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ArgumentSettingServiceSoapProxy::send_CheckUserInfo_(const char *soap_endpoint_url, const char *soap_action, _ns1__CheckUserInfo *ns1__CheckUserInfo)
{
	struct soap *soap = this;
	struct __ns1__CheckUserInfo_ soap_tmp___ns1__CheckUserInfo_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = GSINST->GetCADServiceUrl();
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/CheckUserInfo";
	soap_tmp___ns1__CheckUserInfo_.ns1__CheckUserInfo = ns1__CheckUserInfo;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckUserInfo_(soap, &soap_tmp___ns1__CheckUserInfo_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckUserInfo_(soap, &soap_tmp___ns1__CheckUserInfo_, "-ns1:CheckUserInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckUserInfo_(soap, &soap_tmp___ns1__CheckUserInfo_, "-ns1:CheckUserInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ArgumentSettingServiceSoapProxy::recv_CheckUserInfo_(_ns1__CheckUserInfoResponse &ns1__CheckUserInfoResponse)
{
	struct soap *soap = this;
	ns1__CheckUserInfoResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckUserInfoResponse.soap_get(soap, "ns1:CheckUserInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
