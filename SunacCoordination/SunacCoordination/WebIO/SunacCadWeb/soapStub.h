/* soapStub.h
   Generated by gSOAP 2.8.84 for .\SunacCADService2.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20884
# error "GSOAP VERSION 20884 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class _ns1__StandardDesignAttribute;	/* .\SunacCADService2.h:151 */
class _ns1__StandardDesignAttributeResponse;	/* .\SunacCADService2.h:153 */
class _ns1__GetAllWindows;	/* .\SunacCADService2.h:155 */
class _ns1__GetAllWindowsResponse;	/* .\SunacCADService2.h:157 */
class _ns1__GetWindows;	/* .\SunacCADService2.h:159 */
class _ns1__GetWindowsResponse;	/* .\SunacCADService2.h:161 */
class _ns1__GetAllDoor;	/* .\SunacCADService2.h:163 */
class _ns1__GetAllDoorResponse;	/* .\SunacCADService2.h:165 */
class _ns1__GetAllDoorByParam;	/* .\SunacCADService2.h:167 */
class _ns1__GetAllDoorByParamResponse;	/* .\SunacCADService2.h:169 */
class _ns1__GetAllKitchen;	/* .\SunacCADService2.h:171 */
class _ns1__GetAllKitchenResponse;	/* .\SunacCADService2.h:173 */
class _ns1__GetAllKitchenParam;	/* .\SunacCADService2.h:175 */
class _ns1__GetAllKitchenParamResponse;	/* .\SunacCADService2.h:177 */
class _ns1__GetAllBathroom;	/* .\SunacCADService2.h:179 */
class _ns1__GetAllBathroomResponse;	/* .\SunacCADService2.h:181 */
class _ns1__GetAllBathroomByParam;	/* .\SunacCADService2.h:183 */
class _ns1__GetAllBathroomByParamResponse;	/* .\SunacCADService2.h:185 */
class _ns1__GetAllHandrailByParam;	/* .\SunacCADService2.h:187 */
class _ns1__GetAllHandrailByParamResponse;	/* .\SunacCADService2.h:189 */
class _ns1__GetAllAirconditionerByParam;	/* .\SunacCADService2.h:191 */
class _ns1__GetAllAirconditionerByParamResponse;	/* .\SunacCADService2.h:193 */
class _ns1__CadFileDownload;	/* .\SunacCADService2.h:195 */
class _ns1__CadFileDownloadResponse;	/* .\SunacCADService2.h:197 */
class _ns1__CadImgDownload;	/* .\SunacCADService2.h:199 */
class _ns1__CadImgDownloadResponse;	/* .\SunacCADService2.h:201 */
struct __ns1__StandardDesignAttribute;	/* .\SunacCADService2.h:1012 */
struct __ns1__GetAllWindows;	/* .\SunacCADService2.h:1083 */
struct __ns1__GetWindows;	/* .\SunacCADService2.h:1154 */
struct __ns1__GetAllDoor;	/* .\SunacCADService2.h:1225 */
struct __ns1__GetAllDoorByParam;	/* .\SunacCADService2.h:1296 */
struct __ns1__GetAllKitchen;	/* .\SunacCADService2.h:1367 */
struct __ns1__GetAllKitchenParam;	/* .\SunacCADService2.h:1438 */
struct __ns1__GetAllBathroom;	/* .\SunacCADService2.h:1509 */
struct __ns1__GetAllBathroomByParam;	/* .\SunacCADService2.h:1580 */
struct __ns1__GetAllHandrailByParam;	/* .\SunacCADService2.h:1651 */
struct __ns1__GetAllAirconditionerByParam;	/* .\SunacCADService2.h:1722 */
struct __ns1__CadFileDownload;	/* .\SunacCADService2.h:1793 */
struct __ns1__CadImgDownload;	/* .\SunacCADService2.h:1864 */
struct __ns1__StandardDesignAttribute_;	/* .\SunacCADService2.h:1935 */
struct __ns1__GetAllWindows_;	/* .\SunacCADService2.h:2006 */
struct __ns1__GetWindows_;	/* .\SunacCADService2.h:2077 */
struct __ns1__GetAllDoor_;	/* .\SunacCADService2.h:2148 */
struct __ns1__GetAllDoorByParam_;	/* .\SunacCADService2.h:2219 */
struct __ns1__GetAllKitchen_;	/* .\SunacCADService2.h:2290 */
struct __ns1__GetAllKitchenParam_;	/* .\SunacCADService2.h:2361 */
struct __ns1__GetAllBathroom_;	/* .\SunacCADService2.h:2432 */
struct __ns1__GetAllBathroomByParam_;	/* .\SunacCADService2.h:2503 */
struct __ns1__GetAllHandrailByParam_;	/* .\SunacCADService2.h:2574 */
struct __ns1__GetAllAirconditionerByParam_;	/* .\SunacCADService2.h:2645 */
struct __ns1__CadFileDownload_;	/* .\SunacCADService2.h:2716 */
struct __ns1__CadImgDownload_;	/* .\SunacCADService2.h:2787 */

/* .\SunacCADService2.h:151 */
#ifndef SOAP_TYPE__ns1__StandardDesignAttribute
#define SOAP_TYPE__ns1__StandardDesignAttribute (8)
/* complex XML schema type 'ns1:StandardDesignAttribute': */
class SOAP_CMAC _ns1__StandardDesignAttribute {
      public:
        /// Optional element 'ns1:AtrributeName' of XML schema type 'xsd:string'
        std::wstring *AtrributeName;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__StandardDesignAttribute
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__StandardDesignAttribute; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__StandardDesignAttribute, default initialized and not managed by a soap context
        virtual _ns1__StandardDesignAttribute *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__StandardDesignAttribute); }
      public:
        /// Constructor with default initializations
        _ns1__StandardDesignAttribute() : AtrributeName(), soap() { }
        virtual ~_ns1__StandardDesignAttribute() { }
        /// Friend allocator used by soap_new__ns1__StandardDesignAttribute(struct soap*, int)
        friend SOAP_FMAC1 _ns1__StandardDesignAttribute * SOAP_FMAC2 soap_instantiate__ns1__StandardDesignAttribute(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:153 */
#ifndef SOAP_TYPE__ns1__StandardDesignAttributeResponse
#define SOAP_TYPE__ns1__StandardDesignAttributeResponse (9)
/* complex XML schema type 'ns1:StandardDesignAttributeResponse': */
class SOAP_CMAC _ns1__StandardDesignAttributeResponse {
      public:
        /// Optional element 'ns1:StandardDesignAttributeResult' of XML schema type 'xsd:string'
        std::wstring *StandardDesignAttributeResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__StandardDesignAttributeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__StandardDesignAttributeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__StandardDesignAttributeResponse, default initialized and not managed by a soap context
        virtual _ns1__StandardDesignAttributeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__StandardDesignAttributeResponse); }
      public:
        /// Constructor with default initializations
        _ns1__StandardDesignAttributeResponse() : StandardDesignAttributeResult(), soap() { }
        virtual ~_ns1__StandardDesignAttributeResponse() { }
        /// Friend allocator used by soap_new__ns1__StandardDesignAttributeResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__StandardDesignAttributeResponse * SOAP_FMAC2 soap_instantiate__ns1__StandardDesignAttributeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:155 */
#ifndef SOAP_TYPE__ns1__GetAllWindows
#define SOAP_TYPE__ns1__GetAllWindows (10)
/* complex XML schema type 'ns1:GetAllWindows': */
class SOAP_CMAC _ns1__GetAllWindows {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllWindows
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllWindows; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllWindows, default initialized and not managed by a soap context
        virtual _ns1__GetAllWindows *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllWindows); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllWindows() : soap() { }
        virtual ~_ns1__GetAllWindows() { }
        /// Friend allocator used by soap_new__ns1__GetAllWindows(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllWindows * SOAP_FMAC2 soap_instantiate__ns1__GetAllWindows(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:157 */
#ifndef SOAP_TYPE__ns1__GetAllWindowsResponse
#define SOAP_TYPE__ns1__GetAllWindowsResponse (11)
/* complex XML schema type 'ns1:GetAllWindowsResponse': */
class SOAP_CMAC _ns1__GetAllWindowsResponse {
      public:
        /// Optional element 'ns1:GetAllWindowsResult' of XML schema type 'xsd:string'
        std::wstring *GetAllWindowsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllWindowsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllWindowsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllWindowsResponse, default initialized and not managed by a soap context
        virtual _ns1__GetAllWindowsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllWindowsResponse); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllWindowsResponse() : GetAllWindowsResult(), soap() { }
        virtual ~_ns1__GetAllWindowsResponse() { }
        /// Friend allocator used by soap_new__ns1__GetAllWindowsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllWindowsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAllWindowsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:159 */
#ifndef SOAP_TYPE__ns1__GetWindows
#define SOAP_TYPE__ns1__GetWindows (12)
/* complex XML schema type 'ns1:GetWindows': */
class SOAP_CMAC _ns1__GetWindows {
      public:
        /// Required element 'ns1:width' of XML schema type 'xsd:double'
        double width;
        /// Required element 'ns1:height' of XML schema type 'xsd:double'
        double height;
        /// Optional element 'ns1:openType' of XML schema type 'xsd:string'
        std::wstring *openType;
        /// Optional element 'ns1:openNum' of XML schema type 'xsd:string'
        std::wstring *openNum;
        /// Optional element 'ns1:gongNengQu' of XML schema type 'xsd:string'
        std::wstring *gongNengQu;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetWindows
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetWindows; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetWindows, default initialized and not managed by a soap context
        virtual _ns1__GetWindows *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetWindows); }
      public:
        /// Constructor with default initializations
        _ns1__GetWindows() : width(), height(), openType(), openNum(), gongNengQu(), soap() { }
        virtual ~_ns1__GetWindows() { }
        /// Friend allocator used by soap_new__ns1__GetWindows(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetWindows * SOAP_FMAC2 soap_instantiate__ns1__GetWindows(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:161 */
#ifndef SOAP_TYPE__ns1__GetWindowsResponse
#define SOAP_TYPE__ns1__GetWindowsResponse (13)
/* complex XML schema type 'ns1:GetWindowsResponse': */
class SOAP_CMAC _ns1__GetWindowsResponse {
      public:
        /// Optional element 'ns1:GetWindowsResult' of XML schema type 'xsd:string'
        std::wstring *GetWindowsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetWindowsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetWindowsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetWindowsResponse, default initialized and not managed by a soap context
        virtual _ns1__GetWindowsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetWindowsResponse); }
      public:
        /// Constructor with default initializations
        _ns1__GetWindowsResponse() : GetWindowsResult(), soap() { }
        virtual ~_ns1__GetWindowsResponse() { }
        /// Friend allocator used by soap_new__ns1__GetWindowsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetWindowsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetWindowsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:163 */
#ifndef SOAP_TYPE__ns1__GetAllDoor
#define SOAP_TYPE__ns1__GetAllDoor (14)
/* complex XML schema type 'ns1:GetAllDoor': */
class SOAP_CMAC _ns1__GetAllDoor {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllDoor
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllDoor; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllDoor, default initialized and not managed by a soap context
        virtual _ns1__GetAllDoor *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllDoor); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllDoor() : soap() { }
        virtual ~_ns1__GetAllDoor() { }
        /// Friend allocator used by soap_new__ns1__GetAllDoor(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllDoor * SOAP_FMAC2 soap_instantiate__ns1__GetAllDoor(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:165 */
#ifndef SOAP_TYPE__ns1__GetAllDoorResponse
#define SOAP_TYPE__ns1__GetAllDoorResponse (15)
/* complex XML schema type 'ns1:GetAllDoorResponse': */
class SOAP_CMAC _ns1__GetAllDoorResponse {
      public:
        /// Optional element 'ns1:GetAllDoorResult' of XML schema type 'xsd:string'
        std::wstring *GetAllDoorResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllDoorResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllDoorResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllDoorResponse, default initialized and not managed by a soap context
        virtual _ns1__GetAllDoorResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllDoorResponse); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllDoorResponse() : GetAllDoorResult(), soap() { }
        virtual ~_ns1__GetAllDoorResponse() { }
        /// Friend allocator used by soap_new__ns1__GetAllDoorResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllDoorResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAllDoorResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:167 */
#ifndef SOAP_TYPE__ns1__GetAllDoorByParam
#define SOAP_TYPE__ns1__GetAllDoorByParam (16)
/* complex XML schema type 'ns1:GetAllDoorByParam': */
class SOAP_CMAC _ns1__GetAllDoorByParam {
      public:
        /// Required element 'ns1:width' of XML schema type 'xsd:double'
        double width;
        /// Optional element 'ns1:doorType' of XML schema type 'xsd:string'
        std::wstring *doorType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllDoorByParam
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllDoorByParam; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllDoorByParam, default initialized and not managed by a soap context
        virtual _ns1__GetAllDoorByParam *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllDoorByParam); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllDoorByParam() : width(), doorType(), soap() { }
        virtual ~_ns1__GetAllDoorByParam() { }
        /// Friend allocator used by soap_new__ns1__GetAllDoorByParam(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllDoorByParam * SOAP_FMAC2 soap_instantiate__ns1__GetAllDoorByParam(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:169 */
#ifndef SOAP_TYPE__ns1__GetAllDoorByParamResponse
#define SOAP_TYPE__ns1__GetAllDoorByParamResponse (17)
/* complex XML schema type 'ns1:GetAllDoorByParamResponse': */
class SOAP_CMAC _ns1__GetAllDoorByParamResponse {
      public:
        /// Optional element 'ns1:GetAllDoorByParamResult' of XML schema type 'xsd:string'
        std::wstring *GetAllDoorByParamResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllDoorByParamResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllDoorByParamResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllDoorByParamResponse, default initialized and not managed by a soap context
        virtual _ns1__GetAllDoorByParamResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllDoorByParamResponse); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllDoorByParamResponse() : GetAllDoorByParamResult(), soap() { }
        virtual ~_ns1__GetAllDoorByParamResponse() { }
        /// Friend allocator used by soap_new__ns1__GetAllDoorByParamResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllDoorByParamResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAllDoorByParamResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:171 */
#ifndef SOAP_TYPE__ns1__GetAllKitchen
#define SOAP_TYPE__ns1__GetAllKitchen (18)
/* complex XML schema type 'ns1:GetAllKitchen': */
class SOAP_CMAC _ns1__GetAllKitchen {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllKitchen
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllKitchen; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllKitchen, default initialized and not managed by a soap context
        virtual _ns1__GetAllKitchen *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllKitchen); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllKitchen() : soap() { }
        virtual ~_ns1__GetAllKitchen() { }
        /// Friend allocator used by soap_new__ns1__GetAllKitchen(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllKitchen * SOAP_FMAC2 soap_instantiate__ns1__GetAllKitchen(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:173 */
#ifndef SOAP_TYPE__ns1__GetAllKitchenResponse
#define SOAP_TYPE__ns1__GetAllKitchenResponse (19)
/* complex XML schema type 'ns1:GetAllKitchenResponse': */
class SOAP_CMAC _ns1__GetAllKitchenResponse {
      public:
        /// Optional element 'ns1:GetAllKitchenResult' of XML schema type 'xsd:string'
        std::wstring *GetAllKitchenResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllKitchenResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllKitchenResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllKitchenResponse, default initialized and not managed by a soap context
        virtual _ns1__GetAllKitchenResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllKitchenResponse); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllKitchenResponse() : GetAllKitchenResult(), soap() { }
        virtual ~_ns1__GetAllKitchenResponse() { }
        /// Friend allocator used by soap_new__ns1__GetAllKitchenResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllKitchenResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAllKitchenResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:175 */
#ifndef SOAP_TYPE__ns1__GetAllKitchenParam
#define SOAP_TYPE__ns1__GetAllKitchenParam (20)
/* complex XML schema type 'ns1:GetAllKitchenParam': */
class SOAP_CMAC _ns1__GetAllKitchenParam {
      public:
        /// Required element 'ns1:Width' of XML schema type 'xsd:double'
        double Width;
        /// Required element 'ns1:Height' of XML schema type 'xsd:double'
        double Height;
        /// Optional element 'ns1:KitchenDoorWindowPosition' of XML schema type 'xsd:string'
        std::wstring *KitchenDoorWindowPosition;
        /// Optional element 'ns1:KitchenType' of XML schema type 'xsd:string'
        std::wstring *KitchenType;
        /// Optional element 'ns1:AirVent' of XML schema type 'xsd:string'
        std::wstring *AirVent;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllKitchenParam
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllKitchenParam; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllKitchenParam, default initialized and not managed by a soap context
        virtual _ns1__GetAllKitchenParam *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllKitchenParam); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllKitchenParam() : Width(), Height(), KitchenDoorWindowPosition(), KitchenType(), AirVent(), soap() { }
        virtual ~_ns1__GetAllKitchenParam() { }
        /// Friend allocator used by soap_new__ns1__GetAllKitchenParam(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllKitchenParam * SOAP_FMAC2 soap_instantiate__ns1__GetAllKitchenParam(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:177 */
#ifndef SOAP_TYPE__ns1__GetAllKitchenParamResponse
#define SOAP_TYPE__ns1__GetAllKitchenParamResponse (21)
/* complex XML schema type 'ns1:GetAllKitchenParamResponse': */
class SOAP_CMAC _ns1__GetAllKitchenParamResponse {
      public:
        /// Optional element 'ns1:GetAllKitchenParamResult' of XML schema type 'xsd:string'
        std::wstring *GetAllKitchenParamResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllKitchenParamResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllKitchenParamResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllKitchenParamResponse, default initialized and not managed by a soap context
        virtual _ns1__GetAllKitchenParamResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllKitchenParamResponse); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllKitchenParamResponse() : GetAllKitchenParamResult(), soap() { }
        virtual ~_ns1__GetAllKitchenParamResponse() { }
        /// Friend allocator used by soap_new__ns1__GetAllKitchenParamResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllKitchenParamResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAllKitchenParamResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:179 */
#ifndef SOAP_TYPE__ns1__GetAllBathroom
#define SOAP_TYPE__ns1__GetAllBathroom (22)
/* complex XML schema type 'ns1:GetAllBathroom': */
class SOAP_CMAC _ns1__GetAllBathroom {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllBathroom
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllBathroom; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllBathroom, default initialized and not managed by a soap context
        virtual _ns1__GetAllBathroom *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllBathroom); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllBathroom() : soap() { }
        virtual ~_ns1__GetAllBathroom() { }
        /// Friend allocator used by soap_new__ns1__GetAllBathroom(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllBathroom * SOAP_FMAC2 soap_instantiate__ns1__GetAllBathroom(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:181 */
#ifndef SOAP_TYPE__ns1__GetAllBathroomResponse
#define SOAP_TYPE__ns1__GetAllBathroomResponse (23)
/* complex XML schema type 'ns1:GetAllBathroomResponse': */
class SOAP_CMAC _ns1__GetAllBathroomResponse {
      public:
        /// Optional element 'ns1:GetAllBathroomResult' of XML schema type 'xsd:string'
        std::wstring *GetAllBathroomResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllBathroomResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllBathroomResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllBathroomResponse, default initialized and not managed by a soap context
        virtual _ns1__GetAllBathroomResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllBathroomResponse); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllBathroomResponse() : GetAllBathroomResult(), soap() { }
        virtual ~_ns1__GetAllBathroomResponse() { }
        /// Friend allocator used by soap_new__ns1__GetAllBathroomResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllBathroomResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAllBathroomResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:183 */
#ifndef SOAP_TYPE__ns1__GetAllBathroomByParam
#define SOAP_TYPE__ns1__GetAllBathroomByParam (24)
/* complex XML schema type 'ns1:GetAllBathroomByParam': */
class SOAP_CMAC _ns1__GetAllBathroomByParam {
      public:
        /// Required element 'ns1:Width' of XML schema type 'xsd:double'
        double Width;
        /// Required element 'ns1:Height' of XML schema type 'xsd:double'
        double Height;
        /// Optional element 'ns1:BathroomDoorWindowPosition' of XML schema type 'xsd:string'
        std::wstring *BathroomDoorWindowPosition;
        /// Optional element 'ns1:ToiletType' of XML schema type 'xsd:string'
        std::wstring *ToiletType;
        /// Optional element 'ns1:AirVent' of XML schema type 'xsd:string'
        std::wstring *AirVent;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllBathroomByParam
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllBathroomByParam; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllBathroomByParam, default initialized and not managed by a soap context
        virtual _ns1__GetAllBathroomByParam *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllBathroomByParam); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllBathroomByParam() : Width(), Height(), BathroomDoorWindowPosition(), ToiletType(), AirVent(), soap() { }
        virtual ~_ns1__GetAllBathroomByParam() { }
        /// Friend allocator used by soap_new__ns1__GetAllBathroomByParam(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllBathroomByParam * SOAP_FMAC2 soap_instantiate__ns1__GetAllBathroomByParam(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:185 */
#ifndef SOAP_TYPE__ns1__GetAllBathroomByParamResponse
#define SOAP_TYPE__ns1__GetAllBathroomByParamResponse (25)
/* complex XML schema type 'ns1:GetAllBathroomByParamResponse': */
class SOAP_CMAC _ns1__GetAllBathroomByParamResponse {
      public:
        /// Optional element 'ns1:GetAllBathroomByParamResult' of XML schema type 'xsd:string'
        std::wstring *GetAllBathroomByParamResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllBathroomByParamResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllBathroomByParamResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllBathroomByParamResponse, default initialized and not managed by a soap context
        virtual _ns1__GetAllBathroomByParamResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllBathroomByParamResponse); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllBathroomByParamResponse() : GetAllBathroomByParamResult(), soap() { }
        virtual ~_ns1__GetAllBathroomByParamResponse() { }
        /// Friend allocator used by soap_new__ns1__GetAllBathroomByParamResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllBathroomByParamResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAllBathroomByParamResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:187 */
#ifndef SOAP_TYPE__ns1__GetAllHandrailByParam
#define SOAP_TYPE__ns1__GetAllHandrailByParam (26)
/* complex XML schema type 'ns1:GetAllHandrailByParam': */
class SOAP_CMAC _ns1__GetAllHandrailByParam {
      public:
        /// Optional element 'ns1:RailingType' of XML schema type 'xsd:string'
        std::wstring *RailingType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllHandrailByParam
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllHandrailByParam; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllHandrailByParam, default initialized and not managed by a soap context
        virtual _ns1__GetAllHandrailByParam *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllHandrailByParam); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllHandrailByParam() : RailingType(), soap() { }
        virtual ~_ns1__GetAllHandrailByParam() { }
        /// Friend allocator used by soap_new__ns1__GetAllHandrailByParam(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllHandrailByParam * SOAP_FMAC2 soap_instantiate__ns1__GetAllHandrailByParam(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:189 */
#ifndef SOAP_TYPE__ns1__GetAllHandrailByParamResponse
#define SOAP_TYPE__ns1__GetAllHandrailByParamResponse (27)
/* complex XML schema type 'ns1:GetAllHandrailByParamResponse': */
class SOAP_CMAC _ns1__GetAllHandrailByParamResponse {
      public:
        /// Optional element 'ns1:GetAllHandrailByParamResult' of XML schema type 'xsd:string'
        std::wstring *GetAllHandrailByParamResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllHandrailByParamResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllHandrailByParamResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllHandrailByParamResponse, default initialized and not managed by a soap context
        virtual _ns1__GetAllHandrailByParamResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllHandrailByParamResponse); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllHandrailByParamResponse() : GetAllHandrailByParamResult(), soap() { }
        virtual ~_ns1__GetAllHandrailByParamResponse() { }
        /// Friend allocator used by soap_new__ns1__GetAllHandrailByParamResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllHandrailByParamResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAllHandrailByParamResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:191 */
#ifndef SOAP_TYPE__ns1__GetAllAirconditionerByParam
#define SOAP_TYPE__ns1__GetAllAirconditionerByParam (28)
/* complex XML schema type 'ns1:GetAllAirconditionerByParam': */
class SOAP_CMAC _ns1__GetAllAirconditionerByParam {
      public:
        /// Optional element 'ns1:AirconditionerPower' of XML schema type 'xsd:string'
        std::wstring *AirconditionerPower;
        /// Optional element 'ns1:AirconditionerPipePosition' of XML schema type 'xsd:string'
        std::wstring *AirconditionerPipePosition;
        /// Optional element 'ns1:AirconditionerIsRainpipe' of XML schema type 'xsd:string'
        std::wstring *AirconditionerIsRainpipe;
        /// Optional element 'ns1:RainpipePosition' of XML schema type 'xsd:string'
        std::wstring *RainpipePosition;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllAirconditionerByParam
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllAirconditionerByParam; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllAirconditionerByParam, default initialized and not managed by a soap context
        virtual _ns1__GetAllAirconditionerByParam *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllAirconditionerByParam); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllAirconditionerByParam() : AirconditionerPower(), AirconditionerPipePosition(), AirconditionerIsRainpipe(), RainpipePosition(), soap() { }
        virtual ~_ns1__GetAllAirconditionerByParam() { }
        /// Friend allocator used by soap_new__ns1__GetAllAirconditionerByParam(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllAirconditionerByParam * SOAP_FMAC2 soap_instantiate__ns1__GetAllAirconditionerByParam(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:193 */
#ifndef SOAP_TYPE__ns1__GetAllAirconditionerByParamResponse
#define SOAP_TYPE__ns1__GetAllAirconditionerByParamResponse (29)
/* complex XML schema type 'ns1:GetAllAirconditionerByParamResponse': */
class SOAP_CMAC _ns1__GetAllAirconditionerByParamResponse {
      public:
        /// Optional element 'ns1:GetAllAirconditionerByParamResult' of XML schema type 'xsd:string'
        std::wstring *GetAllAirconditionerByParamResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAllAirconditionerByParamResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__GetAllAirconditionerByParamResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAllAirconditionerByParamResponse, default initialized and not managed by a soap context
        virtual _ns1__GetAllAirconditionerByParamResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetAllAirconditionerByParamResponse); }
      public:
        /// Constructor with default initializations
        _ns1__GetAllAirconditionerByParamResponse() : GetAllAirconditionerByParamResult(), soap() { }
        virtual ~_ns1__GetAllAirconditionerByParamResponse() { }
        /// Friend allocator used by soap_new__ns1__GetAllAirconditionerByParamResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAllAirconditionerByParamResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAllAirconditionerByParamResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:195 */
#ifndef SOAP_TYPE__ns1__CadFileDownload
#define SOAP_TYPE__ns1__CadFileDownload (30)
/* complex XML schema type 'ns1:CadFileDownload': */
class SOAP_CMAC _ns1__CadFileDownload {
      public:
        /// Required element 'ns1:Id' of XML schema type 'xsd:int'
        int Id;
        /// Optional element 'ns1:Type' of XML schema type 'xsd:string'
        std::wstring *Type;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__CadFileDownload
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__CadFileDownload; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CadFileDownload, default initialized and not managed by a soap context
        virtual _ns1__CadFileDownload *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__CadFileDownload); }
      public:
        /// Constructor with default initializations
        _ns1__CadFileDownload() : Id(), Type(), soap() { }
        virtual ~_ns1__CadFileDownload() { }
        /// Friend allocator used by soap_new__ns1__CadFileDownload(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CadFileDownload * SOAP_FMAC2 soap_instantiate__ns1__CadFileDownload(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:197 */
#ifndef SOAP_TYPE__ns1__CadFileDownloadResponse
#define SOAP_TYPE__ns1__CadFileDownloadResponse (31)
/* complex XML schema type 'ns1:CadFileDownloadResponse': */
class SOAP_CMAC _ns1__CadFileDownloadResponse {
      public:
        /// Optional element 'ns1:CadFileDownloadResult' of XML schema type 'xsd:string'
        std::wstring *CadFileDownloadResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__CadFileDownloadResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__CadFileDownloadResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CadFileDownloadResponse, default initialized and not managed by a soap context
        virtual _ns1__CadFileDownloadResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__CadFileDownloadResponse); }
      public:
        /// Constructor with default initializations
        _ns1__CadFileDownloadResponse() : CadFileDownloadResult(), soap() { }
        virtual ~_ns1__CadFileDownloadResponse() { }
        /// Friend allocator used by soap_new__ns1__CadFileDownloadResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CadFileDownloadResponse * SOAP_FMAC2 soap_instantiate__ns1__CadFileDownloadResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:199 */
#ifndef SOAP_TYPE__ns1__CadImgDownload
#define SOAP_TYPE__ns1__CadImgDownload (32)
/* complex XML schema type 'ns1:CadImgDownload': */
class SOAP_CMAC _ns1__CadImgDownload {
      public:
        /// Required element 'ns1:Id' of XML schema type 'xsd:int'
        int Id;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__CadImgDownload
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__CadImgDownload; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CadImgDownload, default initialized and not managed by a soap context
        virtual _ns1__CadImgDownload *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__CadImgDownload); }
      public:
        /// Constructor with default initializations
        _ns1__CadImgDownload() : Id(), soap() { }
        virtual ~_ns1__CadImgDownload() { }
        /// Friend allocator used by soap_new__ns1__CadImgDownload(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CadImgDownload * SOAP_FMAC2 soap_instantiate__ns1__CadImgDownload(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:201 */
#ifndef SOAP_TYPE__ns1__CadImgDownloadResponse
#define SOAP_TYPE__ns1__CadImgDownloadResponse (33)
/* complex XML schema type 'ns1:CadImgDownloadResponse': */
class SOAP_CMAC _ns1__CadImgDownloadResponse {
      public:
        /// Optional element 'ns1:CadImgDownloadResult' of XML schema type 'xsd:string'
        std::wstring *CadImgDownloadResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__CadImgDownloadResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__CadImgDownloadResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CadImgDownloadResponse, default initialized and not managed by a soap context
        virtual _ns1__CadImgDownloadResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__CadImgDownloadResponse); }
      public:
        /// Constructor with default initializations
        _ns1__CadImgDownloadResponse() : CadImgDownloadResult(), soap() { }
        virtual ~_ns1__CadImgDownloadResponse() { }
        /// Friend allocator used by soap_new__ns1__CadImgDownloadResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CadImgDownloadResponse * SOAP_FMAC2 soap_instantiate__ns1__CadImgDownloadResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:1012 */
#ifndef SOAP_TYPE___ns1__StandardDesignAttribute
#define SOAP_TYPE___ns1__StandardDesignAttribute (41)
/* Wrapper: */
struct SOAP_CMAC __ns1__StandardDesignAttribute {
      public:
        /** Optional element 'ns1:StandardDesignAttribute' of XML schema type 'ns1:StandardDesignAttribute' */
        _ns1__StandardDesignAttribute *ns1__StandardDesignAttribute;
      public:
        /** Return unique type id SOAP_TYPE___ns1__StandardDesignAttribute */
        long soap_type() const { return SOAP_TYPE___ns1__StandardDesignAttribute; }
        /** Constructor with member initializations */
        __ns1__StandardDesignAttribute() : ns1__StandardDesignAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__StandardDesignAttribute * SOAP_FMAC2 soap_instantiate___ns1__StandardDesignAttribute(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:1083 */
#ifndef SOAP_TYPE___ns1__GetAllWindows
#define SOAP_TYPE___ns1__GetAllWindows (45)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllWindows {
      public:
        /** Optional element 'ns1:GetAllWindows' of XML schema type 'ns1:GetAllWindows' */
        _ns1__GetAllWindows *ns1__GetAllWindows;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllWindows */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllWindows; }
        /** Constructor with member initializations */
        __ns1__GetAllWindows() : ns1__GetAllWindows() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllWindows * SOAP_FMAC2 soap_instantiate___ns1__GetAllWindows(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:1154 */
#ifndef SOAP_TYPE___ns1__GetWindows
#define SOAP_TYPE___ns1__GetWindows (49)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetWindows {
      public:
        /** Optional element 'ns1:GetWindows' of XML schema type 'ns1:GetWindows' */
        _ns1__GetWindows *ns1__GetWindows;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetWindows */
        long soap_type() const { return SOAP_TYPE___ns1__GetWindows; }
        /** Constructor with member initializations */
        __ns1__GetWindows() : ns1__GetWindows() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetWindows * SOAP_FMAC2 soap_instantiate___ns1__GetWindows(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:1225 */
#ifndef SOAP_TYPE___ns1__GetAllDoor
#define SOAP_TYPE___ns1__GetAllDoor (53)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllDoor {
      public:
        /** Optional element 'ns1:GetAllDoor' of XML schema type 'ns1:GetAllDoor' */
        _ns1__GetAllDoor *ns1__GetAllDoor;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllDoor */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllDoor; }
        /** Constructor with member initializations */
        __ns1__GetAllDoor() : ns1__GetAllDoor() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllDoor * SOAP_FMAC2 soap_instantiate___ns1__GetAllDoor(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:1296 */
#ifndef SOAP_TYPE___ns1__GetAllDoorByParam
#define SOAP_TYPE___ns1__GetAllDoorByParam (57)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllDoorByParam {
      public:
        /** Optional element 'ns1:GetAllDoorByParam' of XML schema type 'ns1:GetAllDoorByParam' */
        _ns1__GetAllDoorByParam *ns1__GetAllDoorByParam;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllDoorByParam */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllDoorByParam; }
        /** Constructor with member initializations */
        __ns1__GetAllDoorByParam() : ns1__GetAllDoorByParam() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllDoorByParam * SOAP_FMAC2 soap_instantiate___ns1__GetAllDoorByParam(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:1367 */
#ifndef SOAP_TYPE___ns1__GetAllKitchen
#define SOAP_TYPE___ns1__GetAllKitchen (61)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllKitchen {
      public:
        /** Optional element 'ns1:GetAllKitchen' of XML schema type 'ns1:GetAllKitchen' */
        _ns1__GetAllKitchen *ns1__GetAllKitchen;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllKitchen */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllKitchen; }
        /** Constructor with member initializations */
        __ns1__GetAllKitchen() : ns1__GetAllKitchen() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllKitchen * SOAP_FMAC2 soap_instantiate___ns1__GetAllKitchen(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:1438 */
#ifndef SOAP_TYPE___ns1__GetAllKitchenParam
#define SOAP_TYPE___ns1__GetAllKitchenParam (65)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllKitchenParam {
      public:
        /** Optional element 'ns1:GetAllKitchenParam' of XML schema type 'ns1:GetAllKitchenParam' */
        _ns1__GetAllKitchenParam *ns1__GetAllKitchenParam;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllKitchenParam */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllKitchenParam; }
        /** Constructor with member initializations */
        __ns1__GetAllKitchenParam() : ns1__GetAllKitchenParam() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllKitchenParam * SOAP_FMAC2 soap_instantiate___ns1__GetAllKitchenParam(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:1509 */
#ifndef SOAP_TYPE___ns1__GetAllBathroom
#define SOAP_TYPE___ns1__GetAllBathroom (69)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllBathroom {
      public:
        /** Optional element 'ns1:GetAllBathroom' of XML schema type 'ns1:GetAllBathroom' */
        _ns1__GetAllBathroom *ns1__GetAllBathroom;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllBathroom */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllBathroom; }
        /** Constructor with member initializations */
        __ns1__GetAllBathroom() : ns1__GetAllBathroom() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllBathroom * SOAP_FMAC2 soap_instantiate___ns1__GetAllBathroom(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:1580 */
#ifndef SOAP_TYPE___ns1__GetAllBathroomByParam
#define SOAP_TYPE___ns1__GetAllBathroomByParam (73)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllBathroomByParam {
      public:
        /** Optional element 'ns1:GetAllBathroomByParam' of XML schema type 'ns1:GetAllBathroomByParam' */
        _ns1__GetAllBathroomByParam *ns1__GetAllBathroomByParam;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllBathroomByParam */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllBathroomByParam; }
        /** Constructor with member initializations */
        __ns1__GetAllBathroomByParam() : ns1__GetAllBathroomByParam() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllBathroomByParam * SOAP_FMAC2 soap_instantiate___ns1__GetAllBathroomByParam(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:1651 */
#ifndef SOAP_TYPE___ns1__GetAllHandrailByParam
#define SOAP_TYPE___ns1__GetAllHandrailByParam (77)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllHandrailByParam {
      public:
        /** Optional element 'ns1:GetAllHandrailByParam' of XML schema type 'ns1:GetAllHandrailByParam' */
        _ns1__GetAllHandrailByParam *ns1__GetAllHandrailByParam;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllHandrailByParam */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllHandrailByParam; }
        /** Constructor with member initializations */
        __ns1__GetAllHandrailByParam() : ns1__GetAllHandrailByParam() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllHandrailByParam * SOAP_FMAC2 soap_instantiate___ns1__GetAllHandrailByParam(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:1722 */
#ifndef SOAP_TYPE___ns1__GetAllAirconditionerByParam
#define SOAP_TYPE___ns1__GetAllAirconditionerByParam (81)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllAirconditionerByParam {
      public:
        /** Optional element 'ns1:GetAllAirconditionerByParam' of XML schema type 'ns1:GetAllAirconditionerByParam' */
        _ns1__GetAllAirconditionerByParam *ns1__GetAllAirconditionerByParam;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllAirconditionerByParam */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllAirconditionerByParam; }
        /** Constructor with member initializations */
        __ns1__GetAllAirconditionerByParam() : ns1__GetAllAirconditionerByParam() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllAirconditionerByParam * SOAP_FMAC2 soap_instantiate___ns1__GetAllAirconditionerByParam(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:1793 */
#ifndef SOAP_TYPE___ns1__CadFileDownload
#define SOAP_TYPE___ns1__CadFileDownload (85)
/* Wrapper: */
struct SOAP_CMAC __ns1__CadFileDownload {
      public:
        /** Optional element 'ns1:CadFileDownload' of XML schema type 'ns1:CadFileDownload' */
        _ns1__CadFileDownload *ns1__CadFileDownload;
      public:
        /** Return unique type id SOAP_TYPE___ns1__CadFileDownload */
        long soap_type() const { return SOAP_TYPE___ns1__CadFileDownload; }
        /** Constructor with member initializations */
        __ns1__CadFileDownload() : ns1__CadFileDownload() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__CadFileDownload * SOAP_FMAC2 soap_instantiate___ns1__CadFileDownload(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:1864 */
#ifndef SOAP_TYPE___ns1__CadImgDownload
#define SOAP_TYPE___ns1__CadImgDownload (89)
/* Wrapper: */
struct SOAP_CMAC __ns1__CadImgDownload {
      public:
        /** Optional element 'ns1:CadImgDownload' of XML schema type 'ns1:CadImgDownload' */
        _ns1__CadImgDownload *ns1__CadImgDownload;
      public:
        /** Return unique type id SOAP_TYPE___ns1__CadImgDownload */
        long soap_type() const { return SOAP_TYPE___ns1__CadImgDownload; }
        /** Constructor with member initializations */
        __ns1__CadImgDownload() : ns1__CadImgDownload() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__CadImgDownload * SOAP_FMAC2 soap_instantiate___ns1__CadImgDownload(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:1935 */
#ifndef SOAP_TYPE___ns1__StandardDesignAttribute_
#define SOAP_TYPE___ns1__StandardDesignAttribute_ (91)
/* Wrapper: */
struct SOAP_CMAC __ns1__StandardDesignAttribute_ {
      public:
        /** Optional element 'ns1:StandardDesignAttribute' of XML schema type 'ns1:StandardDesignAttribute' */
        _ns1__StandardDesignAttribute *ns1__StandardDesignAttribute;
      public:
        /** Return unique type id SOAP_TYPE___ns1__StandardDesignAttribute_ */
        long soap_type() const { return SOAP_TYPE___ns1__StandardDesignAttribute_; }
        /** Constructor with member initializations */
        __ns1__StandardDesignAttribute_() : ns1__StandardDesignAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__StandardDesignAttribute_ * SOAP_FMAC2 soap_instantiate___ns1__StandardDesignAttribute_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:2006 */
#ifndef SOAP_TYPE___ns1__GetAllWindows_
#define SOAP_TYPE___ns1__GetAllWindows_ (93)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllWindows_ {
      public:
        /** Optional element 'ns1:GetAllWindows' of XML schema type 'ns1:GetAllWindows' */
        _ns1__GetAllWindows *ns1__GetAllWindows;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllWindows_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllWindows_; }
        /** Constructor with member initializations */
        __ns1__GetAllWindows_() : ns1__GetAllWindows() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllWindows_ * SOAP_FMAC2 soap_instantiate___ns1__GetAllWindows_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:2077 */
#ifndef SOAP_TYPE___ns1__GetWindows_
#define SOAP_TYPE___ns1__GetWindows_ (95)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetWindows_ {
      public:
        /** Optional element 'ns1:GetWindows' of XML schema type 'ns1:GetWindows' */
        _ns1__GetWindows *ns1__GetWindows;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetWindows_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetWindows_; }
        /** Constructor with member initializations */
        __ns1__GetWindows_() : ns1__GetWindows() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetWindows_ * SOAP_FMAC2 soap_instantiate___ns1__GetWindows_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:2148 */
#ifndef SOAP_TYPE___ns1__GetAllDoor_
#define SOAP_TYPE___ns1__GetAllDoor_ (97)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllDoor_ {
      public:
        /** Optional element 'ns1:GetAllDoor' of XML schema type 'ns1:GetAllDoor' */
        _ns1__GetAllDoor *ns1__GetAllDoor;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllDoor_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllDoor_; }
        /** Constructor with member initializations */
        __ns1__GetAllDoor_() : ns1__GetAllDoor() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllDoor_ * SOAP_FMAC2 soap_instantiate___ns1__GetAllDoor_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:2219 */
#ifndef SOAP_TYPE___ns1__GetAllDoorByParam_
#define SOAP_TYPE___ns1__GetAllDoorByParam_ (99)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllDoorByParam_ {
      public:
        /** Optional element 'ns1:GetAllDoorByParam' of XML schema type 'ns1:GetAllDoorByParam' */
        _ns1__GetAllDoorByParam *ns1__GetAllDoorByParam;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllDoorByParam_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllDoorByParam_; }
        /** Constructor with member initializations */
        __ns1__GetAllDoorByParam_() : ns1__GetAllDoorByParam() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllDoorByParam_ * SOAP_FMAC2 soap_instantiate___ns1__GetAllDoorByParam_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:2290 */
#ifndef SOAP_TYPE___ns1__GetAllKitchen_
#define SOAP_TYPE___ns1__GetAllKitchen_ (101)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllKitchen_ {
      public:
        /** Optional element 'ns1:GetAllKitchen' of XML schema type 'ns1:GetAllKitchen' */
        _ns1__GetAllKitchen *ns1__GetAllKitchen;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllKitchen_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllKitchen_; }
        /** Constructor with member initializations */
        __ns1__GetAllKitchen_() : ns1__GetAllKitchen() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllKitchen_ * SOAP_FMAC2 soap_instantiate___ns1__GetAllKitchen_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:2361 */
#ifndef SOAP_TYPE___ns1__GetAllKitchenParam_
#define SOAP_TYPE___ns1__GetAllKitchenParam_ (103)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllKitchenParam_ {
      public:
        /** Optional element 'ns1:GetAllKitchenParam' of XML schema type 'ns1:GetAllKitchenParam' */
        _ns1__GetAllKitchenParam *ns1__GetAllKitchenParam;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllKitchenParam_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllKitchenParam_; }
        /** Constructor with member initializations */
        __ns1__GetAllKitchenParam_() : ns1__GetAllKitchenParam() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllKitchenParam_ * SOAP_FMAC2 soap_instantiate___ns1__GetAllKitchenParam_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:2432 */
#ifndef SOAP_TYPE___ns1__GetAllBathroom_
#define SOAP_TYPE___ns1__GetAllBathroom_ (105)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllBathroom_ {
      public:
        /** Optional element 'ns1:GetAllBathroom' of XML schema type 'ns1:GetAllBathroom' */
        _ns1__GetAllBathroom *ns1__GetAllBathroom;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllBathroom_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllBathroom_; }
        /** Constructor with member initializations */
        __ns1__GetAllBathroom_() : ns1__GetAllBathroom() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllBathroom_ * SOAP_FMAC2 soap_instantiate___ns1__GetAllBathroom_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:2503 */
#ifndef SOAP_TYPE___ns1__GetAllBathroomByParam_
#define SOAP_TYPE___ns1__GetAllBathroomByParam_ (107)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllBathroomByParam_ {
      public:
        /** Optional element 'ns1:GetAllBathroomByParam' of XML schema type 'ns1:GetAllBathroomByParam' */
        _ns1__GetAllBathroomByParam *ns1__GetAllBathroomByParam;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllBathroomByParam_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllBathroomByParam_; }
        /** Constructor with member initializations */
        __ns1__GetAllBathroomByParam_() : ns1__GetAllBathroomByParam() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllBathroomByParam_ * SOAP_FMAC2 soap_instantiate___ns1__GetAllBathroomByParam_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:2574 */
#ifndef SOAP_TYPE___ns1__GetAllHandrailByParam_
#define SOAP_TYPE___ns1__GetAllHandrailByParam_ (109)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllHandrailByParam_ {
      public:
        /** Optional element 'ns1:GetAllHandrailByParam' of XML schema type 'ns1:GetAllHandrailByParam' */
        _ns1__GetAllHandrailByParam *ns1__GetAllHandrailByParam;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllHandrailByParam_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllHandrailByParam_; }
        /** Constructor with member initializations */
        __ns1__GetAllHandrailByParam_() : ns1__GetAllHandrailByParam() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllHandrailByParam_ * SOAP_FMAC2 soap_instantiate___ns1__GetAllHandrailByParam_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:2645 */
#ifndef SOAP_TYPE___ns1__GetAllAirconditionerByParam_
#define SOAP_TYPE___ns1__GetAllAirconditionerByParam_ (111)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetAllAirconditionerByParam_ {
      public:
        /** Optional element 'ns1:GetAllAirconditionerByParam' of XML schema type 'ns1:GetAllAirconditionerByParam' */
        _ns1__GetAllAirconditionerByParam *ns1__GetAllAirconditionerByParam;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAllAirconditionerByParam_ */
        long soap_type() const { return SOAP_TYPE___ns1__GetAllAirconditionerByParam_; }
        /** Constructor with member initializations */
        __ns1__GetAllAirconditionerByParam_() : ns1__GetAllAirconditionerByParam() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetAllAirconditionerByParam_ * SOAP_FMAC2 soap_instantiate___ns1__GetAllAirconditionerByParam_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:2716 */
#ifndef SOAP_TYPE___ns1__CadFileDownload_
#define SOAP_TYPE___ns1__CadFileDownload_ (113)
/* Wrapper: */
struct SOAP_CMAC __ns1__CadFileDownload_ {
      public:
        /** Optional element 'ns1:CadFileDownload' of XML schema type 'ns1:CadFileDownload' */
        _ns1__CadFileDownload *ns1__CadFileDownload;
      public:
        /** Return unique type id SOAP_TYPE___ns1__CadFileDownload_ */
        long soap_type() const { return SOAP_TYPE___ns1__CadFileDownload_; }
        /** Constructor with member initializations */
        __ns1__CadFileDownload_() : ns1__CadFileDownload() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__CadFileDownload_ * SOAP_FMAC2 soap_instantiate___ns1__CadFileDownload_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:2787 */
#ifndef SOAP_TYPE___ns1__CadImgDownload_
#define SOAP_TYPE___ns1__CadImgDownload_ (115)
/* Wrapper: */
struct SOAP_CMAC __ns1__CadImgDownload_ {
      public:
        /** Optional element 'ns1:CadImgDownload' of XML schema type 'ns1:CadImgDownload' */
        _ns1__CadImgDownload *ns1__CadImgDownload;
      public:
        /** Return unique type id SOAP_TYPE___ns1__CadImgDownload_ */
        long soap_type() const { return SOAP_TYPE___ns1__CadImgDownload_; }
        /** Constructor with member initializations */
        __ns1__CadImgDownload_() : ns1__CadImgDownload() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__CadImgDownload_ * SOAP_FMAC2 soap_instantiate___ns1__CadImgDownload_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* .\SunacCADService2.h:3238 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (116)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* .\SunacCADService2.h:3238 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (117)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* .\SunacCADService2.h:3238 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (119)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* .\SunacCADService2.h:3238 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (122)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* .\SunacCADService2.h:3238 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (123)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* double has binding name 'double' for type 'xsd:double' */
#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (37)
#endif

/* std::wstring has binding name 'std__wstring' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__wstring
#define SOAP_TYPE_std__wstring (34)
#endif

/* _ns1__CadImgDownloadResponse has binding name '_ns1__CadImgDownloadResponse' for type '' */
#ifndef SOAP_TYPE__ns1__CadImgDownloadResponse
#define SOAP_TYPE__ns1__CadImgDownloadResponse (33)
#endif

/* _ns1__CadImgDownload has binding name '_ns1__CadImgDownload' for type '' */
#ifndef SOAP_TYPE__ns1__CadImgDownload
#define SOAP_TYPE__ns1__CadImgDownload (32)
#endif

/* _ns1__CadFileDownloadResponse has binding name '_ns1__CadFileDownloadResponse' for type '' */
#ifndef SOAP_TYPE__ns1__CadFileDownloadResponse
#define SOAP_TYPE__ns1__CadFileDownloadResponse (31)
#endif

/* _ns1__CadFileDownload has binding name '_ns1__CadFileDownload' for type '' */
#ifndef SOAP_TYPE__ns1__CadFileDownload
#define SOAP_TYPE__ns1__CadFileDownload (30)
#endif

/* _ns1__GetAllAirconditionerByParamResponse has binding name '_ns1__GetAllAirconditionerByParamResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllAirconditionerByParamResponse
#define SOAP_TYPE__ns1__GetAllAirconditionerByParamResponse (29)
#endif

/* _ns1__GetAllAirconditionerByParam has binding name '_ns1__GetAllAirconditionerByParam' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllAirconditionerByParam
#define SOAP_TYPE__ns1__GetAllAirconditionerByParam (28)
#endif

/* _ns1__GetAllHandrailByParamResponse has binding name '_ns1__GetAllHandrailByParamResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllHandrailByParamResponse
#define SOAP_TYPE__ns1__GetAllHandrailByParamResponse (27)
#endif

/* _ns1__GetAllHandrailByParam has binding name '_ns1__GetAllHandrailByParam' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllHandrailByParam
#define SOAP_TYPE__ns1__GetAllHandrailByParam (26)
#endif

/* _ns1__GetAllBathroomByParamResponse has binding name '_ns1__GetAllBathroomByParamResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllBathroomByParamResponse
#define SOAP_TYPE__ns1__GetAllBathroomByParamResponse (25)
#endif

/* _ns1__GetAllBathroomByParam has binding name '_ns1__GetAllBathroomByParam' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllBathroomByParam
#define SOAP_TYPE__ns1__GetAllBathroomByParam (24)
#endif

/* _ns1__GetAllBathroomResponse has binding name '_ns1__GetAllBathroomResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllBathroomResponse
#define SOAP_TYPE__ns1__GetAllBathroomResponse (23)
#endif

/* _ns1__GetAllBathroom has binding name '_ns1__GetAllBathroom' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllBathroom
#define SOAP_TYPE__ns1__GetAllBathroom (22)
#endif

/* _ns1__GetAllKitchenParamResponse has binding name '_ns1__GetAllKitchenParamResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllKitchenParamResponse
#define SOAP_TYPE__ns1__GetAllKitchenParamResponse (21)
#endif

/* _ns1__GetAllKitchenParam has binding name '_ns1__GetAllKitchenParam' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllKitchenParam
#define SOAP_TYPE__ns1__GetAllKitchenParam (20)
#endif

/* _ns1__GetAllKitchenResponse has binding name '_ns1__GetAllKitchenResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllKitchenResponse
#define SOAP_TYPE__ns1__GetAllKitchenResponse (19)
#endif

/* _ns1__GetAllKitchen has binding name '_ns1__GetAllKitchen' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllKitchen
#define SOAP_TYPE__ns1__GetAllKitchen (18)
#endif

/* _ns1__GetAllDoorByParamResponse has binding name '_ns1__GetAllDoorByParamResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllDoorByParamResponse
#define SOAP_TYPE__ns1__GetAllDoorByParamResponse (17)
#endif

/* _ns1__GetAllDoorByParam has binding name '_ns1__GetAllDoorByParam' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllDoorByParam
#define SOAP_TYPE__ns1__GetAllDoorByParam (16)
#endif

/* _ns1__GetAllDoorResponse has binding name '_ns1__GetAllDoorResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllDoorResponse
#define SOAP_TYPE__ns1__GetAllDoorResponse (15)
#endif

/* _ns1__GetAllDoor has binding name '_ns1__GetAllDoor' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllDoor
#define SOAP_TYPE__ns1__GetAllDoor (14)
#endif

/* _ns1__GetWindowsResponse has binding name '_ns1__GetWindowsResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetWindowsResponse
#define SOAP_TYPE__ns1__GetWindowsResponse (13)
#endif

/* _ns1__GetWindows has binding name '_ns1__GetWindows' for type '' */
#ifndef SOAP_TYPE__ns1__GetWindows
#define SOAP_TYPE__ns1__GetWindows (12)
#endif

/* _ns1__GetAllWindowsResponse has binding name '_ns1__GetAllWindowsResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllWindowsResponse
#define SOAP_TYPE__ns1__GetAllWindowsResponse (11)
#endif

/* _ns1__GetAllWindows has binding name '_ns1__GetAllWindows' for type '' */
#ifndef SOAP_TYPE__ns1__GetAllWindows
#define SOAP_TYPE__ns1__GetAllWindows (10)
#endif

/* _ns1__StandardDesignAttributeResponse has binding name '_ns1__StandardDesignAttributeResponse' for type '' */
#ifndef SOAP_TYPE__ns1__StandardDesignAttributeResponse
#define SOAP_TYPE__ns1__StandardDesignAttributeResponse (9)
#endif

/* _ns1__StandardDesignAttribute has binding name '_ns1__StandardDesignAttribute' for type '' */
#ifndef SOAP_TYPE__ns1__StandardDesignAttribute
#define SOAP_TYPE__ns1__StandardDesignAttribute (8)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (123)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (122)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (119)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (117)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (116)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (125)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (124)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (118)
#endif

/* _ns1__CadImgDownload * has binding name 'PointerTo_ns1__CadImgDownload' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__CadImgDownload
#define SOAP_TYPE_PointerTo_ns1__CadImgDownload (86)
#endif

/* _ns1__CadFileDownload * has binding name 'PointerTo_ns1__CadFileDownload' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__CadFileDownload
#define SOAP_TYPE_PointerTo_ns1__CadFileDownload (82)
#endif

/* _ns1__GetAllAirconditionerByParam * has binding name 'PointerTo_ns1__GetAllAirconditionerByParam' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetAllAirconditionerByParam
#define SOAP_TYPE_PointerTo_ns1__GetAllAirconditionerByParam (78)
#endif

/* _ns1__GetAllHandrailByParam * has binding name 'PointerTo_ns1__GetAllHandrailByParam' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetAllHandrailByParam
#define SOAP_TYPE_PointerTo_ns1__GetAllHandrailByParam (74)
#endif

/* _ns1__GetAllBathroomByParam * has binding name 'PointerTo_ns1__GetAllBathroomByParam' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetAllBathroomByParam
#define SOAP_TYPE_PointerTo_ns1__GetAllBathroomByParam (70)
#endif

/* _ns1__GetAllBathroom * has binding name 'PointerTo_ns1__GetAllBathroom' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetAllBathroom
#define SOAP_TYPE_PointerTo_ns1__GetAllBathroom (66)
#endif

/* _ns1__GetAllKitchenParam * has binding name 'PointerTo_ns1__GetAllKitchenParam' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetAllKitchenParam
#define SOAP_TYPE_PointerTo_ns1__GetAllKitchenParam (62)
#endif

/* _ns1__GetAllKitchen * has binding name 'PointerTo_ns1__GetAllKitchen' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetAllKitchen
#define SOAP_TYPE_PointerTo_ns1__GetAllKitchen (58)
#endif

/* _ns1__GetAllDoorByParam * has binding name 'PointerTo_ns1__GetAllDoorByParam' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetAllDoorByParam
#define SOAP_TYPE_PointerTo_ns1__GetAllDoorByParam (54)
#endif

/* _ns1__GetAllDoor * has binding name 'PointerTo_ns1__GetAllDoor' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetAllDoor
#define SOAP_TYPE_PointerTo_ns1__GetAllDoor (50)
#endif

/* _ns1__GetWindows * has binding name 'PointerTo_ns1__GetWindows' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetWindows
#define SOAP_TYPE_PointerTo_ns1__GetWindows (46)
#endif

/* _ns1__GetAllWindows * has binding name 'PointerTo_ns1__GetAllWindows' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetAllWindows
#define SOAP_TYPE_PointerTo_ns1__GetAllWindows (42)
#endif

/* _ns1__StandardDesignAttribute * has binding name 'PointerTo_ns1__StandardDesignAttribute' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__StandardDesignAttribute
#define SOAP_TYPE_PointerTo_ns1__StandardDesignAttribute (38)
#endif

/* std::wstring * has binding name 'PointerTostd__wstring' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostd__wstring
#define SOAP_TYPE_PointerTostd__wstring (35)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
