// Created by Microsoft (R) C/C++ Compiler Version 10.00.30319.01 (e334b8b0).
//
// c:\users\tz05\desktop\tangenttest\temp\x64\debug\tch9_com19.tli
//
// Wrapper implementations for Win32 type library C:\Users\Tz05\Desktop\DLL\DLL\TArch2014\x64\tch9_com19.dll
// compiler-generated file created 03/30/20 at 09:36:21 - DO NOT EDIT!

#pragma once

//
// interface IComBalcony wrapper method implementations
//

inline double IComBalcony::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComBalcony::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComBalcony::GetRailWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_RailWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComBalcony::PutRailWidth ( double pVal ) {
    HRESULT _hr = put_RailWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComBalcony::GetRailHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_RailHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComBalcony::PutRailHeight ( double pVal ) {
    HRESULT _hr = put_RailHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComBalcony::GetRailClipInsu ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RailClipInsu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComBalcony::PutRailClipInsu ( _bstr_t pVal ) {
    HRESULT _hr = put_RailClipInsu(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComBalcony::GetSlabThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComBalcony::PutSlabThickness ( double pVal ) {
    HRESULT _hr = put_SlabThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComBalcony::GetGirderThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_GirderThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComBalcony::PutGirderThickness ( double pVal ) {
    HRESULT _hr = put_GirderThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComBalcony::GetHasGirder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasGirder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComBalcony::PutHasGirder ( _bstr_t pVal ) {
    HRESULT _hr = put_HasGirder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComBalcony::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComBalcony::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComBalcony::GetGroundLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_GroundLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComBalcony::PutGroundLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_GroundLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComBalcony::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComBalcony::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComBalcony::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComBalcony::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComStair wrapper method implementations
//

inline double IComStair::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComStair::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComStair::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComStair::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComStair::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComStair::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComArcStair wrapper method implementations
//

inline double IComArcStair::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComArcStair::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComArcStair::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComArcStair::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComArcStair::GetViewType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComArcStair::PutViewType ( _bstr_t pVal ) {
    HRESULT _hr = put_ViewType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComArcStair::GetElev ( ) {
    double _result = 0;
    HRESULT _hr = get_Elev(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComArcStair::PutElev ( double pVal ) {
    HRESULT _hr = put_Elev(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComArcStair::GetStairHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StairHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComArcStair::PutStairHeight ( double pVal ) {
    HRESULT _hr = put_StairHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComArcStair::GetRadiusIn ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiusIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComArcStair::PutRadiusIn ( double pVal ) {
    HRESULT _hr = put_RadiusIn(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComArcStair::GetRadiusOut ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiusOut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComArcStair::PutRadiusOut ( double pVal ) {
    HRESULT _hr = put_RadiusOut(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComArcStair::GetStartAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_StartAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComArcStair::PutStartAngle ( double pVal ) {
    HRESULT _hr = put_StartAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComArcStair::GetSweepAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_SweepAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComArcStair::PutSweepAngle ( double pVal ) {
    HRESULT _hr = put_SweepAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IComArcStair::GetStepNum ( ) {
    long _result = 0;
    HRESULT _hr = get_StepNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComArcStair::PutStepNum ( long pVal ) {
    HRESULT _hr = put_StepNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComArcStair::GetStepHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StepHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComArcStair::PutStepHeight ( double pVal ) {
    HRESULT _hr = put_StepHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComArcStair::GetHasLBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasLBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComArcStair::PutHasLBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_HasLBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComArcStair::GetHasRBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasRBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComArcStair::PutHasRBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_HasRBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComArcStair::GetBeamHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComArcStair::PutBeamHeight ( double pVal ) {
    HRESULT _hr = put_BeamHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComArcStair::GetBeamThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComArcStair::PutBeamThickness ( double pVal ) {
    HRESULT _hr = put_BeamThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComArcStair::GetBeamLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_BeamLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComArcStair::PutBeamLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_BeamLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComArcStair::GetStepLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_StepLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComArcStair::PutStepLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_StepLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComArcStair::GetStartSide ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComArcStair::PutStartSide ( _bstr_t pVal ) {
    HRESULT _hr = put_StartSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComArcStair::GetAsAscent ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AsAscent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComArcStair::PutAsAscent ( _bstr_t pVal ) {
    HRESULT _hr = put_AsAscent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComArcStair::GetHasAscentSlab ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasAscentSlab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComArcStair::PutHasAscentSlab ( _bstr_t pVal ) {
    HRESULT _hr = put_HasAscentSlab(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComArcStair::GetOnGround ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnGround(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComArcStair::PutOnGround ( _bstr_t pVal ) {
    HRESULT _hr = put_OnGround(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComArcStair::GetPaoType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PaoType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComArcStair::PutPaoType ( _bstr_t pVal ) {
    HRESULT _hr = put_PaoType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComArcStair::GetAlongWall ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlongWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComArcStair::PutAlongWall ( _bstr_t pVal ) {
    HRESULT _hr = put_AlongWall(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComArcStair::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComArcStair::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComAscent wrapper method implementations
//

inline double IComAscent::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAscent::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAscent::GetHasSlant ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasSlant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAscent::PutHasSlant ( _bstr_t pVal ) {
    HRESULT _hr = put_HasSlant(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAscent::GetAlignment_Right ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Alignment_Right(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAscent::PutAlignment_Right ( _bstr_t pVal ) {
    HRESULT _hr = put_Alignment_Right(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAscent::GetAlignment_Left ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Alignment_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAscent::PutAlignment_Left ( _bstr_t pVal ) {
    HRESULT _hr = put_Alignment_Left(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAscent::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAscent::PutWidth ( double pVal ) {
    HRESULT _hr = put_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAscent::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAscent::PutHeight ( double pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAscent::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAscent::PutLength ( double pVal ) {
    HRESULT _hr = put_Length(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAscent::GetIndent ( ) {
    double _result = 0;
    HRESULT _hr = get_Indent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAscent::PutIndent ( double pVal ) {
    HRESULT _hr = put_Indent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAscent::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAscent::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAscent::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAscent::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAscent::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAscent::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComCamera wrapper method implementations
//

inline double IComCamera::GetCameraElev ( ) {
    double _result = 0;
    HRESULT _hr = get_CameraElev(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCamera::PutCameraElev ( double pVal ) {
    HRESULT _hr = put_CameraElev(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCamera::GetTargetElev ( ) {
    double _result = 0;
    HRESULT _hr = get_TargetElev(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCamera::PutTargetElev ( double pVal ) {
    HRESULT _hr = put_TargetElev(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCamera::GetLens ( ) {
    double _result = 0;
    HRESULT _hr = get_Lens(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCamera::PutLens ( double pVal ) {
    HRESULT _hr = put_Lens(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCamera::GetPerspective ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Perspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCamera::PutPerspective ( _bstr_t pVal ) {
    HRESULT _hr = put_Perspective(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCamera::GetActive ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCamera::PutActive ( _bstr_t pVal ) {
    HRESULT _hr = put_Active(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCamera::GetLongitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCamera::PutLongitude ( double pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCamera::GetLatitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCamera::PutLatitude ( double pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCamera::GetFrontClipOn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FrontClipOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCamera::PutFrontClipOn ( _bstr_t pVal ) {
    HRESULT _hr = put_FrontClipOn(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCamera::GetBackClipOn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BackClipOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCamera::PutBackClipOn ( _bstr_t pVal ) {
    HRESULT _hr = put_BackClipOn(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCamera::GetFrontClipAtEye ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FrontClipAtEye(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCamera::PutFrontClipAtEye ( _bstr_t pVal ) {
    HRESULT _hr = put_FrontClipAtEye(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCamera::GetFrontClipDist ( ) {
    double _result = 0;
    HRESULT _hr = get_FrontClipDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCamera::PutFrontClipDist ( double pVal ) {
    HRESULT _hr = put_FrontClipDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCamera::GetBackClipDist ( ) {
    double _result = 0;
    HRESULT _hr = get_BackClipDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCamera::PutBackClipDist ( double pVal ) {
    HRESULT _hr = put_BackClipDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCamera::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCamera::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCamera::GetCameraType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CameraType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline double IComCamera::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCamera::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComColumn wrapper method implementations
//

inline double IComColumn::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComColumn::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComColumn::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComColumn::PutHeight ( double pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComColumn::GetRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComColumn::PutRotation ( double pVal ) {
    HRESULT _hr = put_Rotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComColumn::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComColumn::PutWidth ( double pVal ) {
    HRESULT _hr = put_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComColumn::GetDeep ( ) {
    double _result = 0;
    HRESULT _hr = get_Deep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComColumn::PutDeep ( double pVal ) {
    HRESULT _hr = put_Deep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComColumn::GetDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_Diameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComColumn::PutDiameter ( double pVal ) {
    HRESULT _hr = put_Diameter(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComColumn::GetSideLength ( ) {
    double _result = 0;
    HRESULT _hr = get_SideLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComColumn::PutSideLength ( double pVal ) {
    HRESULT _hr = put_SideLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComColumn::GetSectionArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SectionArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComColumn::GetSectionPerimeter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SectionPerimeter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComColumn::GetSideArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SideArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComColumn::GetVolume ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComColumn::GetSectionShapeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SectionShapeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComColumn::PutSectionShapeText ( _bstr_t pVal ) {
    HRESULT _hr = put_SectionShapeText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComColumn::GetTopFace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TopFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComColumn::PutTopFace ( _bstr_t pVal ) {
    HRESULT _hr = put_TopFace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComColumn::GetBottomFace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BottomFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComColumn::PutBottomFace ( _bstr_t pVal ) {
    HRESULT _hr = put_BottomFace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComColumn::GetHatchLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_HatchLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComColumn::PutHatchLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_HatchLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComColumn::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComColumn::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComColumn::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComColumn::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComColumn::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComColumn::PutType ( _bstr_t pVal ) {
    HRESULT _hr = put_Type(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComColumn::GetStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComColumn::PutStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_Style(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComColumn::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComColumn::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComColumn::GetInsulate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Insulate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComColumn::PutInsulate ( _bstr_t pVal ) {
    HRESULT _hr = put_Insulate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComColumn::GetInsulateThick ( ) {
    double _result = 0;
    HRESULT _hr = get_InsulateThick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComColumn::PutInsulateThick ( double pVal ) {
    HRESULT _hr = put_InsulateThick(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComColumn::GetInsulateLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_InsulateLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComColumn::PutInsulateLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_InsulateLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComCurveMesh wrapper method implementations
//

inline double IComCurveMesh::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurveMesh::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurveMesh::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurveMesh::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurveMesh::GetViewType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurveMesh::PutViewType ( _bstr_t pVal ) {
    HRESULT _hr = put_ViewType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurveMesh::GetPathLength ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PathLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComCurveMesh::GetSideArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SideArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComCurveMesh::GetShapePerimeter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShapePerimeter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComCurveMesh::GetVolume ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IComCurveMesh::GetVertex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IComCurveMesh::PutVertex ( const _variant_t & pVal ) {
    HRESULT _hr = put_Vertex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurveMesh::GetShapeVisibility ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShapeVisibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurveMesh::PutShapeVisibility ( _bstr_t pVal ) {
    HRESULT _hr = put_ShapeVisibility(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurveMesh::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurveMesh::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComCurveStair wrapper method implementations
//

inline double IComCurveStair::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurveStair::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurveStair::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurveStair::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurveStair::GetViewType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurveStair::PutViewType ( _bstr_t pVal ) {
    HRESULT _hr = put_ViewType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurveStair::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurveStair::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurveStair::GetStairHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StairHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurveStair::PutStairHeight ( double pVal ) {
    HRESULT _hr = put_StairHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IComCurveStair::GetStepNum ( ) {
    long _result = 0;
    HRESULT _hr = get_StepNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurveStair::PutStepNum ( long pVal ) {
    HRESULT _hr = put_StepNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurveStair::GetStepHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StepHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurveStair::PutStepHeight ( double pVal ) {
    HRESULT _hr = put_StepHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurveStair::GetHasLBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasLBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurveStair::PutHasLBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_HasLBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurveStair::GetHasRBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasRBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurveStair::PutHasRBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_HasRBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurveStair::GetBeamHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurveStair::PutBeamHeight ( double pVal ) {
    HRESULT _hr = put_BeamHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurveStair::GetBeamThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurveStair::PutBeamThickness ( double pVal ) {
    HRESULT _hr = put_BeamThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCurveStair::GetBeamLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_BeamLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurveStair::PutBeamLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_BeamLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCurveStair::GetStepLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_StepLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurveStair::PutStepLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_StepLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurveStair::GetPaoType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PaoType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurveStair::PutPaoType ( _bstr_t pVal ) {
    HRESULT _hr = put_PaoType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurveStair::GetAsAscent ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AsAscent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurveStair::PutAsAscent ( _bstr_t pVal ) {
    HRESULT _hr = put_AsAscent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurveStair::GetHasAscentSlab ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasAscentSlab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurveStair::PutHasAscentSlab ( _bstr_t pVal ) {
    HRESULT _hr = put_HasAscentSlab(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurveStair::GetOnGround ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnGround(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurveStair::PutOnGround ( _bstr_t pVal ) {
    HRESULT _hr = put_OnGround(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurveStair::GetAlongWall ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlongWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurveStair::PutAlongWall ( _bstr_t pVal ) {
    HRESULT _hr = put_AlongWall(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurveStair::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurveStair::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComHandRail wrapper method implementations
//

inline double IComHandRail::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComHandRail::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComHandRail::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComHandRail::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComHandRail::GetViewType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComHandRail::PutViewType ( _bstr_t pVal ) {
    HRESULT _hr = put_ViewType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComHandRail::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComHandRail::PutHeight ( double pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComHandRail::GetThickness ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComHandRail::PutThickness ( _bstr_t pVal ) {
    HRESULT _hr = put_Thickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComHandRail::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComHandRail::PutWidth ( double pVal ) {
    HRESULT _hr = put_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IComHandRail::GetVertex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IComHandRail::PutVertex ( const _variant_t & pVal ) {
    HRESULT _hr = put_Vertex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComHandRail::GetAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComHandRail::PutAlignment ( _bstr_t pVal ) {
    HRESULT _hr = put_Alignment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComHandRail::GetShape ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComHandRail::PutShape ( _bstr_t pVal ) {
    HRESULT _hr = put_Shape(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComHandRail::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComHandRail::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComLineStair wrapper method implementations
//

inline double IComLineStair::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComLineStair::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComLineStair::GetRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComLineStair::PutRotation ( double pVal ) {
    HRESULT _hr = put_Rotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComLineStair::GetStairHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StairHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComLineStair::PutStairHeight ( double pVal ) {
    HRESULT _hr = put_StairHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComLineStair::GetStairWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StairWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComLineStair::PutStairWidth ( double pVal ) {
    HRESULT _hr = put_StairWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IComLineStair::GetStepNum ( ) {
    long _result = 0;
    HRESULT _hr = get_StepNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComLineStair::PutStepNum ( long pVal ) {
    HRESULT _hr = put_StepNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComLineStair::GetStepHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StepHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComLineStair::PutStepHeight ( double pVal ) {
    HRESULT _hr = put_StepHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComLineStair::GetStepWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StepWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComLineStair::PutStepWidth ( double pVal ) {
    HRESULT _hr = put_StepWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComLineStair::GetHasLBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasLBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComLineStair::PutHasLBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_HasLBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComLineStair::GetHasRBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasRBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComLineStair::PutHasRBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_HasRBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComLineStair::GetBeamHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComLineStair::PutBeamHeight ( double pVal ) {
    HRESULT _hr = put_BeamHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComLineStair::GetBeamThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComLineStair::PutBeamThickness ( double pVal ) {
    HRESULT _hr = put_BeamThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComLineStair::GetBeamLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_BeamLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComLineStair::PutBeamLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_BeamLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComLineStair::GetStepLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_StepLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComLineStair::PutStepLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_StepLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComLineStair::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComLineStair::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComLineStair::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComLineStair::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComLineStair::GetViewCtrl ( ) {
    short _result = 0;
    HRESULT _hr = get_ViewCtrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComLineStair::PutViewCtrl ( short pVal ) {
    HRESULT _hr = put_ViewCtrl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComLineStair::GetAsAscent ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AsAscent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComLineStair::PutAsAscent ( _bstr_t pVal ) {
    HRESULT _hr = put_AsAscent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComLineStair::GetHasAscentSlab ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasAscentSlab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComLineStair::PutHasAscentSlab ( _bstr_t pVal ) {
    HRESULT _hr = put_HasAscentSlab(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComLineStair::GetOnGround ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnGround(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComLineStair::PutOnGround ( _bstr_t pVal ) {
    HRESULT _hr = put_OnGround(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComLineStair::GetAlongWall ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlongWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComLineStair::PutAlongWall ( _bstr_t pVal ) {
    HRESULT _hr = put_AlongWall(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComLineStair::GetPaoType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PaoType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComLineStair::PutPaoType ( _bstr_t pVal ) {
    HRESULT _hr = put_PaoType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComOpening wrapper method implementations
//

inline double IComOpening::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpening::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpening::GetWinSill ( ) {
    double _result = 0;
    HRESULT _hr = get_WinSill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutWinSill ( double pVal ) {
    HRESULT _hr = put_WinSill(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpening::GetDoorSill ( ) {
    double _result = 0;
    HRESULT _hr = get_DoorSill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutDoorSill ( double pVal ) {
    HRESULT _hr = put_DoorSill(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpening::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutHeight ( double pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpening::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutWidth ( double pVal ) {
    HRESULT _hr = put_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpening::GetBayThick ( ) {
    double _result = 0;
    HRESULT _hr = get_BayThick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutBayThick ( double pVal ) {
    HRESULT _hr = put_BayThick(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpening::GetSlabThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutSlabThickness ( double pVal ) {
    HRESULT _hr = put_SlabThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpening::GetUFrame ( ) {
    double _result = 0;
    HRESULT _hr = get_UFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutUFrame ( double pVal ) {
    HRESULT _hr = put_UFrame(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpening::GetVFrame ( ) {
    double _result = 0;
    HRESULT _hr = get_VFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutVFrame ( double pVal ) {
    HRESULT _hr = put_VFrame(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpening::GetOutlineArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlineArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline double IComOpening::GetOutlineLength ( ) {
    double _result = 0;
    HRESULT _hr = get_OutlineLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IComOpening::GetLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpening::PutLabel ( _bstr_t pVal ) {
    HRESULT _hr = put_Label(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpening::GetTextHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutTextHeight ( double pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpening::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpening::PutTextStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_TextStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpening::GetHideLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HideLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpening::PutHideLabel ( _bstr_t pVal ) {
    HRESULT _hr = put_HideLabel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComOpening::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComOpening::GetGlassLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_GlassLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutGlassLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_GlassLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComOpening::GetFrameLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_FrameLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutFrameLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_FrameLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComOpening::GetSlabLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_SlabLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutSlabLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_SlabLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpening::GetProStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpening::PutProStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_ProStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpening::GetLeftSlab ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LeftSlab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpening::PutLeftSlab ( _bstr_t pVal ) {
    HRESULT _hr = put_LeftSlab(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpening::GetRightSlab ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RightSlab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpening::PutRightSlab ( _bstr_t pVal ) {
    HRESULT _hr = put_RightSlab(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpening::GetProWinSlabWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_ProWinSlabWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutProWinSlabWidth ( double pVal ) {
    HRESULT _hr = put_ProWinSlabWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpening::GetProWinSlabInsuThick ( ) {
    double _result = 0;
    HRESULT _hr = get_ProWinSlabInsuThick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutProWinSlabInsuThick ( double pVal ) {
    HRESULT _hr = put_ProWinSlabInsuThick(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpening::GetSlot ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Slot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpening::PutSlot ( _bstr_t pVal ) {
    HRESULT _hr = put_Slot(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpening::GetSlotMaterial ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlotMaterial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpening::PutSlotMaterial ( _bstr_t pVal ) {
    HRESULT _hr = put_SlotMaterial(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpening::GetSlotExt ( ) {
    double _result = 0;
    HRESULT _hr = get_SlotExt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutSlotExt ( double pVal ) {
    HRESULT _hr = put_SlotExt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpening::GetSlotWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_SlotWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutSlotWidth ( double pVal ) {
    HRESULT _hr = put_SlotWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpening::GetSlotInsuThick ( ) {
    double _result = 0;
    HRESULT _hr = get_SlotInsuThick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutSlotInsuThick ( double pVal ) {
    HRESULT _hr = put_SlotInsuThick(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpening::GetSlotInsuCap ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlotInsuCap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpening::PutSlotInsuCap ( _bstr_t pVal ) {
    HRESULT _hr = put_SlotInsuCap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpening::GetGetKind ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GetKind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComOpening::GetGetSubKind ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GetSubKind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpening::PutGetSubKind ( _bstr_t pVal ) {
    HRESULT _hr = put_GetSubKind(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpening::GetUpLevel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UpLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpening::PutUpLevel ( _bstr_t pVal ) {
    HRESULT _hr = put_UpLevel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComOpening::GetDoorLine ( ) {
    short _result = 0;
    HRESULT _hr = get_DoorLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutDoorLine ( short pVal ) {
    HRESULT _hr = put_DoorLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpening::GetLineOffsetDist ( ) {
    double _result = 0;
    HRESULT _hr = get_LineOffsetDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpening::PutLineOffsetDist ( double pVal ) {
    HRESULT _hr = put_LineOffsetDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpening::GetStructure ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Structure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpening::PutStructure ( _bstr_t pVal ) {
    HRESULT _hr = put_Structure(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpening::GetExtShading ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpening::PutExtShading ( _bstr_t pVal ) {
    HRESULT _hr = put_ExtShading(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpening::GetAreaRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_AreaRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IComOpening::GetConductivity ( ) {
    double _result = 0;
    HRESULT _hr = get_Conductivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IComOpening::GetUsage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Usage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpening::PutUsage ( _bstr_t pVal ) {
    HRESULT _hr = put_Usage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpening::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpening::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComRail wrapper method implementations
//

inline double IComRail::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRail::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRail::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRail::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRail::GetViewType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRail::PutViewType ( _bstr_t pVal ) {
    HRESULT _hr = put_ViewType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRail::GetUnitWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_UnitWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRail::PutUnitWidth ( double pVal ) {
    HRESULT _hr = put_UnitWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRail::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRail::PutWidth ( double pVal ) {
    HRESULT _hr = put_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRail::GetAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRail::PutAlignment ( _bstr_t pVal ) {
    HRESULT _hr = put_Alignment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRail::GetAutoExpand ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AutoExpand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRail::PutAutoExpand ( _bstr_t pVal ) {
    HRESULT _hr = put_AutoExpand(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRail::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRail::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComRectStair wrapper method implementations
//

inline double IComRectStair::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectStair::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComRectStair::GetViewCtrl ( ) {
    short _result = 0;
    HRESULT _hr = get_ViewCtrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutViewCtrl ( short pVal ) {
    HRESULT _hr = put_ViewCtrl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectStair::GetStairHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StairHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutStairHeight ( double pVal ) {
    HRESULT _hr = put_StairHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectStair::GetSpaceWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_SpaceWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutSpaceWidth ( double pVal ) {
    HRESULT _hr = put_SpaceWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectStair::GetStairWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StairWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutStairWidth ( double pVal ) {
    HRESULT _hr = put_StairWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectStair::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComRectStair::GetStepTotalNum ( ) {
    short _result = 0;
    HRESULT _hr = get_StepTotalNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutStepTotalNum ( short pVal ) {
    HRESULT _hr = put_StepTotalNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComRectStair::GetStepNum1 ( ) {
    short _result = 0;
    HRESULT _hr = get_StepNum1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutStepNum1 ( short pVal ) {
    HRESULT _hr = put_StepNum1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComRectStair::GetStepNum2 ( ) {
    short _result = 0;
    HRESULT _hr = get_StepNum2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutStepNum2 ( short pVal ) {
    HRESULT _hr = put_StepNum2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectStair::GetStepHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StepHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutStepHeight ( double pVal ) {
    HRESULT _hr = put_StepHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectStair::GetStepWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StepWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutStepWidth ( double pVal ) {
    HRESULT _hr = put_StepWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectStair::GetRailWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_RailWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutRailWidth ( double pVal ) {
    HRESULT _hr = put_RailWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectStair::GetRailDistToSide ( ) {
    double _result = 0;
    HRESULT _hr = get_RailDistToSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutRailDistToSide ( double pVal ) {
    HRESULT _hr = put_RailDistToSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetRailMake ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RailMake(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutRailMake ( _bstr_t pVal ) {
    HRESULT _hr = put_RailMake(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetHasOutRail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasOutRail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutHasOutRail ( _bstr_t pVal ) {
    HRESULT _hr = put_HasOutRail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetHasOutHandRail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasOutHandRail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutHasOutHandRail ( _bstr_t pVal ) {
    HRESULT _hr = put_HasOutHandRail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetRailConnection ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RailConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutRailConnection ( _bstr_t pVal ) {
    HRESULT _hr = put_RailConnection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetPlatType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlatType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutPlatType ( _bstr_t pVal ) {
    HRESULT _hr = put_PlatType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetHasSlab ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasSlab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutHasSlab ( _bstr_t pVal ) {
    HRESULT _hr = put_HasSlab(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectStair::GetSlabSize ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutSlabSize ( double pVal ) {
    HRESULT _hr = put_SlabSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectStair::GetSlabThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutSlabThickness ( double pVal ) {
    HRESULT _hr = put_SlabThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetLeftBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LeftBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutLeftBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_LeftBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetRightBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RightBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutRightBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_RightBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectStair::GetBeamHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutBeamHeight ( double pVal ) {
    HRESULT _hr = put_BeamHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectStair::GetBeamThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutBeamThickness ( double pVal ) {
    HRESULT _hr = put_BeamThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComRectStair::GetStepLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_StepLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutStepLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_StepLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComRectStair::GetBeamLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_BeamLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutBeamLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_BeamLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComRectStair::GetRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_RailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_RailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComRectStair::GetHandRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_HandRailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutHandRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_HandRailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComRectStair::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComRectStair::GetArrowLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_ArrowLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutArrowLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_ArrowLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetAsAcsent ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AsAcsent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutAsAcsent ( _bstr_t pVal ) {
    HRESULT _hr = put_AsAcsent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetHasAcsentSlab ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasAcsentSlab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutHasAcsentSlab ( _bstr_t pVal ) {
    HRESULT _hr = put_HasAcsentSlab(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetOnGround ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnGround(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutOnGround ( _bstr_t pVal ) {
    HRESULT _hr = put_OnGround(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutAlignment ( _bstr_t pVal ) {
    HRESULT _hr = put_Alignment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetStartSide ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutStartSide ( _bstr_t pVal ) {
    HRESULT _hr = put_StartSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetStairFlag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StairFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutStairFlag ( _bstr_t pVal ) {
    HRESULT _hr = put_StairFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetHasArrow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasArrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutHasArrow ( _bstr_t pVal ) {
    HRESULT _hr = put_HasArrow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectStair::GetFirstRailDist ( ) {
    double _result = 0;
    HRESULT _hr = get_FirstRailDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutFirstRailDist ( double pVal ) {
    HRESULT _hr = put_FirstRailDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectStair::GetEndRailDist ( ) {
    double _result = 0;
    HRESULT _hr = get_EndRailDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutEndRailDist ( double pVal ) {
    HRESULT _hr = put_EndRailDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetTextHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutTextHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetTextUp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutTextUp ( _bstr_t pVal ) {
    HRESULT _hr = put_TextUp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectStair::GetTextDown ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectStair::PutTextDown ( _bstr_t pVal ) {
    HRESULT _hr = put_TextDown(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectStair::GetSectHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_SectHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutSectHeight ( double pVal ) {
    HRESULT _hr = put_SectHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComRectStair::GetSectStepNum ( ) {
    short _result = 0;
    HRESULT _hr = get_SectStepNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectStair::PutSectStepNum ( short pVal ) {
    HRESULT _hr = put_SectStepNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComSlab wrapper method implementations
//

inline double IComSlab::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSlab::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSlab::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSlab::PutThickness ( double pVal ) {
    HRESULT _hr = put_Thickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSlab::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSlab::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSlab::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSlab::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSlab::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSlab::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComSlopeRoof wrapper method implementations
//

inline double IComSlopeRoof::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSlopeRoof::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IComSlopeRoof::GetVertex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IComSlopeRoof::PutVertex ( const _variant_t & pVal ) {
    HRESULT _hr = put_Vertex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSlopeRoof::GetSlopeAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_SlopeAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSlopeRoof::PutSlopeAngle ( double pVal ) {
    HRESULT _hr = put_SlopeAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSlopeRoof::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSlopeRoof::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSlopeRoof::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSlopeRoof::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSlopeRoof::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSlopeRoof::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComSpace wrapper method implementations
//

inline double IComSpace::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSpace::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSpace::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSpace::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetDispMode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DispMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutDispMode ( _bstr_t pVal ) {
    HRESULT _hr = put_DispMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Code(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutCode ( _bstr_t pVal ) {
    HRESULT _hr = put_Code(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetShowCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShowCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutShowCode ( _bstr_t pVal ) {
    HRESULT _hr = put_ShowCode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSpace::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSpace::PutHeight ( double pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSpace::GetFloorThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_FloorThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSpace::PutFloorThickness ( double pVal ) {
    HRESULT _hr = put_FloorThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSpace::GetStuccoThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_StuccoThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSpace::PutStuccoThickness ( double pVal ) {
    HRESULT _hr = put_StuccoThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSpace::GetKickboard ( ) {
    double _result = 0;
    HRESULT _hr = get_Kickboard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IComSpace::GetPerimeter ( ) {
    double _result = 0;
    HRESULT _hr = get_Perimeter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IComSpace::GetUseVolume ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UseVolume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComSpace::GetUseArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UseArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComSpace::GetOccuArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OccuArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComSpace::GetWallSurfArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WallSurfArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComSpace::GetExtWallArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtWallArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComSpace::GetExtWinArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtWinArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComSpace::GetExtDoorArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtDoorArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComSpace::GetAreaComputeType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AreaComputeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutAreaComputeType ( _bstr_t pVal ) {
    HRESULT _hr = put_AreaComputeType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComSpace::GetHatchLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_HatchLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSpace::PutHatchLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_HatchLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetMaskFlag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MaskFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutMaskFlag ( _bstr_t pVal ) {
    HRESULT _hr = put_MaskFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetFloor3D ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Floor3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutFloor3D ( _bstr_t pVal ) {
    HRESULT _hr = put_Floor3D(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetNameType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutNameType ( _bstr_t pVal ) {
    HRESULT _hr = put_NameType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetName2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutName2 ( _bstr_t pVal ) {
    HRESULT _hr = put_Name2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutShowName ( _bstr_t pVal ) {
    HRESULT _hr = put_ShowName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSpace::GetTextHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSpace::PutTextHeight ( double pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSpace::GetTextRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_TextRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSpace::PutTextRotation ( double pVal ) {
    HRESULT _hr = put_TextRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutTextStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_TextStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetShowArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShowArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutShowArea ( _bstr_t pVal ) {
    HRESULT _hr = put_ShowArea(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetFloorType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FloorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutFloorType ( _bstr_t pVal ) {
    HRESULT _hr = put_FloorType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetStructure ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Structure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutStructure ( _bstr_t pVal ) {
    HRESULT _hr = put_Structure(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSpace::GetConductivity ( ) {
    double _result = 0;
    HRESULT _hr = get_Conductivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IComSpace::GetHasRoof ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasRoof(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutHasRoof ( _bstr_t pVal ) {
    HRESULT _hr = put_HasRoof(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetStructure2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Structure2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutStructure2 ( _bstr_t pVal ) {
    HRESULT _hr = put_Structure2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSpace::GetConductivity2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Conductivity2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IComSpace::GetInertiaIndex2 ( ) {
    double _result = 0;
    HRESULT _hr = get_InertiaIndex2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IComSpace::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetShowOutLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShowOutLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutShowOutLine ( _bstr_t pVal ) {
    HRESULT _hr = put_ShowOutLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetShowHatch ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShowHatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutShowHatch ( _bstr_t pVal ) {
    HRESULT _hr = put_ShowHatch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetHatchStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HatchStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutHatchStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_HatchStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IComSpace::GetHatchColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HatchColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IComSpace::PutHatchColor ( const _variant_t & pVal ) {
    HRESULT _hr = put_HatchColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetHatchScale ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HatchScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutHatchScale ( _bstr_t pVal ) {
    HRESULT _hr = put_HatchScale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSpace::GetHatchAngle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HatchAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSpace::PutHatchAngle ( _bstr_t pVal ) {
    HRESULT _hr = put_HatchAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComStep wrapper method implementations
//

inline double IComStep::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComStep::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComStep::GetStepWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StepWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComStep::PutStepWidth ( double pVal ) {
    HRESULT _hr = put_StepWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComStep::GetStepHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StepHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComStep::PutStepHeight ( double pVal ) {
    HRESULT _hr = put_StepHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IComStep::GetStepNum ( ) {
    long _result = 0;
    HRESULT _hr = get_StepNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComStep::PutStepNum ( long pVal ) {
    HRESULT _hr = put_StepNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComStep::GetAllStepHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_AllStepHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IComStep::GetBaseFace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BaseFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComStep::PutBaseFace ( _bstr_t pVal ) {
    HRESULT _hr = put_BaseFace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComStep::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComStep::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComStep::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComStep::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComStep::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComStep::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComStep::GetDownStep ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DownStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComStep::PutDownStep ( _bstr_t pVal ) {
    HRESULT _hr = put_DownStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComVertSlab wrapper method implementations
//

inline double IComVertSlab::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComVertSlab::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComVertSlab::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComVertSlab::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComVertSlab::GetViewType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComVertSlab::PutViewType ( _bstr_t pVal ) {
    HRESULT _hr = put_ViewType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComVertSlab::GetStartPoint ( ) {
    double _result = 0;
    HRESULT _hr = get_StartPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComVertSlab::PutStartPoint ( double pVal ) {
    HRESULT _hr = put_StartPoint(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComVertSlab::GetEndPoint ( ) {
    double _result = 0;
    HRESULT _hr = get_EndPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComVertSlab::PutEndPoint ( double pVal ) {
    HRESULT _hr = put_EndPoint(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComVertSlab::GetHeightS ( ) {
    double _result = 0;
    HRESULT _hr = get_HeightS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComVertSlab::PutHeightS ( double pVal ) {
    HRESULT _hr = put_HeightS(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComVertSlab::GetHeightE ( ) {
    double _result = 0;
    HRESULT _hr = get_HeightE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComVertSlab::PutHeightE ( double pVal ) {
    HRESULT _hr = put_HeightE(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComVertSlab::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComVertSlab::PutThickness ( double pVal ) {
    HRESULT _hr = put_Thickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComVertSlab::GetVolume ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComVertSlab::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComVertSlab::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComWall wrapper method implementations
//

inline double IComWall::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWall::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComWall::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWall::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComWall::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWall::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComWall::GetLeftWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_LeftWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWall::PutLeftWidth ( double pVal ) {
    HRESULT _hr = put_LeftWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComWall::GetRightWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_RightWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWall::PutRightWidth ( double pVal ) {
    HRESULT _hr = put_RightWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComWall::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWall::PutHeight ( double pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComWall::GetIsArc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IsArc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComWall::GetLSurfaceArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LSurfaceArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComWall::GetRSurfaceArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RSurfaceArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComWall::GetHoleArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HoleArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComWall::GetVolume ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComWall::GetHoleVolume ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HoleVolume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline ACAD_LAYER IComWall::GetLeftLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_LeftLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWall::PutLeftLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_LeftLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComWall::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWall::PutRadius ( double pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComWall::GetIsExternal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IsExternal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComWall::GetTopFace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TopFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComWall::PutTopFace ( _bstr_t pVal ) {
    HRESULT _hr = put_TopFace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComWall::GetBottomFace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BottomFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComWall::PutBottomFace ( _bstr_t pVal ) {
    HRESULT _hr = put_BottomFace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComWall::GetEndClose ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EndClose(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComWall::PutEndClose ( _bstr_t pVal ) {
    HRESULT _hr = put_EndClose(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComWall::GetUsage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Usage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComWall::PutUsage ( _bstr_t pVal ) {
    HRESULT _hr = put_Usage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComWall::GetStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComWall::PutStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_Style(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComWall::GetRightLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_RightLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWall::PutRightLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_RightLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComWall::GetHatchLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_HatchLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWall::PutHatchLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_HatchLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComWall::GetSurfLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_SurfLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWall::PutSurfLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_SurfLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComWall::GetLeftSpace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LeftSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComWall::GetRightSpace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RightSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComWall::GetEnUsage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EnUsage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComWall::PutEnUsage ( _bstr_t pVal ) {
    HRESULT _hr = put_EnUsage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComWall::GetIOFeature ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IOFeature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComWall::PutIOFeature ( _bstr_t pVal ) {
    HRESULT _hr = put_IOFeature(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComWall::GetStructure ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Structure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComWall::PutStructure ( _bstr_t pVal ) {
    HRESULT _hr = put_Structure(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComWall::GetAreaRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_AreaRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IComWall::GetConductivity ( ) {
    double _result = 0;
    HRESULT _hr = get_Conductivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IComWall::GetInertiaIndex ( ) {
    double _result = 0;
    HRESULT _hr = get_InertiaIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IComWall::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComWall::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComWall::GetTotalWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_TotalWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IComWall::GetInsulate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Insulate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComWall::PutInsulate ( _bstr_t pVal ) {
    HRESULT _hr = put_Insulate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComWall::GetInsuThick ( ) {
    double _result = 0;
    HRESULT _hr = get_InsuThick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWall::PutInsuThick ( double pVal ) {
    HRESULT _hr = put_InsuThick(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComWall::GetLeftInsuThick ( ) {
    double _result = 0;
    HRESULT _hr = get_LeftInsuThick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWall::PutLeftInsuThick ( double pVal ) {
    HRESULT _hr = put_LeftInsuThick(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComWall::GetRightInsuThick ( ) {
    double _result = 0;
    HRESULT _hr = get_RightInsuThick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWall::PutRightInsuThick ( double pVal ) {
    HRESULT _hr = put_RightInsuThick(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComWall::GetStemInsulate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StemInsulate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComWall::PutStemInsulate ( _bstr_t pVal ) {
    HRESULT _hr = put_StemInsulate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComWall::GetInsulateClose ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InsulateClose(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComWall::PutInsulateClose ( _bstr_t pVal ) {
    HRESULT _hr = put_InsulateClose(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComWallPatch wrapper method implementations
//

inline double IComWallPatch::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWallPatch::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComWallPatch::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWallPatch::PutHeight ( double pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComWallPatch::GetVolume ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComWallPatch::GetArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline ACAD_LAYER IComWallPatch::GetLayerHatch ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_LayerHatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWallPatch::PutLayerHatch ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_LayerHatch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComWallPatch::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWallPatch::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComWallPatch::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWallPatch::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComWallPatch::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComWallPatch::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComWallPatch::GetSurfLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_SurfLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWallPatch::PutSurfLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_SurfLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComWallPatch::GetInsulate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Insulate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComWallPatch::PutInsulate ( _bstr_t pVal ) {
    HRESULT _hr = put_Insulate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComWallPatch::GetInsuThick ( ) {
    double _result = 0;
    HRESULT _hr = get_InsuThick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComWallPatch::PutInsuThick ( double pVal ) {
    HRESULT _hr = put_InsuThick(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComLineText wrapper method implementations
//

inline _bstr_t IComLineText::GetHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComLineText::PutHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComLineText::GetAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComLineText::PutAlignment ( _bstr_t pVal ) {
    HRESULT _hr = put_Alignment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComLineText::GetRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComLineText::PutRotation ( double pVal ) {
    HRESULT _hr = put_Rotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComLineText::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComLineText::PutTextStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_TextStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComLineText::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComLineText::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComLineText::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComLineText::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComLineText::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComLineText::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComMutiText wrapper method implementations
//

inline _bstr_t IComMutiText::GetHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMutiText::PutHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMutiText::GetAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMutiText::PutAlignment ( _bstr_t pVal ) {
    HRESULT _hr = put_Alignment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMutiText::GetRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMutiText::PutRotation ( double pVal ) {
    HRESULT _hr = put_Rotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMutiText::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMutiText::PutTextStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_TextStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMutiText::GetPageWidth ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PageWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMutiText::PutPageWidth ( _bstr_t pVal ) {
    HRESULT _hr = put_PageWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMutiText::GetLineSpace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LineSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMutiText::PutLineSpace ( _bstr_t pVal ) {
    HRESULT _hr = put_LineSpace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMutiText::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMutiText::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMutiText::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMutiText::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComSymbComposing wrapper method implementations
//

inline _bstr_t IComSymbComposing::GetHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbComposing::PutHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbComposing::GetAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbComposing::PutAlignment ( _bstr_t pVal ) {
    HRESULT _hr = put_Alignment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbComposing::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbComposing::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbComposing::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbComposing::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbComposing::GetTextSide ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbComposing::PutTextSide ( _bstr_t pVal ) {
    HRESULT _hr = put_TextSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbComposing::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbComposing::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbComposing::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbComposing::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComSymbComposing::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbComposing::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSymbComposing::GetTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_TextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbComposing::PutTextColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_TextColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbComposing::GetParagraphSpace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParagraphSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbComposing::PutParagraphSpace ( _bstr_t pVal ) {
    HRESULT _hr = put_ParagraphSpace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbComposing::GetLineSpace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LineSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbComposing::PutLineSpace ( _bstr_t pVal ) {
    HRESULT _hr = put_LineSpace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbComposing::GetText2BaseRatio ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text2BaseRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbComposing::PutText2BaseRatio ( _bstr_t pVal ) {
    HRESULT _hr = put_Text2BaseRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbComposing::GetTextType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbComposing::PutTextType ( _bstr_t pVal ) {
    HRESULT _hr = put_TextType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbComposing::GetTextBaseLen ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextBaseLen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbComposing::PutTextBaseLen ( _bstr_t pVal ) {
    HRESULT _hr = put_TextBaseLen(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbComposing::GetDist2Line ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dist2Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbComposing::PutDist2Line ( _bstr_t pVal ) {
    HRESULT _hr = put_Dist2Line(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbComposing::GetPageWidth ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PageWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbComposing::PutPageWidth ( _bstr_t pVal ) {
    HRESULT _hr = put_PageWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbComposing::GetSpace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Space(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbComposing::PutSpace ( _bstr_t pVal ) {
    HRESULT _hr = put_Space(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbComposing::GetCirPointSize ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CirPointSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbComposing::PutCirPointSize ( _bstr_t pVal ) {
    HRESULT _hr = put_CirPointSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComSymbArrow wrapper method implementations
//

inline _bstr_t IComSymbArrow::GetHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbArrow::PutHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbArrow::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbArrow::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbArrow::GetAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbArrow::PutAlignment ( _bstr_t pVal ) {
    HRESULT _hr = put_Alignment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbArrow::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbArrow::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbArrow::GetText2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbArrow::PutText2 ( _bstr_t pVal ) {
    HRESULT _hr = put_Text2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbArrow::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbArrow::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbArrow::GetArrowSize ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ArrowSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbArrow::PutArrowSize ( _bstr_t pVal ) {
    HRESULT _hr = put_ArrowSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbArrow::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbArrow::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComSymbArrow::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbArrow::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSymbArrow::GetTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_TextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbArrow::PutTextColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_TextColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbArrow::GetText2BaseRatio ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text2BaseRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbArrow::PutText2BaseRatio ( _bstr_t pVal ) {
    HRESULT _hr = put_Text2BaseRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComSymbDrawingIndex wrapper method implementations
//

inline _bstr_t IComSymbDrawingIndex::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbDrawingIndex::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbDrawingIndex::GetDrawingLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DrawingLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbDrawingIndex::PutDrawingLabel ( _bstr_t pVal ) {
    HRESULT _hr = put_DrawingLabel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbDrawingIndex::GetIndexLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IndexLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbDrawingIndex::PutIndexLabel ( _bstr_t pVal ) {
    HRESULT _hr = put_IndexLabel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbDrawingIndex::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbDrawingIndex::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbDrawingIndex::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbDrawingIndex::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbDrawingIndex::GetDiameter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Diameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbDrawingIndex::PutDiameter ( _bstr_t pVal ) {
    HRESULT _hr = put_Diameter(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbDrawingIndex::GetLineWeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LineWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbDrawingIndex::PutLineWeight ( _bstr_t pVal ) {
    HRESULT _hr = put_LineWeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComSymbDrawingIndex::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbDrawingIndex::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSymbDrawingIndex::GetTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_TextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbDrawingIndex::PutTextColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_TextColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbDrawingIndex::GetShowScale ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShowScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbDrawingIndex::PutShowScale ( _bstr_t pVal ) {
    HRESULT _hr = put_ShowScale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbDrawingIndex::GetScaleText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScaleText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbDrawingIndex::PutScaleText ( _bstr_t pVal ) {
    HRESULT _hr = put_ScaleText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbDrawingIndex::GetScaleStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScaleStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbDrawingIndex::PutScaleStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_ScaleStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbDrawingIndex::GetScaleHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScaleHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbDrawingIndex::PutScaleHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_ScaleHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbDrawingIndex::GetOldStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OldStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbDrawingIndex::PutOldStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_OldStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbDrawingIndex::GetTextRatio ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbDrawingIndex::PutTextRatio ( _bstr_t pVal ) {
    HRESULT _hr = put_TextRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComSymbMultiLeader wrapper method implementations
//

inline _bstr_t IComSymbMultiLeader::GetHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbMultiLeader::PutHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbMultiLeader::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbMultiLeader::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbMultiLeader::GetArrowStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ArrowStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbMultiLeader::PutArrowStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_ArrowStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbMultiLeader::GetUpText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UpText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbMultiLeader::PutUpText ( _bstr_t pVal ) {
    HRESULT _hr = put_UpText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbMultiLeader::GetDownText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DownText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbMultiLeader::PutDownText ( _bstr_t pVal ) {
    HRESULT _hr = put_DownText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbMultiLeader::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbMultiLeader::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbMultiLeader::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbMultiLeader::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComSymbMultiLeader::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbMultiLeader::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSymbMultiLeader::GetTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_TextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbMultiLeader::PutTextColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_TextColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbMultiLeader::GetText2BaseRatio ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text2BaseRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbMultiLeader::PutText2BaseRatio ( _bstr_t pVal ) {
    HRESULT _hr = put_Text2BaseRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbMultiLeader::GetAlignType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlignType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbMultiLeader::PutAlignType ( _bstr_t pVal ) {
    HRESULT _hr = put_AlignType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbMultiLeader::GetUpTextType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UpTextType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbMultiLeader::PutUpTextType ( _bstr_t pVal ) {
    HRESULT _hr = put_UpTextType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbMultiLeader::GetUpPageWidth ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UpPageWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbMultiLeader::PutUpPageWidth ( _bstr_t pVal ) {
    HRESULT _hr = put_UpPageWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbMultiLeader::GetDownTextType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DownTextType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbMultiLeader::PutDownTextType ( _bstr_t pVal ) {
    HRESULT _hr = put_DownTextType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbMultiLeader::GetDownPageWidth ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DownPageWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbMultiLeader::PutDownPageWidth ( _bstr_t pVal ) {
    HRESULT _hr = put_DownPageWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComSymbElev wrapper method implementations
//

inline _bstr_t IComSymbElev::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbElev::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbElev::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbElev::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbElev::GetTextHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbElev::PutTextHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbElev::GetText2BaseRatio ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text2BaseRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbElev::PutText2BaseRatio ( _bstr_t pVal ) {
    HRESULT _hr = put_Text2BaseRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbElev::GetFloorsOnLeftSide ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FloorsOnLeftSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbElev::PutFloorsOnLeftSide ( _bstr_t pVal ) {
    HRESULT _hr = put_FloorsOnLeftSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbElev::GetHasBaseLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasBaseLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbElev::PutHasBaseLine ( _bstr_t pVal ) {
    HRESULT _hr = put_HasBaseLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbElev::GetHasLeader ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasLeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbElev::PutHasLeader ( _bstr_t pVal ) {
    HRESULT _hr = put_HasLeader(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbElev::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbElev::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbElev::GetPrecision ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Precision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbElev::PutPrecision ( _bstr_t pVal ) {
    HRESULT _hr = put_Precision(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbElev::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbElev::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbElev::GetFillMode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FillMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbElev::PutFillMode ( _bstr_t pVal ) {
    HRESULT _hr = put_FillMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbElev::GetSitePlanElevMode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SitePlanElevMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbElev::PutSitePlanElevMode ( _bstr_t pVal ) {
    HRESULT _hr = put_SitePlanElevMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComSymbElev::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbElev::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSymbElev::GetTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_TextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbElev::PutTextColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_TextColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComSymbIndex wrapper method implementations
//

inline double IComSymbIndex::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbIndex::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbIndex::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbIndex::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbIndex::GetHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbIndex::PutHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbIndex::GetDimStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbIndex::PutDimStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_DimStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbIndex::GetUpText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UpText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbIndex::PutUpText ( _bstr_t pVal ) {
    HRESULT _hr = put_UpText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbIndex::GetDownText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DownText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbIndex::PutDownText ( _bstr_t pVal ) {
    HRESULT _hr = put_DownText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbIndex::GetUpTextType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UpTextType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbIndex::PutUpTextType ( _bstr_t pVal ) {
    HRESULT _hr = put_UpTextType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbIndex::GetUpPageWidth ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UpPageWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbIndex::PutUpPageWidth ( _bstr_t pVal ) {
    HRESULT _hr = put_UpPageWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbIndex::GetDownTextType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DownTextType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbIndex::PutDownTextType ( _bstr_t pVal ) {
    HRESULT _hr = put_DownTextType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbIndex::GetDownPageWidth ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DownPageWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbIndex::PutDownPageWidth ( _bstr_t pVal ) {
    HRESULT _hr = put_DownPageWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbIndex::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbIndex::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbIndex::GetDrawingLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DrawingLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbIndex::PutDrawingLabel ( _bstr_t pVal ) {
    HRESULT _hr = put_DrawingLabel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbIndex::GetIndexLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IndexLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbIndex::PutIndexLabel ( _bstr_t pVal ) {
    HRESULT _hr = put_IndexLabel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSymbIndex::GetTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_TextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbIndex::PutTextColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_TextColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbIndex::GetOldStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OldStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbIndex::PutOldStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_OldStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbIndex::GetDiameter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Diameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbIndex::PutDiameter ( _bstr_t pVal ) {
    HRESULT _hr = put_Diameter(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbIndex::GetTextRatio ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbIndex::PutTextRatio ( _bstr_t pVal ) {
    HRESULT _hr = put_TextRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbIndex::GetText2BaseRatio ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text2BaseRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbIndex::PutText2BaseRatio ( _bstr_t pVal ) {
    HRESULT _hr = put_Text2BaseRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbIndex::GetAlignType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlignType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbIndex::PutAlignType ( _bstr_t pVal ) {
    HRESULT _hr = put_AlignType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbIndex::GetExtendLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtendLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbIndex::PutExtendLine ( _bstr_t pVal ) {
    HRESULT _hr = put_ExtendLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComSymbIndex::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbIndex::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComSymbSection wrapper method implementations
//

inline _bstr_t IComSymbSection::GetHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbSection::PutHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbSection::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbSection::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbSection::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbSection::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbSection::GetIsShowIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IsShowIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbSection::PutIsShowIndex ( _bstr_t pVal ) {
    HRESULT _hr = put_IsShowIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbSection::GetDrawHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DrawHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbSection::PutDrawHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_DrawHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbSection::GetDrawText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DrawText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbSection::PutDrawText ( _bstr_t pVal ) {
    HRESULT _hr = put_DrawText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbSection::GetDrawStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DrawStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbSection::PutDrawStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_DrawStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbSection::GetDrawLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DrawLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbSection::PutDrawLocal ( _bstr_t pVal ) {
    HRESULT _hr = put_DrawLocal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbSection::GetDrawDirect ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DrawDirect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbSection::PutDrawDirect ( _bstr_t pVal ) {
    HRESULT _hr = put_DrawDirect(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbSection::GetDrawModulus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DrawModulus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbSection::PutDrawModulus ( _bstr_t pVal ) {
    HRESULT _hr = put_DrawModulus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbSection::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbSection::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbSection::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbSection::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComSymbSection::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbSection::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSymbSection::GetTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_TextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbSection::PutTextColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_TextColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComSymbSection::GetSectionType ( ) {
    short _result = 0;
    HRESULT _hr = get_SectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbSection::PutSectionType ( short pVal ) {
    HRESULT _hr = put_SectionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComSymbNorthThumb wrapper method implementations
//

inline _bstr_t IComSymbNorthThumb::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbNorthThumb::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbNorthThumb::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbNorthThumb::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSymbNorthThumb::GetTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_TextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbNorthThumb::PutTextColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_TextColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbNorthThumb::GetHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbNorthThumb::PutHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbNorthThumb::GetRotation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbNorthThumb::PutRotation ( _bstr_t pVal ) {
    HRESULT _hr = put_Rotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbNorthThumb::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbNorthThumb::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbNorthThumb::GetRadius ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbNorthThumb::PutRadius ( _bstr_t pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbNorthThumb::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbNorthThumb::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComDimension wrapper method implementations
//

inline _bstr_t IComDimension::GetDimStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDimension::PutDimStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_DimStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDimension::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDimension::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDimension::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDimension::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDimension::GetAssociate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Associate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDimension::PutAssociate ( _bstr_t pVal ) {
    HRESULT _hr = put_Associate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComRadiusDim wrapper method implementations
//

inline _bstr_t IComRadiusDim::GetDimStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRadiusDim::PutDimStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_DimStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRadiusDim::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRadiusDim::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRadiusDim::GetDesText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DesText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRadiusDim::PutDesText ( _bstr_t pVal ) {
    HRESULT _hr = put_DesText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRadiusDim::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComRadiusDim::GetRadiusType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RadiusType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRadiusDim::PutRadiusType ( _bstr_t pVal ) {
    HRESULT _hr = put_RadiusType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRadiusDim::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRadiusDim::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComAxisLabel wrapper method implementations
//

inline _bstr_t IComAxisLabel::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAxisLabel::PutTextStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_TextStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAxisLabel::GetRadius ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAxisLabel::PutRadius ( _bstr_t pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAxisLabel::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAxisLabel::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComAxisLabel::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAxisLabel::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAxisLabel::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAxisLabel::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAxisLabel::GetLeaderLen1 ( ) {
    double _result = 0;
    HRESULT _hr = get_LeaderLen1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAxisLabel::PutLeaderLen1 ( double pVal ) {
    HRESULT _hr = put_LeaderLen1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAxisLabel::GetLeaderLen2 ( ) {
    double _result = 0;
    HRESULT _hr = get_LeaderLen2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAxisLabel::PutLeaderLen2 ( double pVal ) {
    HRESULT _hr = put_LeaderLen2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAxisLabel::GetCircleTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CircleTextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAxisLabel::PutCircleTextStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_CircleTextStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAxisLabel::GetTextRatio ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAxisLabel::PutTextRatio ( _bstr_t pVal ) {
    HRESULT _hr = put_TextRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAxisLabel::GetHideAxisText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HideAxisText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAxisLabel::PutHideAxisText ( _bstr_t pVal ) {
    HRESULT _hr = put_HideAxisText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComSymbRupture wrapper method implementations
//

inline short IComSymbRupture::GetRuptureNum ( ) {
    short _result = 0;
    HRESULT _hr = get_RuptureNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbRupture::PutRuptureNum ( short pVal ) {
    HRESULT _hr = put_RuptureNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbRupture::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbRupture::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbRupture::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbRupture::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComSymbCoord wrapper method implementations
//

inline _bstr_t IComSymbCoord::GetTextHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbCoord::PutTextHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbCoord::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbCoord::PutTextStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_TextStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSymbCoord::GetTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_TextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbCoord::PutTextColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_TextColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbCoord::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbCoord::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbCoord::GetXValue ( ) {
    double _result = 0;
    HRESULT _hr = get_XValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbCoord::PutXValue ( double pVal ) {
    HRESULT _hr = put_XValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}



inline _variant_t IComSymbCoord::GetLocation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IComSymbCoord::PutLocation ( const _variant_t & pVal ) {
    HRESULT _hr = put_Location(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbCoord::GetStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbCoord::PutStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_Style(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbCoord::GetPrecision ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Precision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbCoord::PutPrecision ( _bstr_t pVal ) {
    HRESULT _hr = put_Precision(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbCoord::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbCoord::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbCoord::GetText2BaseRatio ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text2BaseRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbCoord::PutText2BaseRatio ( _bstr_t pVal ) {
    HRESULT _hr = put_Text2BaseRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComSheet wrapper method implementations
//

inline double IComSheet::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSheet::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSheet::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSheet::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetAllTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AllTextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutAllTextStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_AllTextStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetAllTextSize ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AllTextSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutAllTextSize ( _bstr_t pVal ) {
    HRESULT _hr = put_AllTextSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSheet::GetAllTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_AllTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSheet::PutAllTextColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_AllTextColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetAllSpaceFactor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AllSpaceFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutAllSpaceFactor ( _bstr_t pVal ) {
    HRESULT _hr = put_AllSpaceFactor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetAllHAlign ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AllHAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutAllHAlign ( _bstr_t pVal ) {
    HRESULT _hr = put_AllHAlign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetAllVAlign ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AllVAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutAllVAlign ( _bstr_t pVal ) {
    HRESULT _hr = put_AllVAlign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetAllAutoLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AllAutoLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutAllAutoLine ( _bstr_t pVal ) {
    HRESULT _hr = put_AllAutoLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetAllInherit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AllInherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutAllInherit ( _bstr_t pVal ) {
    HRESULT _hr = put_AllInherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetHasHLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasHLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutHasHLine ( _bstr_t pVal ) {
    HRESULT _hr = put_HasHLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSheet::GetHLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_HLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSheet::PutHLineColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_HLineColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetHLineStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutHLineStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_HLineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetHLineWidth ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HLineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutHLineWidth ( _bstr_t pVal ) {
    HRESULT _hr = put_HLineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetAllRowHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AllRowHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutAllRowHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_AllRowHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetAllRowHeightProperty ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AllRowHeightProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutAllRowHeightProperty ( _bstr_t pVal ) {
    HRESULT _hr = put_AllRowHeightProperty(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetAllHLineInherit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AllHLineInherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutAllHLineInherit ( _bstr_t pVal ) {
    HRESULT _hr = put_AllHLineInherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetHasVLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasVLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutHasVLine ( _bstr_t pVal ) {
    HRESULT _hr = put_HasVLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSheet::GetVLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_VLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSheet::PutVLineColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_VLineColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetVLineStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutVLineStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_VLineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetVLineWidth ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VLineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutVLineWidth ( _bstr_t pVal ) {
    HRESULT _hr = put_VLineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetAllVLineInherit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AllVLineInherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutAllVLineInherit ( _bstr_t pVal ) {
    HRESULT _hr = put_AllVLineInherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetHasBorder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasBorder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutHasBorder ( _bstr_t pVal ) {
    HRESULT _hr = put_HasBorder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSheet::GetBorderColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSheet::PutBorderColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_BorderColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetBorderStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutBorderStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_BorderStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetBorderWidth ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BorderWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutBorderWidth ( _bstr_t pVal ) {
    HRESULT _hr = put_BorderWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutTitle ( _bstr_t pVal ) {
    HRESULT _hr = put_Title(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetTitleTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TitleTextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutTitleTextStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_TitleTextStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetTitleTextSize ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TitleTextSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutTitleTextSize ( _bstr_t pVal ) {
    HRESULT _hr = put_TitleTextSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSheet::GetTitleTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_TitleTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSheet::PutTitleTextColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_TitleTextColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetTitleSpaceFactor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TitleSpaceFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutTitleSpaceFactor ( _bstr_t pVal ) {
    HRESULT _hr = put_TitleSpaceFactor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetTitleHAlign ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TitleHAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutTitleHAlign ( _bstr_t pVal ) {
    HRESULT _hr = put_TitleHAlign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetTitleVAlign ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TitleVAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutTitleVAlign ( _bstr_t pVal ) {
    HRESULT _hr = put_TitleVAlign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSheet::GetTitleBaseLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_TitleBaseLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSheet::PutTitleBaseLineColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_TitleBaseLineColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetTitleBaseLineStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TitleBaseLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutTitleBaseLineStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_TitleBaseLineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetTitleBaseLineWidth ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TitleBaseLineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutTitleBaseLineWidth ( _bstr_t pVal ) {
    HRESULT _hr = put_TitleBaseLineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetTitleHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TitleHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutTitleHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_TitleHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetTitleOutside ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TitleOutside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutTitleOutside ( _bstr_t pVal ) {
    HRESULT _hr = put_TitleOutside(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetTitleHide ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TitleHide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutTitleHide ( _bstr_t pVal ) {
    HRESULT _hr = put_TitleHide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IComSheet::GetCellRowIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_CellRowIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSheet::PutCellRowIndex ( long pVal ) {
    HRESULT _hr = put_CellRowIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IComSheet::GetCellColIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_CellColIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSheet::PutCellColIndex ( long pVal ) {
    HRESULT _hr = put_CellColIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetCellText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CellText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutCellText ( _bstr_t pVal ) {
    HRESULT _hr = put_CellText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetCellTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CellTextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutCellTextStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_CellTextStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetCellTextSize ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CellTextSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutCellTextSize ( _bstr_t pVal ) {
    HRESULT _hr = put_CellTextSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSheet::GetCellTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_CellTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSheet::PutCellTextColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_CellTextColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetCellSpaceFactor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CellSpaceFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutCellSpaceFactor ( _bstr_t pVal ) {
    HRESULT _hr = put_CellSpaceFactor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetCellHAlign ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CellHAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutCellHAlign ( _bstr_t pVal ) {
    HRESULT _hr = put_CellHAlign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetCellVAlign ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CellVAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutCellVAlign ( _bstr_t pVal ) {
    HRESULT _hr = put_CellVAlign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetCellLinePropertyInherit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CellLinePropertyInherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutCellLinePropertyInherit ( _bstr_t pVal ) {
    HRESULT _hr = put_CellLinePropertyInherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetCellLineWrap ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CellLineWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutCellLineWrap ( _bstr_t pVal ) {
    HRESULT _hr = put_CellLineWrap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComSheet::GetRowNum ( ) {
    short _result = 0;
    HRESULT _hr = get_RowNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IComSheet::GetRowIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_RowIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSheet::PutRowIndex ( long pVal ) {
    HRESULT _hr = put_RowIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetRowHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RowHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutRowHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_RowHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetRowHeightProperty ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RowHeightProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutRowHeightProperty ( _bstr_t pVal ) {
    HRESULT _hr = put_RowHeightProperty(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetRowInheritSheet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RowInheritSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutRowInheritSheet ( _bstr_t pVal ) {
    HRESULT _hr = put_RowInheritSheet(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetRowHasBaseLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RowHasBaseLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutRowHasBaseLine ( _bstr_t pVal ) {
    HRESULT _hr = put_RowHasBaseLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSheet::GetRowHLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_RowHLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSheet::PutRowHLineColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_RowHLineColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetRowHLineStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RowHLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutRowHLineStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_RowHLineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetRowHLineWidth ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RowHLineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutRowHLineWidth ( _bstr_t pVal ) {
    HRESULT _hr = put_RowHLineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetAllRowCellInherit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AllRowCellInherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutAllRowCellInherit ( _bstr_t pVal ) {
    HRESULT _hr = put_AllRowCellInherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IComSheet::GetColNum ( ) {
    long _result = 0;
    HRESULT _hr = get_ColNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IComSheet::GetColIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_ColIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSheet::PutColIndex ( long pVal ) {
    HRESULT _hr = put_ColIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetColWidth ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutColWidth ( _bstr_t pVal ) {
    HRESULT _hr = put_ColWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetColTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColTextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutColTextStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_ColTextStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetColTextSize ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColTextSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutColTextSize ( _bstr_t pVal ) {
    HRESULT _hr = put_ColTextSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSheet::GetColTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_ColTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSheet::PutColTextColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_ColTextColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetColSpaceFactor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColSpaceFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutColSpaceFactor ( _bstr_t pVal ) {
    HRESULT _hr = put_ColSpaceFactor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetColHAlign ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColHAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutColHAlign ( _bstr_t pVal ) {
    HRESULT _hr = put_ColHAlign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetColLinePropertyInherit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColLinePropertyInherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutColLinePropertyInherit ( _bstr_t pVal ) {
    HRESULT _hr = put_ColLinePropertyInherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetColLineWrap ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColLineWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutColLineWrap ( _bstr_t pVal ) {
    HRESULT _hr = put_ColLineWrap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetColAllowDrag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColAllowDrag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutColAllowDrag ( _bstr_t pVal ) {
    HRESULT _hr = put_ColAllowDrag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetColInheritSheet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColInheritSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutColInheritSheet ( _bstr_t pVal ) {
    HRESULT _hr = put_ColInheritSheet(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetColHasRightLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColHasRightLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutColHasRightLine ( _bstr_t pVal ) {
    HRESULT _hr = put_ColHasRightLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSheet::GetColRLineColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_ColRLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSheet::PutColRLineColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_ColRLineColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetColRLineStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColRLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutColRLineStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_ColRLineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetColRLineWidth ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColRLineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutColRLineWidth ( _bstr_t pVal ) {
    HRESULT _hr = put_ColRLineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSheet::GetAllColCellInherit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AllColCellInherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSheet::PutAllColCellInherit ( _bstr_t pVal ) {
    HRESULT _hr = put_AllColCellInherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IComSheet::Create ( short nRowNum, short nColNum ) {
    HRESULT _hr = raw_Create(nRowNum, nColNum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IComSheet::SetCellText ( short Row, short Col, _bstr_t Text ) {
    HRESULT _hr = raw_SetCellText(Row, Col, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IComSheet::Merge ( short StartRow, short StartColumn, short NumRow, short NumColumn ) {
    HRESULT _hr = raw_Merge(StartRow, StartColumn, NumRow, NumColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IComSheet::ExplodeCell ( short Row, short Col ) {
    HRESULT _hr = raw_ExplodeCell(Row, Col);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline short IComSheet::GetRangeRowMax ( short Row, short Column ) {
    short _result = 0;
    HRESULT _hr = get_RangeRowMax(Row, Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IComSheet::GetRangeColumnMax ( short Row, short Column ) {
    short _result = 0;
    HRESULT _hr = get_RangeColumnMax(Row, Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IComSheet::GetRangeRow ( short Row, short Column ) {
    short _result = 0;
    HRESULT _hr = get_RangeRow(Row, Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IComSheet::GetRangeColumn ( short Row, short Column ) {
    short _result = 0;
    HRESULT _hr = get_RangeColumn(Row, Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IComSheet::GetIsRange ( short Row, short Column ) {
    long _result = 0;
    HRESULT _hr = get_IsRange(Row, Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IComSheet::GetText ( short Row, short Column ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(Row, Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short IComSheet::GetColumnNum ( ) {
    short _result = 0;
    HRESULT _hr = get_ColumnNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IComSheet::GetTextColor ( short Row, short Col ) {
    long _result = 0;
    HRESULT _hr = get_TextColor(Row, Col, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSheet::PutTextColor ( short Row, short Col, long pVal ) {
    HRESULT _hr = put_TextColor(Row, Col, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComCurtainWall wrapper method implementations
//

inline double IComCurtainWall::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurtainWall::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurtainWall::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurtainWall::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurtainWall::GetLeftWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_LeftWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurtainWall::PutLeftWidth ( double pVal ) {
    HRESULT _hr = put_LeftWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurtainWall::GetRightWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_RightWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurtainWall::PutRightWidth ( double pVal ) {
    HRESULT _hr = put_RightWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurtainWall::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurtainWall::PutHeight ( double pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurtainWall::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IComCurtainWall::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurtainWall::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurtainWall::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurtainWall::PutRadius ( double pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IComCurtainWall::GetRowNum ( ) {
    long _result = 0;
    HRESULT _hr = get_RowNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IComCurtainWall::GetColNum ( ) {
    long _result = 0;
    HRESULT _hr = get_ColNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IComCurtainWall::GetRowAverage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RowAverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurtainWall::PutRowAverage ( _bstr_t pVal ) {
    HRESULT _hr = put_RowAverage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurtainWall::GetColAverage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColAverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurtainWall::PutColAverage ( _bstr_t pVal ) {
    HRESULT _hr = put_ColAverage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IComCurtainWall::GetRowHeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RowHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IComCurtainWall::PutRowHeight ( const _variant_t & pVal ) {
    HRESULT _hr = put_RowHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IComCurtainWall::GetColWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IComCurtainWall::PutColWidth ( const _variant_t & pVal ) {
    HRESULT _hr = put_ColWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurtainWall::GetURow ( ) {
    double _result = 0;
    HRESULT _hr = get_URow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurtainWall::PutURow ( double pVal ) {
    HRESULT _hr = put_URow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurtainWall::GetVRow ( ) {
    double _result = 0;
    HRESULT _hr = get_VRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurtainWall::PutVRow ( double pVal ) {
    HRESULT _hr = put_VRow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurtainWall::GetUCol ( ) {
    double _result = 0;
    HRESULT _hr = get_UCol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurtainWall::PutUCol ( double pVal ) {
    HRESULT _hr = put_UCol(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurtainWall::GetVCol ( ) {
    double _result = 0;
    HRESULT _hr = get_VCol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurtainWall::PutVCol ( double pVal ) {
    HRESULT _hr = put_VCol(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurtainWall::GetRowHide ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RowHide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurtainWall::PutRowHide ( _bstr_t pVal ) {
    HRESULT _hr = put_RowHide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurtainWall::GetColHide ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColHide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurtainWall::PutColHide ( _bstr_t pVal ) {
    HRESULT _hr = put_ColHide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurtainWall::GetBasePos ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BasePos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurtainWall::PutBasePos ( _bstr_t pVal ) {
    HRESULT _hr = put_BasePos(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurtainWall::GetGlassDist ( ) {
    double _result = 0;
    HRESULT _hr = get_GlassDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurtainWall::PutGlassDist ( double pVal ) {
    HRESULT _hr = put_GlassDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurtainWall::GetFrameDist ( ) {
    double _result = 0;
    HRESULT _hr = get_FrameDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurtainWall::PutFrameDist ( double pVal ) {
    HRESULT _hr = put_FrameDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurtainWall::GetPlaneDisplay ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlaneDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurtainWall::PutPlaneDisplay ( _bstr_t pVal ) {
    HRESULT _hr = put_PlaneDisplay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurtainWall::GetIsArc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IsArc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComCurtainWall::GetTopFrame ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TopFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurtainWall::PutTopFrame ( _bstr_t pVal ) {
    HRESULT _hr = put_TopFrame(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurtainWall::GetBotFrame ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BotFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurtainWall::PutBotFrame ( _bstr_t pVal ) {
    HRESULT _hr = put_BotFrame(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCurtainWall::GetGlassLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_GlassLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurtainWall::PutGlassLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_GlassLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCurtainWall::GetRowLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_RowLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurtainWall::PutRowLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_RowLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCurtainWall::GetColLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_ColLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurtainWall::PutColLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_ColLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurtainWall::GetEnUsage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EnUsage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurtainWall::PutEnUsage ( _bstr_t pVal ) {
    HRESULT _hr = put_EnUsage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurtainWall::GetIOFeature ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IOFeature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurtainWall::PutIOFeature ( _bstr_t pVal ) {
    HRESULT _hr = put_IOFeature(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurtainWall::GetStructure ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Structure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurtainWall::PutStructure ( _bstr_t pVal ) {
    HRESULT _hr = put_Structure(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurtainWall::GetAreaRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_AreaRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IComCurtainWall::GetConductivity ( ) {
    double _result = 0;
    HRESULT _hr = get_Conductivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IComCurtainWall::GetInertiaIndex ( ) {
    double _result = 0;
    HRESULT _hr = get_InertiaIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IComCurtainWall::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurtainWall::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComMultiStair wrapper method implementations
//

inline double IComMultiStair::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiStair::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComMultiStair::GetViewCtrl ( ) {
    short _result = 0;
    HRESULT _hr = get_ViewCtrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutViewCtrl ( short pVal ) {
    HRESULT _hr = put_ViewCtrl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiStair::GetStairHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StairHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutStairHeight ( double pVal ) {
    HRESULT _hr = put_StairHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiStair::GetStairWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StairWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutStairWidth ( double pVal ) {
    HRESULT _hr = put_StairWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiStair::GetSlabThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutSlabThickness ( double pVal ) {
    HRESULT _hr = put_SlabThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiStair::GetElev ( ) {
    double _result = 0;
    HRESULT _hr = get_Elev(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutElev ( double pVal ) {
    HRESULT _hr = put_Elev(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IComMultiStair::GetStepNum ( ) {
    long _result = 0;
    HRESULT _hr = get_StepNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutStepNum ( long pVal ) {
    HRESULT _hr = put_StepNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiStair::GetStepWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StepWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutStepWidth ( double pVal ) {
    HRESULT _hr = put_StepWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiStair::GetStepHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StepHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutStepHeight ( double pVal ) {
    HRESULT _hr = put_StepHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComMultiStair::GetStepLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_StepLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutStepLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_StepLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComMultiStair::GetBeamLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_BeamLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutBeamLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_BeamLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComMultiStair::GetRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_RailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_RailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComMultiStair::GetHandRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_HandRailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutHandRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_HandRailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComMultiStair::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComMultiStair::GetArrowLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_ArrowLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutArrowLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_ArrowLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiStair::GetHasLeftHandRail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasLeftHandRail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiStair::PutHasLeftHandRail ( _bstr_t pVal ) {
    HRESULT _hr = put_HasLeftHandRail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiStair::GetHasRightHandRail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasRightHandRail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiStair::PutHasRightHandRail ( _bstr_t pVal ) {
    HRESULT _hr = put_HasRightHandRail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiStair::GetRailDist ( ) {
    double _result = 0;
    HRESULT _hr = get_RailDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutRailDist ( double pVal ) {
    HRESULT _hr = put_RailDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiStair::GetRailWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_RailWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutRailWidth ( double pVal ) {
    HRESULT _hr = put_RailWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiStair::GetRailHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_RailHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutRailHeight ( double pVal ) {
    HRESULT _hr = put_RailHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiStair::GetRailMake ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RailMake(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiStair::PutRailMake ( _bstr_t pVal ) {
    HRESULT _hr = put_RailMake(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiStair::GetHasLeftBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasLeftBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiStair::PutHasLeftBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_HasLeftBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiStair::GetHasRightBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasRightBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiStair::PutHasRightBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_HasRightBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiStair::GetBeamHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutBeamHeight ( double pVal ) {
    HRESULT _hr = put_BeamHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiStair::GetBeamThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutBeamThickness ( double pVal ) {
    HRESULT _hr = put_BeamThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiStair::GetAsAscent ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AsAscent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiStair::PutAsAscent ( _bstr_t pVal ) {
    HRESULT _hr = put_AsAscent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiStair::GetHasSlant ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasSlant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiStair::PutHasSlant ( _bstr_t pVal ) {
    HRESULT _hr = put_HasSlant(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiStair::GetOnGround ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnGround(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiStair::PutOnGround ( _bstr_t pVal ) {
    HRESULT _hr = put_OnGround(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiStair::GetBasePos ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BasePos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiStair::PutBasePos ( _bstr_t pVal ) {
    HRESULT _hr = put_BasePos(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiStair::GetAlongWall ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlongWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiStair::PutAlongWall ( _bstr_t pVal ) {
    HRESULT _hr = put_AlongWall(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiStair::GetLayerType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LayerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiStair::PutLayerType ( _bstr_t pVal ) {
    HRESULT _hr = put_LayerType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiStair::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiStair::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiStair::GetHasArrow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasArrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiStair::PutHasArrow ( _bstr_t pVal ) {
    HRESULT _hr = put_HasArrow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiStair::GetFirstRailDist ( ) {
    double _result = 0;
    HRESULT _hr = get_FirstRailDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutFirstRailDist ( double pVal ) {
    HRESULT _hr = put_FirstRailDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiStair::GetEndRailDist ( ) {
    double _result = 0;
    HRESULT _hr = get_EndRailDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutEndRailDist ( double pVal ) {
    HRESULT _hr = put_EndRailDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiStair::GetTextHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiStair::PutTextHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiStair::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiStair::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiStair::GetTextUp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiStair::PutTextUp ( _bstr_t pVal ) {
    HRESULT _hr = put_TextUp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiStair::GetTextDown ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiStair::PutTextDown ( _bstr_t pVal ) {
    HRESULT _hr = put_TextDown(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiStair::GetSectHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_SectHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutSectHeight ( double pVal ) {
    HRESULT _hr = put_SectHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComMultiStair::GetSectStepNum ( ) {
    short _result = 0;
    HRESULT _hr = get_SectStepNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiStair::PutSectStepNum ( short pVal ) {
    HRESULT _hr = put_SectStepNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComCornerWin wrapper method implementations
//

inline double IComCornerWin::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutHeight ( double pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetSillHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_SillHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutSillHeight ( double pVal ) {
    HRESULT _hr = put_SillHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetWidth1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Width1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutWidth1 ( double pVal ) {
    HRESULT _hr = put_Width1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetWidth2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Width2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutWidth2 ( double pVal ) {
    HRESULT _hr = put_Width2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetFrameHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_FrameHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutFrameHeight ( double pVal ) {
    HRESULT _hr = put_FrameHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetFrameThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_FrameThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutFrameThickness ( double pVal ) {
    HRESULT _hr = put_FrameThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerWin::GetIsProtrudeWin ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IsProtrudeWin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerWin::PutIsProtrudeWin ( _bstr_t pVal ) {
    HRESULT _hr = put_IsProtrudeWin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetFrontDist ( ) {
    double _result = 0;
    HRESULT _hr = get_FrontDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutFrontDist ( double pVal ) {
    HRESULT _hr = put_FrontDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetFrontDist2 ( ) {
    double _result = 0;
    HRESULT _hr = get_FrontDist2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutFrontDist2 ( double pVal ) {
    HRESULT _hr = put_FrontDist2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerWin::GetOnGround ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnGround(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerWin::PutOnGround ( _bstr_t pVal ) {
    HRESULT _hr = put_OnGround(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetSlabThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutSlabThickness ( double pVal ) {
    HRESULT _hr = put_SlabThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetDist1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Dist1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutDist1 ( double pVal ) {
    HRESULT _hr = put_Dist1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetDist2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Dist2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutDist2 ( double pVal ) {
    HRESULT _hr = put_Dist2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetGlassDist ( ) {
    double _result = 0;
    HRESULT _hr = get_GlassDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutGlassDist ( double pVal ) {
    HRESULT _hr = put_GlassDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerWin::GetHasSlab1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasSlab1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerWin::PutHasSlab1 ( _bstr_t pVal ) {
    HRESULT _hr = put_HasSlab1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerWin::GetHasSlab2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasSlab2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerWin::PutHasSlab2 ( _bstr_t pVal ) {
    HRESULT _hr = put_HasSlab2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetProWinSlabWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_ProWinSlabWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutProWinSlabWidth ( double pVal ) {
    HRESULT _hr = put_ProWinSlabWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetProWinSlabInsuThick ( ) {
    double _result = 0;
    HRESULT _hr = get_ProWinSlabInsuThick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutProWinSlabInsuThick ( double pVal ) {
    HRESULT _hr = put_ProWinSlabInsuThick(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerWin::GetLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerWin::PutLabel ( _bstr_t pVal ) {
    HRESULT _hr = put_Label(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetTextAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_TextAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutTextAngle ( double pVal ) {
    HRESULT _hr = put_TextAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetTextHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutTextHeight ( double pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerWin::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerWin::PutTextStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_TextStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerWin::GetHideLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HideLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerWin::PutHideLabel ( _bstr_t pVal ) {
    HRESULT _hr = put_HideLabel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCornerWin::GetGlassLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_GlassLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutGlassLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_GlassLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCornerWin::GetFrameLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_FrameLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutFrameLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_FrameLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCornerWin::GetSlabLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_SlabLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutSlabLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_SlabLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCornerWin::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerWin::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerWin::GetIsHole ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IsHole(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerWin::PutIsHole ( _bstr_t pVal ) {
    HRESULT _hr = put_IsHole(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerWin::GetKind ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComCornerWin::GetStructure ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Structure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerWin::PutStructure ( _bstr_t pVal ) {
    HRESULT _hr = put_Structure(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerWin::GetExtShading ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerWin::PutExtShading ( _bstr_t pVal ) {
    HRESULT _hr = put_ExtShading(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerWin::GetConductivity ( ) {
    double _result = 0;
    HRESULT _hr = get_Conductivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IComCornerWin::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerWin::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComRect wrapper method implementations
//

inline double IComRect::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRect::PutHeight ( double pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRect::GetDiaLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DiaLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRect::PutDiaLine ( _bstr_t pVal ) {
    HRESULT _hr = put_DiaLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRect::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRect::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRect::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRect::PutLength ( double pVal ) {
    HRESULT _hr = put_Length(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRect::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRect::PutWidth ( double pVal ) {
    HRESULT _hr = put_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRect::GetBaseType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BaseType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRect::PutBaseType ( _bstr_t pVal ) {
    HRESULT _hr = put_BaseType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRect::GetElev ( ) {
    double _result = 0;
    HRESULT _hr = get_Elev(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRect::PutElev ( double pVal ) {
    HRESULT _hr = put_Elev(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRect::GetRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRect::PutRotation ( double pVal ) {
    HRESULT _hr = put_Rotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRect::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRect::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRect::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRect::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComSlope wrapper method implementations
//

inline double IComSlope::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSlope::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSlope::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSlope::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSlope::GetViewType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSlope::PutViewType ( _bstr_t pVal ) {
    HRESULT _hr = put_ViewType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IComSlope::GetVertexNum ( ) {
    long _result = 0;
    HRESULT _hr = get_VertexNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSlope::PutVertexNum ( long pVal ) {
    HRESULT _hr = put_VertexNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSlope::GetShowMode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShowMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSlope::PutShowMode ( _bstr_t pVal ) {
    HRESULT _hr = put_ShowMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSlope::GetReactor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Reactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSlope::PutReactor ( _bstr_t pVal ) {
    HRESULT _hr = put_Reactor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSlope::GetTransform ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Transform(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSlope::PutTransform ( _bstr_t pVal ) {
    HRESULT _hr = put_Transform(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSlope::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSlope::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComPolyMesh wrapper method implementations
//

inline double IComPolyMesh::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComPolyMesh::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComPolyMesh::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComPolyMesh::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComPolyMesh::GetViewType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComPolyMesh::PutViewType ( _bstr_t pVal ) {
    HRESULT _hr = put_ViewType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComPolyMesh::GetPathLength ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PathLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComPolyMesh::GetSideArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SideArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline int IComPolyMesh::GetSectionNum ( ) {
    int _result = 0;
    HRESULT _hr = get_SectionNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IComPolyMesh::GetVolume ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IComPolyMesh::GetVertex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IComPolyMesh::PutVertex ( const _variant_t & pVal ) {
    HRESULT _hr = put_Vertex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IComPolyMesh::GetSection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Section(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IComPolyMesh::PutSection ( const _variant_t & pVal ) {
    HRESULT _hr = put_Section(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComPolyMesh::GetShapeVisibility ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShapeVisibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComPolyMesh::PutShapeVisibility ( _bstr_t pVal ) {
    HRESULT _hr = put_ShapeVisibility(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComPolyMesh::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComPolyMesh::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComOpeningSlot wrapper method implementations
//

inline double IComOpeningSlot::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpeningSlot::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpeningSlot::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpeningSlot::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpeningSlot::GetViewType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpeningSlot::PutViewType ( _bstr_t pVal ) {
    HRESULT _hr = put_ViewType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpeningSlot::GetShowShape ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShowShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpeningSlot::PutShowShape ( _bstr_t pVal ) {
    HRESULT _hr = put_ShowShape(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpeningSlot::GetOutsideSlot ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutsideSlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpeningSlot::PutOutsideSlot ( _bstr_t pVal ) {
    HRESULT _hr = put_OutsideSlot(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpeningSlot::GetInsideSlot ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InsideSlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpeningSlot::PutInsideSlot ( _bstr_t pVal ) {
    HRESULT _hr = put_InsideSlot(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpeningSlot::GetWidth1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Width1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpeningSlot::PutWidth1 ( double pVal ) {
    HRESULT _hr = put_Width1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpeningSlot::GetWidth2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Width2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpeningSlot::PutWidth2 ( double pVal ) {
    HRESULT _hr = put_Width2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpeningSlot::GetA ( ) {
    double _result = 0;
    HRESULT _hr = get_A(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpeningSlot::PutA ( double pVal ) {
    HRESULT _hr = put_A(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpeningSlot::GetT ( ) {
    double _result = 0;
    HRESULT _hr = get_T(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpeningSlot::PutT ( double pVal ) {
    HRESULT _hr = put_T(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpeningSlot::GetStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpeningSlot::PutStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_Style(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpeningSlot::GetBoardWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_BoardWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpeningSlot::PutBoardWidth ( double pVal ) {
    HRESULT _hr = put_BoardWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpeningSlot::GetInsideBoard ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InsideBoard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpeningSlot::PutInsideBoard ( _bstr_t pVal ) {
    HRESULT _hr = put_InsideBoard(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpeningSlot::GetOutsideBoard ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutsideBoard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpeningSlot::PutOutsideBoard ( _bstr_t pVal ) {
    HRESULT _hr = put_OutsideBoard(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpeningSlot::GetInsideSill ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InsideSill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpeningSlot::PutInsideSill ( _bstr_t pVal ) {
    HRESULT _hr = put_InsideSill(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpeningSlot::GetOutsideSill ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutsideSill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpeningSlot::PutOutsideSill ( _bstr_t pVal ) {
    HRESULT _hr = put_OutsideSill(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpeningSlot::GetA1 ( ) {
    double _result = 0;
    HRESULT _hr = get_A1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpeningSlot::PutA1 ( double pVal ) {
    HRESULT _hr = put_A1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpeningSlot::GetA2 ( ) {
    double _result = 0;
    HRESULT _hr = get_A2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpeningSlot::PutA2 ( double pVal ) {
    HRESULT _hr = put_A2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpeningSlot::GetH1 ( ) {
    double _result = 0;
    HRESULT _hr = get_H1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpeningSlot::PutH1 ( double pVal ) {
    HRESULT _hr = put_H1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpeningSlot::GetH2 ( ) {
    double _result = 0;
    HRESULT _hr = get_H2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpeningSlot::PutH2 ( double pVal ) {
    HRESULT _hr = put_H2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpeningSlot::GetW1 ( ) {
    double _result = 0;
    HRESULT _hr = get_W1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpeningSlot::PutW1 ( double pVal ) {
    HRESULT _hr = put_W1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComOpeningSlot::GetW2 ( ) {
    double _result = 0;
    HRESULT _hr = get_W2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpeningSlot::PutW2 ( double pVal ) {
    HRESULT _hr = put_W2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComOpeningSlot::GetLayerBoard ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_LayerBoard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpeningSlot::PutLayerBoard ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_LayerBoard(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComOpeningSlot::GetLayerSill ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_LayerSill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComOpeningSlot::PutLayerSill ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_LayerSill(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComOpeningSlot::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComOpeningSlot::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComDormer wrapper method implementations
//

inline double IComDormer::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDormer::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDormer::GetWallWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_WallWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutWallWidth ( double pVal ) {
    HRESULT _hr = put_WallWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDormer::GetWallHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_WallHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutWallHeight ( double pVal ) {
    HRESULT _hr = put_WallHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDormer::GetWallThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_WallThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutWallThickness ( double pVal ) {
    HRESULT _hr = put_WallThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDormer::GetWinWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_WinWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutWinWidth ( double pVal ) {
    HRESULT _hr = put_WinWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDormer::GetWinHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_WinHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutWinHeight ( double pVal ) {
    HRESULT _hr = put_WinHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDormer::GetSlabThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutSlabThickness ( double pVal ) {
    HRESULT _hr = put_SlabThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDormer::GetExtendEaves ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtendEaves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutExtendEaves ( double pVal ) {
    HRESULT _hr = put_ExtendEaves(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDormer::GetExtendHill ( ) {
    double _result = 0;
    HRESULT _hr = get_ExtendHill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutExtendHill ( double pVal ) {
    HRESULT _hr = put_ExtendHill(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDormer::GetSlopeGrade ( ) {
    double _result = 0;
    HRESULT _hr = get_SlopeGrade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutSlopeGrade ( double pVal ) {
    HRESULT _hr = put_SlopeGrade(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDormer::GetSlopeHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_SlopeHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutSlopeHeight ( double pVal ) {
    HRESULT _hr = put_SlopeHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDormer::GetDormerType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DormerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDormer::PutDormerType ( _bstr_t pVal ) {
    HRESULT _hr = put_DormerType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDormer::GetShowWindow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShowWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDormer::PutShowWindow ( _bstr_t pVal ) {
    HRESULT _hr = put_ShowWindow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDormer::GetLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDormer::PutLabel ( _bstr_t pVal ) {
    HRESULT _hr = put_Label(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDormer::GetTextHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutTextHeight ( double pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDormer::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDormer::PutTextStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_TextStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComDormer::GetRoofLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_RoofLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutRoofLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_RoofLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComDormer::GetCeilingLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_CeilingLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutCeilingLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_CeilingLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComDormer::GetSlabLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_SlabLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutSlabLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_SlabLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComDormer::GetWallLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_WallLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutWallLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_WallLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComDormer::GetFrameLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_FrameLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutFrameLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_FrameLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComDormer::GetGlassLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_GlassLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutGlassLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_GlassLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComDormer::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDormer::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDormer::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDormer::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComNetShelf wrapper method implementations
//

inline ACAD_LAYER IComNetShelf::GetSphereLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_SphereLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComNetShelf::PutSphereLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_SphereLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComNetShelf::GetMonoSphere ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MonoSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComNetShelf::PutMonoSphere ( _bstr_t pVal ) {
    HRESULT _hr = put_MonoSphere(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComNetShelf::GetSphereRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_SphereRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComNetShelf::PutSphereRadius ( double pVal ) {
    HRESULT _hr = put_SphereRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComNetShelf::GetPoleRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_PoleRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComNetShelf::PutPoleRadius ( double pVal ) {
    HRESULT _hr = put_PoleRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComNetShelf::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComNetShelf::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComNetShelf::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComNetShelf::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComNetShelf::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComNetShelf::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComMultiViewInsert wrapper method implementations
//

inline double IComMultiViewInsert::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiViewInsert::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiViewInsert::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiViewInsert::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiViewInsert::GetRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiViewInsert::PutRotation ( double pVal ) {
    HRESULT _hr = put_Rotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiViewInsert::GetScaleX ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiViewInsert::PutScaleX ( double pVal ) {
    HRESULT _hr = put_ScaleX(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiViewInsert::GetScaleY ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiViewInsert::PutScaleY ( double pVal ) {
    HRESULT _hr = put_ScaleY(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMultiViewInsert::GetScaleZ ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMultiViewInsert::PutScaleZ ( double pVal ) {
    HRESULT _hr = put_ScaleZ(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMultiViewInsert::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMultiViewInsert::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComPromptMark wrapper method implementations
//

inline double IComPromptMark::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComPromptMark::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComPromptMark::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComPromptMark::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComPromptMark::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComPromptMark::PutLength ( double pVal ) {
    HRESULT _hr = put_Length(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComPromptMark::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComPromptMark::PutWidth ( double pVal ) {
    HRESULT _hr = put_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComPromptMark::GetRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComPromptMark::PutRotation ( double pVal ) {
    HRESULT _hr = put_Rotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComPromptMark::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComPromptMark::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComPromptMark::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComPromptMark::PutTextStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_TextStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComPromptMark::GetShape ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComPromptMark::PutShape ( _bstr_t pVal ) {
    HRESULT _hr = put_Shape(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComDrawingName wrapper method implementations
//

inline _bstr_t IComDrawingName::GetNameText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDrawingName::PutNameText ( _bstr_t pVal ) {
    HRESULT _hr = put_NameText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDrawingName::GetNameStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDrawingName::PutNameStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_NameStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDrawingName::GetNameHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDrawingName::PutNameHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_NameHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDrawingName::GetScaleText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScaleText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDrawingName::PutScaleText ( _bstr_t pVal ) {
    HRESULT _hr = put_ScaleText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDrawingName::GetScaleStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScaleStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDrawingName::PutScaleStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_ScaleStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDrawingName::GetScaleHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScaleHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDrawingName::PutScaleHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_ScaleHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDrawingName::GetSpaceCoef ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SpaceCoef(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDrawingName::PutSpaceCoef ( _bstr_t pVal ) {
    HRESULT _hr = put_SpaceCoef(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDrawingName::GetDimStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DimStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDrawingName::PutDimStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_DimStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComDrawingName::GetTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_TextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDrawingName::PutTextColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_TextColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDrawingName::GetShowScale ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShowScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDrawingName::PutShowScale ( _bstr_t pVal ) {
    HRESULT _hr = put_ShowScale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDrawingName::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDrawingName::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDrawingName::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDrawingName::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComCurveMesh2 wrapper method implementations
//

inline double IComCurveMesh2::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurveMesh2::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCurveMesh2::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCurveMesh2::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurveMesh2::GetViewType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurveMesh2::PutViewType ( _bstr_t pVal ) {
    HRESULT _hr = put_ViewType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurveMesh2::GetPathLength ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PathLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComCurveMesh2::GetSideArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SideArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComCurveMesh2::GetShapePerimeter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShapePerimeter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComCurveMesh2::GetVolume ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IComCurveMesh2::GetVertex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IComCurveMesh2::PutVertex ( const _variant_t & pVal ) {
    HRESULT _hr = put_Vertex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurveMesh2::GetShapeVisibility ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShapeVisibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurveMesh2::PutShapeVisibility ( _bstr_t pVal ) {
    HRESULT _hr = put_ShapeVisibility(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCurveMesh2::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCurveMesh2::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComPolyMesh2 wrapper method implementations
//

inline double IComPolyMesh2::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComPolyMesh2::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComPolyMesh2::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComPolyMesh2::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComPolyMesh2::GetViewType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComPolyMesh2::PutViewType ( _bstr_t pVal ) {
    HRESULT _hr = put_ViewType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComPolyMesh2::GetPathLength ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PathLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComPolyMesh2::GetSideArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SideArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline int IComPolyMesh2::GetSectionNum ( ) {
    int _result = 0;
    HRESULT _hr = get_SectionNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IComPolyMesh2::GetVolume ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IComPolyMesh2::GetVertex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IComPolyMesh2::PutVertex ( const _variant_t & pVal ) {
    HRESULT _hr = put_Vertex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IComPolyMesh2::GetSection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Section(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IComPolyMesh2::PutSection ( const _variant_t & pVal ) {
    HRESULT _hr = put_Section(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComPolyMesh2::GetShapeVisibility ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShapeVisibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComPolyMesh2::PutShapeVisibility ( _bstr_t pVal ) {
    HRESULT _hr = put_ShapeVisibility(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComPolyMesh2::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComPolyMesh2::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComCuspRoof wrapper method implementations
//

inline double IComCuspRoof::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCuspRoof::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCuspRoof::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCuspRoof::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCuspRoof::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCuspRoof::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCuspRoof::GetElev ( ) {
    double _result = 0;
    HRESULT _hr = get_Elev(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCuspRoof::PutElev ( double pVal ) {
    HRESULT _hr = put_Elev(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int IComCuspRoof::GetSideNum ( ) {
    int _result = 0;
    HRESULT _hr = get_SideNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCuspRoof::PutSideNum ( int pVal ) {
    HRESULT _hr = put_SideNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCuspRoof::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCuspRoof::PutHeight ( double pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCuspRoof::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCuspRoof::PutRadius ( double pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCuspRoof::GetRotate ( ) {
    double _result = 0;
    HRESULT _hr = get_Rotate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCuspRoof::PutRotate ( double pVal ) {
    HRESULT _hr = put_Rotate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCuspRoof::GetEavesLen ( ) {
    double _result = 0;
    HRESULT _hr = get_EavesLen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCuspRoof::PutEavesLen ( double pVal ) {
    HRESULT _hr = put_EavesLen(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCuspRoof::GetSlabThick ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabThick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCuspRoof::PutSlabThick ( double pVal ) {
    HRESULT _hr = put_SlabThick(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComDualSlopeRoof wrapper method implementations
//

inline double IComDualSlopeRoof::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDualSlopeRoof::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDualSlopeRoof::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDualSlopeRoof::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDualSlopeRoof::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDualSlopeRoof::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDualSlopeRoof::GetElev ( ) {
    double _result = 0;
    HRESULT _hr = get_Elev(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDualSlopeRoof::PutElev ( double pVal ) {
    HRESULT _hr = put_Elev(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDualSlopeRoof::GetLeftSlopeAng ( ) {
    double _result = 0;
    HRESULT _hr = get_LeftSlopeAng(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDualSlopeRoof::PutLeftSlopeAng ( double pVal ) {
    HRESULT _hr = put_LeftSlopeAng(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDualSlopeRoof::GetRightSlopeAng ( ) {
    double _result = 0;
    HRESULT _hr = get_RightSlopeAng(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDualSlopeRoof::PutRightSlopeAng ( double pVal ) {
    HRESULT _hr = put_RightSlopeAng(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDualSlopeRoof::GetSlabThick ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabThick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDualSlopeRoof::PutSlabThick ( double pVal ) {
    HRESULT _hr = put_SlabThick(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDualSlopeRoof::GetRoofHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_RoofHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDualSlopeRoof::PutRoofHeight ( double pVal ) {
    HRESULT _hr = put_RoofHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComSymbCut wrapper method implementations
//

inline double IComSymbCut::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbCut::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbCut::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbCut::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbCut::GetCutType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CutType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbCut::PutCutType ( _bstr_t pVal ) {
    HRESULT _hr = put_CutType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbCut::GetIsHide ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IsHide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbCut::PutIsHide ( _bstr_t pVal ) {
    HRESULT _hr = put_IsHide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComPolyPathArray wrapper method implementations
//

inline double IComPolyPathArray::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComPolyPathArray::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComPolyPathArray::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComPolyPathArray::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComPolyPathArray::GetCellAlign ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CellAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComPolyPathArray::PutCellAlign ( _bstr_t pVal ) {
    HRESULT _hr = put_CellAlign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComPolyPathArray::GetBasePos ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BasePos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComPolyPathArray::PutBasePos ( _bstr_t pVal ) {
    HRESULT _hr = put_BasePos(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComPolyPathArray::GetPicWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_PicWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComPolyPathArray::PutPicWidth ( double pVal ) {
    HRESULT _hr = put_PicWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComPolyPathArray::GetPicRatio ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PicRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComPolyPathArray::PutPicRatio ( _bstr_t pVal ) {
    HRESULT _hr = put_PicRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComCrossStair wrapper method implementations
//

inline double IComCrossStair::GetStairHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StairHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutStairHeight ( double pVal ) {
    HRESULT _hr = put_StairHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCrossStair::GetSpaceWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_SpaceWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutSpaceWidth ( double pVal ) {
    HRESULT _hr = put_SpaceWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCrossStair::GetStairWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StairWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutStairWidth ( double pVal ) {
    HRESULT _hr = put_StairWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCrossStair::GetStepWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StepWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutStepWidth ( double pVal ) {
    HRESULT _hr = put_StepWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCrossStair::GetStepHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StepHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutStepHeight ( double pVal ) {
    HRESULT _hr = put_StepHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComCrossStair::GetStepSumNum ( ) {
    short _result = 0;
    HRESULT _hr = get_StepSumNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutStepSumNum ( short pVal ) {
    HRESULT _hr = put_StepSumNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCrossStair::GetRailWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_RailWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutRailWidth ( double pVal ) {
    HRESULT _hr = put_RailWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCrossStair::GetRailDistToSide ( ) {
    double _result = 0;
    HRESULT _hr = get_RailDistToSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutRailDistToSide ( double pVal ) {
    HRESULT _hr = put_RailDistToSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetRailInside ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RailInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutRailInside ( _bstr_t pVal ) {
    HRESULT _hr = put_RailInside(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetRailMake ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RailMake(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutRailMake ( _bstr_t pVal ) {
    HRESULT _hr = put_RailMake(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCrossStair::GetRailOutDist ( ) {
    double _result = 0;
    HRESULT _hr = get_RailOutDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutRailOutDist ( double pVal ) {
    HRESULT _hr = put_RailOutDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetRailOutSide ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RailOutSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutRailOutSide ( _bstr_t pVal ) {
    HRESULT _hr = put_RailOutSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetHasOutsideHandrail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasOutsideHandrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutHasOutsideHandrail ( _bstr_t pVal ) {
    HRESULT _hr = put_HasOutsideHandrail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetLeftBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LeftBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutLeftBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_LeftBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetRightBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RightBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutRightBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_RightBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCrossStair::GetBeamHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutBeamHeight ( double pVal ) {
    HRESULT _hr = put_BeamHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCrossStair::GetBeamThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutBeamThickness ( double pVal ) {
    HRESULT _hr = put_BeamThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCrossStair::GetStepLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_StepLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutStepLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_StepLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCrossStair::GetBeamLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_BeamLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutBeamLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_BeamLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCrossStair::GetRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_RailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_RailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCrossStair::GetHandRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_HandRailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutHandRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_HandRailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCrossStair::GetSlabLength1 ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabLength1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutSlabLength1 ( double pVal ) {
    HRESULT _hr = put_SlabLength1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCrossStair::GetSlabLength2 ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabLength2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutSlabLength2 ( double pVal ) {
    HRESULT _hr = put_SlabLength2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCrossStair::GetSlabLength3 ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabLength3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutSlabLength3 ( double pVal ) {
    HRESULT _hr = put_SlabLength3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCrossStair::GetBoardThick ( ) {
    double _result = 0;
    HRESULT _hr = get_BoardThick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutBoardThick ( double pVal ) {
    HRESULT _hr = put_BoardThick(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetStartSide ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutStartSide ( _bstr_t pVal ) {
    HRESULT _hr = put_StartSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetStairFlag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StairFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutStairFlag ( _bstr_t pVal ) {
    HRESULT _hr = put_StairFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComCrossStair::GetSectStepNum ( ) {
    short _result = 0;
    HRESULT _hr = get_SectStepNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutSectStepNum ( short pVal ) {
    HRESULT _hr = put_SectStepNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComCrossStair::GetViewCtrl ( ) {
    short _result = 0;
    HRESULT _hr = get_ViewCtrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutViewCtrl ( short pVal ) {
    HRESULT _hr = put_ViewCtrl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCrossStair::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCrossStair::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCrossStair::GetArrowLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_ArrowLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutArrowLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_ArrowLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCrossStair::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetHasCeller ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasCeller(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutHasCeller ( _bstr_t pVal ) {
    HRESULT _hr = put_HasCeller(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetDownDir ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DownDir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutDownDir ( _bstr_t pVal ) {
    HRESULT _hr = put_DownDir(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetHasRoof ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasRoof(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutHasRoof ( _bstr_t pVal ) {
    HRESULT _hr = put_HasRoof(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetUpDir ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UpDir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutUpDir ( _bstr_t pVal ) {
    HRESULT _hr = put_UpDir(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCrossStair::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCrossStair::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetHasArrow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasArrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutHasArrow ( _bstr_t pVal ) {
    HRESULT _hr = put_HasArrow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetTextHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutTextHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetTextUp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutTextUp ( _bstr_t pVal ) {
    HRESULT _hr = put_TextUp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCrossStair::GetTextDown ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCrossStair::PutTextDown ( _bstr_t pVal ) {
    HRESULT _hr = put_TextDown(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComParallelStair wrapper method implementations
//

inline double IComParallelStair::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComParallelStair::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComParallelStair::GetViewCtrl ( ) {
    short _result = 0;
    HRESULT _hr = get_ViewCtrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutViewCtrl ( short pVal ) {
    HRESULT _hr = put_ViewCtrl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComParallelStair::GetStairHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StairHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutStairHeight ( double pVal ) {
    HRESULT _hr = put_StairHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComParallelStair::GetSpaceWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_SpaceWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutSpaceWidth ( double pVal ) {
    HRESULT _hr = put_SpaceWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComParallelStair::GetStairWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StairWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutStairWidth ( double pVal ) {
    HRESULT _hr = put_StairWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComParallelStair::GetStairWidth2 ( ) {
    double _result = 0;
    HRESULT _hr = get_StairWidth2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutStairWidth2 ( double pVal ) {
    HRESULT _hr = put_StairWidth2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComParallelStair::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComParallelStair::GetStepTotalNum ( ) {
    short _result = 0;
    HRESULT _hr = get_StepTotalNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutStepTotalNum ( short pVal ) {
    HRESULT _hr = put_StepTotalNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComParallelStair::GetStepNum1 ( ) {
    short _result = 0;
    HRESULT _hr = get_StepNum1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutStepNum1 ( short pVal ) {
    HRESULT _hr = put_StepNum1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComParallelStair::GetStepNum2 ( ) {
    short _result = 0;
    HRESULT _hr = get_StepNum2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutStepNum2 ( short pVal ) {
    HRESULT _hr = put_StepNum2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComParallelStair::GetStepHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StepHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutStepHeight ( double pVal ) {
    HRESULT _hr = put_StepHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComParallelStair::GetStepWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StepWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutStepWidth ( double pVal ) {
    HRESULT _hr = put_StepWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComParallelStair::GetRailWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_RailWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutRailWidth ( double pVal ) {
    HRESULT _hr = put_RailWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComParallelStair::GetRailDistToSide ( ) {
    double _result = 0;
    HRESULT _hr = get_RailDistToSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutRailDistToSide ( double pVal ) {
    HRESULT _hr = put_RailDistToSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComParallelStair::GetRailMake ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RailMake(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComParallelStair::PutRailMake ( _bstr_t pVal ) {
    HRESULT _hr = put_RailMake(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComParallelStair::GetHasOutRail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasOutRail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComParallelStair::PutHasOutRail ( _bstr_t pVal ) {
    HRESULT _hr = put_HasOutRail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComParallelStair::GetHasOutsideHandrail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasOutsideHandrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComParallelStair::PutHasOutsideHandrail ( _bstr_t pVal ) {
    HRESULT _hr = put_HasOutsideHandrail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComParallelStair::GetRotationDist ( ) {
    double _result = 0;
    HRESULT _hr = get_RotationDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutRotationDist ( double pVal ) {
    HRESULT _hr = put_RotationDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComParallelStair::GetLayerDist ( ) {
    double _result = 0;
    HRESULT _hr = get_LayerDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutLayerDist ( double pVal ) {
    HRESULT _hr = put_LayerDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComParallelStair::GetPlatType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlatType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComParallelStair::PutPlatType ( _bstr_t pVal ) {
    HRESULT _hr = put_PlatType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComParallelStair::GetHasSlab ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasSlab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComParallelStair::PutHasSlab ( _bstr_t pVal ) {
    HRESULT _hr = put_HasSlab(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComParallelStair::GetSlabSize ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutSlabSize ( double pVal ) {
    HRESULT _hr = put_SlabSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComParallelStair::GetSlabThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutSlabThickness ( double pVal ) {
    HRESULT _hr = put_SlabThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComParallelStair::GetLeftBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LeftBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComParallelStair::PutLeftBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_LeftBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComParallelStair::GetRightBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RightBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComParallelStair::PutRightBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_RightBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComParallelStair::GetBeamHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutBeamHeight ( double pVal ) {
    HRESULT _hr = put_BeamHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComParallelStair::GetBeamThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutBeamThickness ( double pVal ) {
    HRESULT _hr = put_BeamThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComParallelStair::GetStepLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_StepLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutStepLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_StepLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComParallelStair::GetBeamLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_BeamLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutBeamLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_BeamLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComParallelStair::GetRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_RailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_RailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComParallelStair::GetHandRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_HandRailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutHandRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_HandRailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComParallelStair::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComParallelStair::GetArrowLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_ArrowLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutArrowLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_ArrowLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComParallelStair::GetAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComParallelStair::PutAlignment ( _bstr_t pVal ) {
    HRESULT _hr = put_Alignment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComParallelStair::GetStartSide ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComParallelStair::PutStartSide ( _bstr_t pVal ) {
    HRESULT _hr = put_StartSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComParallelStair::GetStairFlag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StairFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComParallelStair::PutStairFlag ( _bstr_t pVal ) {
    HRESULT _hr = put_StairFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComParallelStair::GetSectStepNum ( ) {
    short _result = 0;
    HRESULT _hr = get_SectStepNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComParallelStair::PutSectStepNum ( short pVal ) {
    HRESULT _hr = put_SectStepNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComParallelStair::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComParallelStair::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComParallelStair::GetHasArrow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasArrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComParallelStair::PutHasArrow ( _bstr_t pVal ) {
    HRESULT _hr = put_HasArrow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComParallelStair::GetTextHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComParallelStair::PutTextHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComParallelStair::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComParallelStair::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComParallelStair::GetTextUp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComParallelStair::PutTextUp ( _bstr_t pVal ) {
    HRESULT _hr = put_TextUp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComParallelStair::GetTextDown ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComParallelStair::PutTextDown ( _bstr_t pVal ) {
    HRESULT _hr = put_TextDown(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComScissorsStair wrapper method implementations
//

inline double IComScissorsStair::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComScissorsStair::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComScissorsStair::GetViewCtrl ( ) {
    short _result = 0;
    HRESULT _hr = get_ViewCtrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutViewCtrl ( short pVal ) {
    HRESULT _hr = put_ViewCtrl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComScissorsStair::GetStairHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StairHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutStairHeight ( double pVal ) {
    HRESULT _hr = put_StairHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComScissorsStair::GetSpaceWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_SpaceWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutSpaceWidth ( double pVal ) {
    HRESULT _hr = put_SpaceWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComScissorsStair::GetStairWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StairWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutStairWidth ( double pVal ) {
    HRESULT _hr = put_StairWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComScissorsStair::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComScissorsStair::GetStepTotalNum ( ) {
    short _result = 0;
    HRESULT _hr = get_StepTotalNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutStepTotalNum ( short pVal ) {
    HRESULT _hr = put_StepTotalNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComScissorsStair::GetStepNum1 ( ) {
    short _result = 0;
    HRESULT _hr = get_StepNum1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutStepNum1 ( short pVal ) {
    HRESULT _hr = put_StepNum1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComScissorsStair::GetStepNum2 ( ) {
    short _result = 0;
    HRESULT _hr = get_StepNum2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutStepNum2 ( short pVal ) {
    HRESULT _hr = put_StepNum2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComScissorsStair::GetStepHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StepHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutStepHeight ( double pVal ) {
    HRESULT _hr = put_StepHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComScissorsStair::GetStepWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StepWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutStepWidth ( double pVal ) {
    HRESULT _hr = put_StepWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComScissorsStair::GetRailWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_RailWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutRailWidth ( double pVal ) {
    HRESULT _hr = put_RailWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComScissorsStair::GetRailDistToSide ( ) {
    double _result = 0;
    HRESULT _hr = get_RailDistToSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutRailDistToSide ( double pVal ) {
    HRESULT _hr = put_RailDistToSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComScissorsStair::GetRailMake ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RailMake(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComScissorsStair::PutRailMake ( _bstr_t pVal ) {
    HRESULT _hr = put_RailMake(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComScissorsStair::GetHasOutRail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasOutRail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComScissorsStair::PutHasOutRail ( _bstr_t pVal ) {
    HRESULT _hr = put_HasOutRail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComScissorsStair::GetHasOutsideHandrail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasOutsideHandrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComScissorsStair::PutHasOutsideHandrail ( _bstr_t pVal ) {
    HRESULT _hr = put_HasOutsideHandrail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComScissorsStair::GetRotationDist ( ) {
    double _result = 0;
    HRESULT _hr = get_RotationDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutRotationDist ( double pVal ) {
    HRESULT _hr = put_RotationDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComScissorsStair::GetLayerDist ( ) {
    double _result = 0;
    HRESULT _hr = get_LayerDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutLayerDist ( double pVal ) {
    HRESULT _hr = put_LayerDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComScissorsStair::GetHasSlab ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasSlab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComScissorsStair::PutHasSlab ( _bstr_t pVal ) {
    HRESULT _hr = put_HasSlab(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComScissorsStair::GetSlabSize ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutSlabSize ( double pVal ) {
    HRESULT _hr = put_SlabSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComScissorsStair::GetSlabThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutSlabThickness ( double pVal ) {
    HRESULT _hr = put_SlabThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComScissorsStair::GetLeftBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LeftBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComScissorsStair::PutLeftBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_LeftBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComScissorsStair::GetRightBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RightBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComScissorsStair::PutRightBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_RightBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComScissorsStair::GetBeamHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutBeamHeight ( double pVal ) {
    HRESULT _hr = put_BeamHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComScissorsStair::GetBeamThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutBeamThickness ( double pVal ) {
    HRESULT _hr = put_BeamThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComScissorsStair::GetStepLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_StepLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutStepLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_StepLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComScissorsStair::GetBeamLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_BeamLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutBeamLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_BeamLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComScissorsStair::GetRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_RailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_RailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComScissorsStair::GetHandRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_HandRailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutHandRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_HandRailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComScissorsStair::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComScissorsStair::GetArrowLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_ArrowLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutArrowLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_ArrowLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComScissorsStair::GetAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComScissorsStair::PutAlignment ( _bstr_t pVal ) {
    HRESULT _hr = put_Alignment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComScissorsStair::GetStartSide ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComScissorsStair::PutStartSide ( _bstr_t pVal ) {
    HRESULT _hr = put_StartSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComScissorsStair::GetStairFlag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StairFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComScissorsStair::PutStairFlag ( _bstr_t pVal ) {
    HRESULT _hr = put_StairFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComScissorsStair::GetSectStepNum ( ) {
    short _result = 0;
    HRESULT _hr = get_SectStepNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComScissorsStair::PutSectStepNum ( short pVal ) {
    HRESULT _hr = put_SectStepNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComScissorsStair::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComScissorsStair::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComScissorsStair::GetHasArrow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasArrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComScissorsStair::PutHasArrow ( _bstr_t pVal ) {
    HRESULT _hr = put_HasArrow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComScissorsStair::GetTextHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComScissorsStair::PutTextHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComScissorsStair::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComScissorsStair::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComScissorsStair::GetTextUp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComScissorsStair::PutTextUp ( _bstr_t pVal ) {
    HRESULT _hr = put_TextUp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComScissorsStair::GetTextDown ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComScissorsStair::PutTextDown ( _bstr_t pVal ) {
    HRESULT _hr = put_TextDown(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComCornerStair wrapper method implementations
//

inline double IComCornerStair::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerStair::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComCornerStair::GetViewCtrl ( ) {
    short _result = 0;
    HRESULT _hr = get_ViewCtrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutViewCtrl ( short pVal ) {
    HRESULT _hr = put_ViewCtrl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerStair::GetStairHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StairHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutStairHeight ( double pVal ) {
    HRESULT _hr = put_StairHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerStair::GetSideStairWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_SideStairWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutSideStairWidth ( double pVal ) {
    HRESULT _hr = put_SideStairWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerStair::GetMidStairWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_MidStairWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutMidStairWidth ( double pVal ) {
    HRESULT _hr = put_MidStairWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerStair::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComCornerStair::GetStepTotalNum ( ) {
    short _result = 0;
    HRESULT _hr = get_StepTotalNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutStepTotalNum ( short pVal ) {
    HRESULT _hr = put_StepTotalNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComCornerStair::GetStepNum1 ( ) {
    short _result = 0;
    HRESULT _hr = get_StepNum1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutStepNum1 ( short pVal ) {
    HRESULT _hr = put_StepNum1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComCornerStair::GetStepNum2 ( ) {
    short _result = 0;
    HRESULT _hr = get_StepNum2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutStepNum2 ( short pVal ) {
    HRESULT _hr = put_StepNum2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerStair::GetStepHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StepHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutStepHeight ( double pVal ) {
    HRESULT _hr = put_StepHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerStair::GetStepWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StepWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutStepWidth ( double pVal ) {
    HRESULT _hr = put_StepWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerStair::GetRailWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_RailWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutRailWidth ( double pVal ) {
    HRESULT _hr = put_RailWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerStair::GetRailDistToSide ( ) {
    double _result = 0;
    HRESULT _hr = get_RailDistToSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutRailDistToSide ( double pVal ) {
    HRESULT _hr = put_RailDistToSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerStair::GetRailMake ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RailMake(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerStair::PutRailMake ( _bstr_t pVal ) {
    HRESULT _hr = put_RailMake(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerStair::GetHasOutRail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasOutRail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerStair::PutHasOutRail ( _bstr_t pVal ) {
    HRESULT _hr = put_HasOutRail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerStair::GetHasOutsideHandrail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasOutsideHandrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerStair::PutHasOutsideHandrail ( _bstr_t pVal ) {
    HRESULT _hr = put_HasOutsideHandrail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerStair::GetPlatType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlatType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerStair::PutPlatType ( _bstr_t pVal ) {
    HRESULT _hr = put_PlatType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerStair::GetHasSlab ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasSlab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerStair::PutHasSlab ( _bstr_t pVal ) {
    HRESULT _hr = put_HasSlab(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerStair::GetSlabSize ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutSlabSize ( double pVal ) {
    HRESULT _hr = put_SlabSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerStair::GetSlabLength ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutSlabLength ( double pVal ) {
    HRESULT _hr = put_SlabLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerStair::GetSlabThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutSlabThickness ( double pVal ) {
    HRESULT _hr = put_SlabThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerStair::GetRotationDist ( ) {
    double _result = 0;
    HRESULT _hr = get_RotationDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutRotationDist ( double pVal ) {
    HRESULT _hr = put_RotationDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerStair::GetLayerDist ( ) {
    double _result = 0;
    HRESULT _hr = get_LayerDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutLayerDist ( double pVal ) {
    HRESULT _hr = put_LayerDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerStair::GetLeftBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LeftBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerStair::PutLeftBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_LeftBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerStair::GetRightBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RightBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerStair::PutRightBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_RightBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerStair::GetBeamHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutBeamHeight ( double pVal ) {
    HRESULT _hr = put_BeamHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComCornerStair::GetBeamThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutBeamThickness ( double pVal ) {
    HRESULT _hr = put_BeamThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCornerStair::GetStepLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_StepLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutStepLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_StepLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCornerStair::GetBeamLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_BeamLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutBeamLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_BeamLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCornerStair::GetRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_RailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_RailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCornerStair::GetHandRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_HandRailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutHandRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_HandRailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCornerStair::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComCornerStair::GetArrowLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_ArrowLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutArrowLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_ArrowLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerStair::GetStartSide ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerStair::PutStartSide ( _bstr_t pVal ) {
    HRESULT _hr = put_StartSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerStair::GetStairFlag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StairFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerStair::PutStairFlag ( _bstr_t pVal ) {
    HRESULT _hr = put_StairFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComCornerStair::GetSectStepNum ( ) {
    short _result = 0;
    HRESULT _hr = get_SectStepNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComCornerStair::PutSectStepNum ( short pVal ) {
    HRESULT _hr = put_SectStepNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerStair::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerStair::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerStair::GetHasArrow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasArrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerStair::PutHasArrow ( _bstr_t pVal ) {
    HRESULT _hr = put_HasArrow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerStair::GetTextHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerStair::PutTextHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerStair::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerStair::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerStair::GetTextUp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerStair::PutTextUp ( _bstr_t pVal ) {
    HRESULT _hr = put_TextUp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComCornerStair::GetTextDown ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComCornerStair::PutTextDown ( _bstr_t pVal ) {
    HRESULT _hr = put_TextDown(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComDoubleMulStair wrapper method implementations
//

inline double IComDoubleMulStair::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComDoubleMulStair::GetViewCtrl ( ) {
    short _result = 0;
    HRESULT _hr = get_ViewCtrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutViewCtrl ( short pVal ) {
    HRESULT _hr = put_ViewCtrl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetStairHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StairHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutStairHeight ( double pVal ) {
    HRESULT _hr = put_StairHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetSideStairWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_SideStairWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutSideStairWidth ( double pVal ) {
    HRESULT _hr = put_SideStairWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetMidStairWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_MidStairWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutMidStairWidth ( double pVal ) {
    HRESULT _hr = put_MidStairWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComDoubleMulStair::GetStepTotalNum ( ) {
    short _result = 0;
    HRESULT _hr = get_StepTotalNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutStepTotalNum ( short pVal ) {
    HRESULT _hr = put_StepTotalNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComDoubleMulStair::GetStepNum1 ( ) {
    short _result = 0;
    HRESULT _hr = get_StepNum1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutStepNum1 ( short pVal ) {
    HRESULT _hr = put_StepNum1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComDoubleMulStair::GetStepNum2 ( ) {
    short _result = 0;
    HRESULT _hr = get_StepNum2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutStepNum2 ( short pVal ) {
    HRESULT _hr = put_StepNum2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComDoubleMulStair::GetStepNum3 ( ) {
    short _result = 0;
    HRESULT _hr = get_StepNum3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutStepNum3 ( short pVal ) {
    HRESULT _hr = put_StepNum3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetStepHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StepHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutStepHeight ( double pVal ) {
    HRESULT _hr = put_StepHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetStepWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StepWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutStepWidth ( double pVal ) {
    HRESULT _hr = put_StepWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetRailWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_RailWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutRailWidth ( double pVal ) {
    HRESULT _hr = put_RailWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetRailDistToSide ( ) {
    double _result = 0;
    HRESULT _hr = get_RailDistToSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutRailDistToSide ( double pVal ) {
    HRESULT _hr = put_RailDistToSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDoubleMulStair::GetRailMake ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RailMake(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDoubleMulStair::PutRailMake ( _bstr_t pVal ) {
    HRESULT _hr = put_RailMake(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetRailOutDist ( ) {
    double _result = 0;
    HRESULT _hr = get_RailOutDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutRailOutDist ( double pVal ) {
    HRESULT _hr = put_RailOutDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetRailOutDistSide ( ) {
    double _result = 0;
    HRESULT _hr = get_RailOutDistSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutRailOutDistSide ( double pVal ) {
    HRESULT _hr = put_RailOutDistSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDoubleMulStair::GetHasOutRail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasOutRail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDoubleMulStair::PutHasOutRail ( _bstr_t pVal ) {
    HRESULT _hr = put_HasOutRail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDoubleMulStair::GetHasOutsideHandrail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasOutsideHandrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDoubleMulStair::PutHasOutsideHandrail ( _bstr_t pVal ) {
    HRESULT _hr = put_HasOutsideHandrail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetSidePlatLength ( ) {
    double _result = 0;
    HRESULT _hr = get_SidePlatLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutSidePlatLength ( double pVal ) {
    HRESULT _hr = put_SidePlatLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetSidePlatWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_SidePlatWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutSidePlatWidth ( double pVal ) {
    HRESULT _hr = put_SidePlatWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetMidPlatLength ( ) {
    double _result = 0;
    HRESULT _hr = get_MidPlatLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutMidPlatLength ( double pVal ) {
    HRESULT _hr = put_MidPlatLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetMidPlatWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_MidPlatWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutMidPlatWidth ( double pVal ) {
    HRESULT _hr = put_MidPlatWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetSlabThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutSlabThickness ( double pVal ) {
    HRESULT _hr = put_SlabThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDoubleMulStair::GetLeftBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LeftBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDoubleMulStair::PutLeftBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_LeftBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDoubleMulStair::GetRightBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RightBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDoubleMulStair::PutRightBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_RightBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetBeamHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutBeamHeight ( double pVal ) {
    HRESULT _hr = put_BeamHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComDoubleMulStair::GetBeamThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutBeamThickness ( double pVal ) {
    HRESULT _hr = put_BeamThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComDoubleMulStair::GetStepLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_StepLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutStepLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_StepLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComDoubleMulStair::GetBeamLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_BeamLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutBeamLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_BeamLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComDoubleMulStair::GetRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_RailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_RailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComDoubleMulStair::GetHandRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_HandRailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutHandRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_HandRailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComDoubleMulStair::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComDoubleMulStair::GetArrowLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_ArrowLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutArrowLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_ArrowLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDoubleMulStair::GetStartSide ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDoubleMulStair::PutStartSide ( _bstr_t pVal ) {
    HRESULT _hr = put_StartSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDoubleMulStair::GetStairFlag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StairFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDoubleMulStair::PutStairFlag ( _bstr_t pVal ) {
    HRESULT _hr = put_StairFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComDoubleMulStair::GetSectStepNum ( ) {
    short _result = 0;
    HRESULT _hr = get_SectStepNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComDoubleMulStair::PutSectStepNum ( short pVal ) {
    HRESULT _hr = put_SectStepNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDoubleMulStair::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDoubleMulStair::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDoubleMulStair::GetHasArrow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasArrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDoubleMulStair::PutHasArrow ( _bstr_t pVal ) {
    HRESULT _hr = put_HasArrow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDoubleMulStair::GetTextHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDoubleMulStair::PutTextHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDoubleMulStair::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDoubleMulStair::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDoubleMulStair::GetTextUp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDoubleMulStair::PutTextUp ( _bstr_t pVal ) {
    HRESULT _hr = put_TextUp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComDoubleMulStair::GetTextDown ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComDoubleMulStair::PutTextDown ( _bstr_t pVal ) {
    HRESULT _hr = put_TextDown(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComTriangleStair wrapper method implementations
//

inline double IComTriangleStair::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComTriangleStair::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComTriangleStair::GetViewCtrl ( ) {
    short _result = 0;
    HRESULT _hr = get_ViewCtrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutViewCtrl ( short pVal ) {
    HRESULT _hr = put_ViewCtrl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComTriangleStair::GetStairHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StairHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutStairHeight ( double pVal ) {
    HRESULT _hr = put_StairHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComTriangleStair::GetSpaceWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_SpaceWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutSpaceWidth ( double pVal ) {
    HRESULT _hr = put_SpaceWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComTriangleStair::GetStairWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StairWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutStairWidth ( double pVal ) {
    HRESULT _hr = put_StairWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComTriangleStair::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComTriangleStair::GetStepNum1 ( ) {
    short _result = 0;
    HRESULT _hr = get_StepNum1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutStepNum1 ( short pVal ) {
    HRESULT _hr = put_StepNum1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComTriangleStair::GetStepHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StepHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutStepHeight ( double pVal ) {
    HRESULT _hr = put_StepHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComTriangleStair::GetStepWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StepWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutStepWidth ( double pVal ) {
    HRESULT _hr = put_StepWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComTriangleStair::GetRailWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_RailWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutRailWidth ( double pVal ) {
    HRESULT _hr = put_RailWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComTriangleStair::GetRailDistToSide ( ) {
    double _result = 0;
    HRESULT _hr = get_RailDistToSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutRailDistToSide ( double pVal ) {
    HRESULT _hr = put_RailDistToSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComTriangleStair::GetHasRailConnect ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasRailConnect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComTriangleStair::PutHasRailConnect ( _bstr_t pVal ) {
    HRESULT _hr = put_HasRailConnect(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComTriangleStair::GetRailIsOpen ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RailIsOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComTriangleStair::PutRailIsOpen ( _bstr_t pVal ) {
    HRESULT _hr = put_RailIsOpen(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComTriangleStair::GetRailMake ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RailMake(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComTriangleStair::PutRailMake ( _bstr_t pVal ) {
    HRESULT _hr = put_RailMake(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComTriangleStair::GetHasOutRail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasOutRail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComTriangleStair::PutHasOutRail ( _bstr_t pVal ) {
    HRESULT _hr = put_HasOutRail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComTriangleStair::GetHasOutsideHandrail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasOutsideHandrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComTriangleStair::PutHasOutsideHandrail ( _bstr_t pVal ) {
    HRESULT _hr = put_HasOutsideHandrail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComTriangleStair::GetRailOutDist ( ) {
    double _result = 0;
    HRESULT _hr = get_RailOutDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutRailOutDist ( double pVal ) {
    HRESULT _hr = put_RailOutDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComTriangleStair::GetHasSlab ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasSlab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComTriangleStair::PutHasSlab ( _bstr_t pVal ) {
    HRESULT _hr = put_HasSlab(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComTriangleStair::GetSlabSize ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutSlabSize ( double pVal ) {
    HRESULT _hr = put_SlabSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComTriangleStair::GetSlabThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutSlabThickness ( double pVal ) {
    HRESULT _hr = put_SlabThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComTriangleStair::GetLeftBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LeftBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComTriangleStair::PutLeftBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_LeftBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComTriangleStair::GetRightBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RightBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComTriangleStair::PutRightBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_RightBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComTriangleStair::GetBeamHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutBeamHeight ( double pVal ) {
    HRESULT _hr = put_BeamHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComTriangleStair::GetBeamThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutBeamThickness ( double pVal ) {
    HRESULT _hr = put_BeamThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComTriangleStair::GetStepLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_StepLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutStepLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_StepLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComTriangleStair::GetBeamLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_BeamLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutBeamLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_BeamLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComTriangleStair::GetRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_RailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_RailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComTriangleStair::GetHandRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_HandRailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutHandRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_HandRailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComTriangleStair::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComTriangleStair::GetArrowLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_ArrowLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutArrowLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_ArrowLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComTriangleStair::GetStartSide ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComTriangleStair::PutStartSide ( _bstr_t pVal ) {
    HRESULT _hr = put_StartSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComTriangleStair::GetStairFlag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StairFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComTriangleStair::PutStairFlag ( _bstr_t pVal ) {
    HRESULT _hr = put_StairFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComTriangleStair::GetSectStepNum ( ) {
    short _result = 0;
    HRESULT _hr = get_SectStepNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComTriangleStair::PutSectStepNum ( short pVal ) {
    HRESULT _hr = put_SectStepNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComTriangleStair::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComTriangleStair::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComTriangleStair::GetHasArrow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasArrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComTriangleStair::PutHasArrow ( _bstr_t pVal ) {
    HRESULT _hr = put_HasArrow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComTriangleStair::GetTextHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComTriangleStair::PutTextHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComTriangleStair::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComTriangleStair::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComTriangleStair::GetTextUp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComTriangleStair::PutTextUp ( _bstr_t pVal ) {
    HRESULT _hr = put_TextUp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComTriangleStair::GetTextDown ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComTriangleStair::PutTextDown ( _bstr_t pVal ) {
    HRESULT _hr = put_TextDown(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComRectCornerStair wrapper method implementations
//

inline double IComRectCornerStair::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComRectCornerStair::GetViewCtrl ( ) {
    short _result = 0;
    HRESULT _hr = get_ViewCtrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutViewCtrl ( short pVal ) {
    HRESULT _hr = put_ViewCtrl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetStairHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StairHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutStairHeight ( double pVal ) {
    HRESULT _hr = put_StairHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetStairWidthOne ( ) {
    double _result = 0;
    HRESULT _hr = get_StairWidthOne(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutStairWidthOne ( double pVal ) {
    HRESULT _hr = put_StairWidthOne(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetStairWidthTwo ( ) {
    double _result = 0;
    HRESULT _hr = get_StairWidthTwo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutStairWidthTwo ( double pVal ) {
    HRESULT _hr = put_StairWidthTwo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectCornerStair::GetIsSmmetry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IsSmmetry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectCornerStair::PutIsSmmetry ( _bstr_t pVal ) {
    HRESULT _hr = put_IsSmmetry(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectCornerStair::GetStairNum ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StairNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectCornerStair::PutStairNum ( _bstr_t pVal ) {
    HRESULT _hr = put_StairNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetStairWidthThree ( ) {
    double _result = 0;
    HRESULT _hr = get_StairWidthThree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutStairWidthThree ( double pVal ) {
    HRESULT _hr = put_StairWidthThree(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComRectCornerStair::GetStepNum3 ( ) {
    short _result = 0;
    HRESULT _hr = get_StepNum3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutStepNum3 ( short pVal ) {
    HRESULT _hr = put_StepNum3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetStairWidthFour ( ) {
    double _result = 0;
    HRESULT _hr = get_StairWidthFour(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutStairWidthFour ( double pVal ) {
    HRESULT _hr = put_StairWidthFour(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComRectCornerStair::GetStepNum4 ( ) {
    short _result = 0;
    HRESULT _hr = get_StepNum4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutStepNum4 ( short pVal ) {
    HRESULT _hr = put_StepNum4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComRectCornerStair::GetStepNum1 ( ) {
    short _result = 0;
    HRESULT _hr = get_StepNum1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutStepNum1 ( short pVal ) {
    HRESULT _hr = put_StepNum1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComRectCornerStair::GetStepNum2 ( ) {
    short _result = 0;
    HRESULT _hr = get_StepNum2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutStepNum2 ( short pVal ) {
    HRESULT _hr = put_StepNum2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetStepHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StepHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutStepHeight ( double pVal ) {
    HRESULT _hr = put_StepHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetStepWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StepWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutStepWidth ( double pVal ) {
    HRESULT _hr = put_StepWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetRailWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_RailWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutRailWidth ( double pVal ) {
    HRESULT _hr = put_RailWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetRailDistToSide ( ) {
    double _result = 0;
    HRESULT _hr = get_RailDistToSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutRailDistToSide ( double pVal ) {
    HRESULT _hr = put_RailDistToSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectCornerStair::GetHasRailConnect ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasRailConnect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectCornerStair::PutHasRailConnect ( _bstr_t pVal ) {
    HRESULT _hr = put_HasRailConnect(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectCornerStair::GetRailMake ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RailMake(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectCornerStair::PutRailMake ( _bstr_t pVal ) {
    HRESULT _hr = put_RailMake(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectCornerStair::GetHasOutRail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasOutRail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectCornerStair::PutHasOutRail ( _bstr_t pVal ) {
    HRESULT _hr = put_HasOutRail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectCornerStair::GetHasOutsideHandrail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasOutsideHandrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectCornerStair::PutHasOutsideHandrail ( _bstr_t pVal ) {
    HRESULT _hr = put_HasOutsideHandrail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetRailOutDist ( ) {
    double _result = 0;
    HRESULT _hr = get_RailOutDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutRailOutDist ( double pVal ) {
    HRESULT _hr = put_RailOutDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetRailOutDistDown ( ) {
    double _result = 0;
    HRESULT _hr = get_RailOutDistDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutRailOutDistDown ( double pVal ) {
    HRESULT _hr = put_RailOutDistDown(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectCornerStair::GetHasSlab ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasSlab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectCornerStair::PutHasSlab ( _bstr_t pVal ) {
    HRESULT _hr = put_HasSlab(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetSlabWidthOne ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabWidthOne(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutSlabWidthOne ( double pVal ) {
    HRESULT _hr = put_SlabWidthOne(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetSlabSizeOne ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabSizeOne(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutSlabSizeOne ( double pVal ) {
    HRESULT _hr = put_SlabSizeOne(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetSlabWidthTwo ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabWidthTwo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutSlabWidthTwo ( double pVal ) {
    HRESULT _hr = put_SlabWidthTwo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetSlabSizeTwo ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabSizeTwo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutSlabSizeTwo ( double pVal ) {
    HRESULT _hr = put_SlabSizeTwo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetSlabWidthThree ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabWidthThree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutSlabWidthThree ( double pVal ) {
    HRESULT _hr = put_SlabWidthThree(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetSlabSizeThree ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabSizeThree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutSlabSizeThree ( double pVal ) {
    HRESULT _hr = put_SlabSizeThree(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetSlabThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutSlabThickness ( double pVal ) {
    HRESULT _hr = put_SlabThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectCornerStair::GetLeftBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LeftBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectCornerStair::PutLeftBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_LeftBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectCornerStair::GetRightBeam ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RightBeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectCornerStair::PutRightBeam ( _bstr_t pVal ) {
    HRESULT _hr = put_RightBeam(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetBeamHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutBeamHeight ( double pVal ) {
    HRESULT _hr = put_BeamHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComRectCornerStair::GetBeamThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_BeamThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutBeamThickness ( double pVal ) {
    HRESULT _hr = put_BeamThickness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComRectCornerStair::GetStepLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_StepLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutStepLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_StepLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComRectCornerStair::GetBeamLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_BeamLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutBeamLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_BeamLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComRectCornerStair::GetRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_RailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_RailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComRectCornerStair::GetHandRailLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_HandRailLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutHandRailLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_HandRailLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComRectCornerStair::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComRectCornerStair::GetArrowLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_ArrowLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutArrowLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_ArrowLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectCornerStair::GetStartSide ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectCornerStair::PutStartSide ( _bstr_t pVal ) {
    HRESULT _hr = put_StartSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectCornerStair::GetStairFlag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StairFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectCornerStair::PutStairFlag ( _bstr_t pVal ) {
    HRESULT _hr = put_StairFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComRectCornerStair::GetSectStepNum ( ) {
    short _result = 0;
    HRESULT _hr = get_SectStepNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComRectCornerStair::PutSectStepNum ( short pVal ) {
    HRESULT _hr = put_SectStepNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectCornerStair::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectCornerStair::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectCornerStair::GetHasArrow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HasArrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectCornerStair::PutHasArrow ( _bstr_t pVal ) {
    HRESULT _hr = put_HasArrow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectCornerStair::GetTextHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectCornerStair::PutTextHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectCornerStair::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectCornerStair::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectCornerStair::GetTextUp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectCornerStair::PutTextUp ( _bstr_t pVal ) {
    HRESULT _hr = put_TextUp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComRectCornerStair::GetTextDown ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComRectCornerStair::PutTextDown ( _bstr_t pVal ) {
    HRESULT _hr = put_TextDown(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComAutoStair wrapper method implementations
//

inline double IComAutoStair::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAutoStair::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAutoStair::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAutoStair::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IComAutoStair::GetViewCtrl ( ) {
    short _result = 0;
    HRESULT _hr = get_ViewCtrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAutoStair::PutViewCtrl ( short pVal ) {
    HRESULT _hr = put_ViewCtrl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAutoStair::GetAutoStairTotalLen ( ) {
    double _result = 0;
    HRESULT _hr = get_AutoStairTotalLen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAutoStair::PutAutoStairTotalLen ( double pVal ) {
    HRESULT _hr = put_AutoStairTotalLen(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAutoStair::GetAutoStairTotalWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_AutoStairTotalWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAutoStair::PutAutoStairTotalWidth ( double pVal ) {
    HRESULT _hr = put_AutoStairTotalWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAutoStair::GetStairHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_StairHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAutoStair::PutStairHeight ( double pVal ) {
    HRESULT _hr = put_StairHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAutoStair::GetStepDist ( ) {
    double _result = 0;
    HRESULT _hr = get_StepDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAutoStair::PutStepDist ( double pVal ) {
    HRESULT _hr = put_StepDist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAutoStair::GetPlatLength ( ) {
    double _result = 0;
    HRESULT _hr = get_PlatLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAutoStair::PutPlatLength ( double pVal ) {
    HRESULT _hr = put_PlatLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAutoStair::GetSlopeAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_SlopeAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAutoStair::PutSlopeAngle ( double pVal ) {
    HRESULT _hr = put_SlopeAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAutoStair::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAutoStair::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAutoStair::GetSingleStair ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SingleStair(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAutoStair::PutSingleStair ( _bstr_t pVal ) {
    HRESULT _hr = put_SingleStair(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAutoStair::GetStairWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_StairWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAutoStair::PutStairWidth ( double pVal ) {
    HRESULT _hr = put_StairWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComAutoStair::GetSpaceWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_SpaceWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAutoStair::PutSpaceWidth ( double pVal ) {
    HRESULT _hr = put_SpaceWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAutoStair::GetCrossAppose ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CrossAppose(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAutoStair::PutCrossAppose ( _bstr_t pVal ) {
    HRESULT _hr = put_CrossAppose(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComAutoStair::GetStepLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_StepLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAutoStair::PutStepLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_StepLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComAutoStair::GetTextLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_TextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAutoStair::PutTextLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_TextLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_LAYER IComAutoStair::GetArrowLayer ( ) {
    ACAD_LAYER _result;
    HRESULT _hr = get_ArrowLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComAutoStair::PutArrowLayer ( ACAD_LAYER pVal ) {
    HRESULT _hr = put_ArrowLayer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAutoStair::GetStairFlagTwo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StairFlagTwo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAutoStair::PutStairFlagTwo ( _bstr_t pVal ) {
    HRESULT _hr = put_StairFlagTwo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAutoStair::GetStairFlag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StairFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAutoStair::PutStairFlag ( _bstr_t pVal ) {
    HRESULT _hr = put_StairFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAutoStair::GetSignArrow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SignArrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAutoStair::PutSignArrow ( _bstr_t pVal ) {
    HRESULT _hr = put_SignArrow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAutoStair::GetSameDirection ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SameDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAutoStair::PutSameDirection ( _bstr_t pVal ) {
    HRESULT _hr = put_SameDirection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAutoStair::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAutoStair::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAutoStair::GetTextHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAutoStair::PutTextHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAutoStair::GetFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAutoStair::PutFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_FontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAutoStair::GetTextUp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAutoStair::PutTextUp ( _bstr_t pVal ) {
    HRESULT _hr = put_TextUp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComAutoStair::GetTextDown ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComAutoStair::PutTextDown ( _bstr_t pVal ) {
    HRESULT _hr = put_TextDown(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComApron wrapper method implementations
//

inline double IComApron::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComApron::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComApron::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComApron::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComApron::GetInHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_InHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComApron::PutInHeight ( double pVal ) {
    HRESULT _hr = put_InHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComApron::GetOutHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_OutHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComApron::PutOutHeight ( double pVal ) {
    HRESULT _hr = put_OutHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComApron::GetElev ( ) {
    double _result = 0;
    HRESULT _hr = get_Elev(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComApron::PutElev ( double pVal ) {
    HRESULT _hr = put_Elev(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComApron::GetPathLength ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PathLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComApron::GetDists ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Dists(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComApron::PutDists ( _bstr_t pVal ) {
    HRESULT _hr = put_Dists(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComApron::GetSideArea ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SideArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComApron::GetVolume ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComApron::GetCloseFlag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CloseFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComApron::PutCloseFlag ( _bstr_t pVal ) {
    HRESULT _hr = put_CloseFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IComApron::GetVertex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IComApron::PutVertex ( const _variant_t & pVal ) {
    HRESULT _hr = put_Vertex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComMountRoof wrapper method implementations
//

inline double IComMountRoof::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMountRoof::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMountRoof::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMountRoof::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMountRoof::GetShadowType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShadowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMountRoof::PutShadowType ( _bstr_t pVal ) {
    HRESULT _hr = put_ShadowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMountRoof::GetRoofType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RoofType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline double IComMountRoof::GetElev ( ) {
    double _result = 0;
    HRESULT _hr = get_Elev(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMountRoof::PutElev ( double pVal ) {
    HRESULT _hr = put_Elev(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComMountRoof::GetSlopeAng ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlopeAng(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComMountRoof::PutSlopeAng ( _bstr_t pVal ) {
    HRESULT _hr = put_SlopeAng(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMountRoof::GetRoofHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_RoofHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMountRoof::PutRoofHeight ( double pVal ) {
    HRESULT _hr = put_RoofHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMountRoof::GetMountHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_MountHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMountRoof::PutMountHeight ( double pVal ) {
    HRESULT _hr = put_MountHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMountRoof::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMountRoof::PutLength ( double pVal ) {
    HRESULT _hr = put_Length(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMountRoof::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMountRoof::PutWidth ( double pVal ) {
    HRESULT _hr = put_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMountRoof::GetEavesLength ( ) {
    double _result = 0;
    HRESULT _hr = get_EavesLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMountRoof::PutEavesLength ( double pVal ) {
    HRESULT _hr = put_EavesLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMountRoof::GetMountLength ( ) {
    double _result = 0;
    HRESULT _hr = get_MountLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMountRoof::PutMountLength ( double pVal ) {
    HRESULT _hr = put_MountLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMountRoof::GetTopLength ( ) {
    double _result = 0;
    HRESULT _hr = get_TopLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMountRoof::PutTopLength ( double pVal ) {
    HRESULT _hr = put_TopLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComMountRoof::GetSlabThick ( ) {
    double _result = 0;
    HRESULT _hr = get_SlabThick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComMountRoof::PutSlabThick ( double pVal ) {
    HRESULT _hr = put_SlabThick(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComFloorRect wrapper method implementations
//

inline double IComFloorRect::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComFloorRect::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComFloorRect::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComFloorRect::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComFloorRect::GetProjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComFloorRect::GetFloorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FloorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComFloorRect::PutFloorName ( _bstr_t pVal ) {
    HRESULT _hr = put_FloorName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComFloorRect::GetFloorHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FloorHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComFloorRect::PutFloorHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_FloorHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComFloorRect::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComFloorRect::PutTextStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_TextStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComFloorRect::GetTextHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComFloorRect::PutTextHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComFloorRect::GetTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_TextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComFloorRect::PutTextColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_TextColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComFloorRect::GetCrossLen ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CrossLen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComFloorRect::PutCrossLen ( _bstr_t pVal ) {
    HRESULT _hr = put_CrossLen(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISectionEntity wrapper method implementations
//

inline _bstr_t ISectionEntity::GetBorder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISectionEntity::PutBorder ( _bstr_t pStr ) {
    HRESULT _hr = put_Border(pStr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISectionEntity::GetLineType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISectionEntity::PutLineType ( _bstr_t pStr ) {
    HRESULT _hr = put_LineType(pStr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISectionEntity::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISectionEntity::PutName ( _bstr_t pStr ) {
    HRESULT _hr = put_Name(pStr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISectionEntity::GetHideLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HideLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISectionEntity::PutHideLine ( _bstr_t pStr ) {
    HRESULT _hr = put_HideLine(pStr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISectionEntity::GetShowFill ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShowFill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISectionEntity::PutShowFill ( _bstr_t pStr ) {
    HRESULT _hr = put_ShowFill(pStr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IComSymbModi wrapper method implementations
//

inline double IComSymbModi::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbModi::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IComSymbModi::GetLayoutRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbModi::PutLayoutRotation ( double pVal ) {
    HRESULT _hr = put_LayoutRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbModi::GetEditText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EditText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbModi::PutEditText ( _bstr_t pVal ) {
    HRESULT _hr = put_EditText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbModi::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbModi::PutTextStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_TextStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbModi::GetTextContent ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextContent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbModi::PutTextContent ( _bstr_t pVal ) {
    HRESULT _hr = put_TextContent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IComSymbModi::GetTextHeight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IComSymbModi::PutTextHeight ( _bstr_t pVal ) {
    HRESULT _hr = put_TextHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ACAD_COLOR IComSymbModi::GetTextColor ( ) {
    ACAD_COLOR _result;
    HRESULT _hr = get_TextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IComSymbModi::PutTextColor ( ACAD_COLOR pVal ) {
    HRESULT _hr = put_TextColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}
