// Created by Microsoft (R) C/C++ Compiler Version 10.00.30319.01 (e3ae76d7).
//
// c:\users\tz05\desktop\tangenttest\temp\x64\debug\tch10_com21.tlh
//
// C++ source equivalent of type library C:\Users\Tz05\Desktop\DLL\DLL\TArchT20v5\x64\tch10_com21.dll
// compiler-generated file created 04/03/20 at 13:26:44 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//  #import "C:\Program Files\Common Files\Autodesk Shared\axdb21enu.tlb"
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace T20V5X64_tch10_com21 {

//
// Forward references and typedefs
//

struct __declspec(uuid("8479167e-e1cb-4ef7-9d11-059331ec5e63"))
/* LIBID */ __COMKERNALLib;
struct __declspec(uuid("6e5c05af-a400-4bd0-813b-c140c60cbd3f"))
/* dual interface */ IComBalcony;
struct __declspec(uuid("956782f9-f19d-4dde-ac81-4b7be2e82db5"))
/* dual interface */ IComStair;
struct __declspec(uuid("fcefb38d-19ea-42ca-8f8d-8aaceb75fb5d"))
/* dual interface */ IComArcStair;
struct __declspec(uuid("c36dfb5b-1ee8-4f55-bc49-c0609b717a73"))
/* dual interface */ IComAscent;
struct __declspec(uuid("514fb2bc-12c9-4c9c-a83c-82af3f81775d"))
/* dual interface */ IComCamera;
struct __declspec(uuid("6168c398-51c0-4d43-9e53-c11ffa30340d"))
/* dual interface */ IComColumn;
struct __declspec(uuid("7a4ff7ac-f399-4e09-b6b7-f89472a2bf53"))
/* dual interface */ IComCurveMesh;
struct __declspec(uuid("123d306c-d28d-4049-8ebb-21654078c3a4"))
/* dual interface */ IComCurveStair;
struct __declspec(uuid("5dfc2c91-2e3a-4460-84bd-cf318e5afa99"))
/* dual interface */ IComHandRail;
struct __declspec(uuid("e386b4e6-4f04-493e-a17e-0902e38e5a19"))
/* dual interface */ IComLineStair;
struct __declspec(uuid("d8f08a01-ce41-44f9-bfce-db68afca8d47"))
/* dual interface */ IComOpening;
struct __declspec(uuid("eef70547-9e18-4496-8251-1d9ee5d6b81d"))
/* dual interface */ IComRail;
struct __declspec(uuid("94fcefec-28e6-4e1b-ba21-ae7f5d0b59d2"))
/* dual interface */ IComRectStair;
struct __declspec(uuid("476d9e0f-83ce-476f-88e0-7ac656618697"))
/* dual interface */ IComSlab;
struct __declspec(uuid("fbb869e3-272a-4f92-94df-a56a6965a3f8"))
/* dual interface */ IComSlopeRoof;
struct __declspec(uuid("f949c36f-53a8-45a5-b801-570e486b92bd"))
/* dual interface */ IComSpace;
struct __declspec(uuid("2ba2c08f-3ba3-4ecb-9924-c724e4c2eade"))
/* dual interface */ IComFireZone;
struct __declspec(uuid("ba7bdc1f-1dc5-4a4f-9ade-1477089c5e46"))
/* dual interface */ IComStep;
struct __declspec(uuid("d3860f81-5a4a-404e-b373-5e7a6a9e8ee6"))
/* dual interface */ IComVertSlab;
struct __declspec(uuid("769ad814-ea8e-41d5-a6a5-3a9c69d31c6a"))
/* dual interface */ IComWall;
struct __declspec(uuid("f66343ee-0f26-4a58-b91b-ffbd17cef1a3"))
/* dual interface */ IComWallPatch;
struct __declspec(uuid("c130da97-36b4-42b0-b26c-85e179048038"))
/* dual interface */ IComLineText;
struct __declspec(uuid("c6db89f5-2a2b-4ac7-bcc3-24418b2cb4c3"))
/* dual interface */ IComMutiText;
struct __declspec(uuid("59d1ceac-08de-46d2-aa6c-30ecc7baf05b"))
/* dual interface */ IComSymbComposing;
struct __declspec(uuid("1c350fb6-dd30-4971-8e6b-69ec43f139cf"))
/* dual interface */ IComSymbArrow;
struct __declspec(uuid("714fddb3-ce33-4e75-a092-2ac8acdf87dd"))
/* dual interface */ IComSymbDrawingIndex;
struct __declspec(uuid("aa954dfd-0bc1-484e-a2b9-36eb133b9364"))
/* dual interface */ IComSymbInSight;
struct __declspec(uuid("03d2f728-b730-4f03-8a14-963b350c744f"))
/* dual interface */ IComSymbMultiLeader;
struct __declspec(uuid("2ac8fde4-dc95-41b5-8d87-65a1c6e2e918"))
/* dual interface */ IComSymbElev;
struct __declspec(uuid("024f2915-9029-4808-8b6c-c498e9d7bed3"))
/* dual interface */ IComSymbIndex;
struct __declspec(uuid("891dde69-4d04-4ba4-8a86-458461e73996"))
/* dual interface */ IComSymbSection;
struct __declspec(uuid("089d2279-0ff9-44f9-9d57-f62c3ae573e0"))
/* dual interface */ IComSymbNorthThumb;
struct __declspec(uuid("37165a00-b44f-45af-8236-cf890f8a6ef1"))
/* dual interface */ IComDimension;
struct __declspec(uuid("bf8fcfb4-9144-417e-abee-f29646fc1f47"))
/* dual interface */ IComRadiusDim;
struct __declspec(uuid("cfeec3d4-6674-4ca7-8126-51afc0bc163a"))
/* dual interface */ IComAxisLabel;
struct __declspec(uuid("c4ed46cf-ffed-442b-a757-6f9367192df2"))
/* dual interface */ IComSymbRupture;
struct __declspec(uuid("4cb93abd-82ff-461d-b2d1-b362fb592dfe"))
/* dual interface */ IComSymbCoord;
struct __declspec(uuid("f575e0d2-cf9c-4f87-86f3-c78c4be85947"))
/* dual interface */ IComSheet;
struct __declspec(uuid("6085664f-da62-4bbf-9717-814f5930911f"))
/* dual interface */ IComCurtainWall;
struct __declspec(uuid("4a603a18-09c8-4c92-95b7-c3f4cc6eb42c"))
/* dual interface */ IComMultiStair;
struct __declspec(uuid("c2bd3da7-678b-4a08-b5d2-0f5b2006a4de"))
/* dual interface */ IComCornerWin;
struct __declspec(uuid("091ec5e6-d8d8-4e72-b19d-ec1d457d0b8d"))
/* dual interface */ IComRect;
struct __declspec(uuid("a0006352-d5e4-4f86-87fd-47a2d9a8e305"))
/* dual interface */ IComSlope;
struct __declspec(uuid("3b24ec86-4a5d-488d-a487-7c1c2ffbfa2d"))
/* dual interface */ IComPolyMesh;
struct __declspec(uuid("28ed9b9a-fa06-4475-9fa7-53019255d6a0"))
/* dual interface */ IComOpeningSlot;
struct __declspec(uuid("9d654bc0-1705-4bf6-9d35-4e06e6f31b83"))
/* dual interface */ IComDormer;
struct __declspec(uuid("a4236810-f69f-49ab-83ad-920333197e28"))
/* dual interface */ IComNetShelf;
struct __declspec(uuid("dc8ea239-3c7f-4d2c-be9a-c9695be96912"))
/* dual interface */ IComMultiViewInsert;
struct __declspec(uuid("b8996fca-d6e7-4778-94af-a8bd8917c689"))
/* dual interface */ IComPromptMark;
struct __declspec(uuid("59b5f902-e6c3-42b7-8681-016d03ecb2b8"))
/* dual interface */ IComDrawingName;
struct __declspec(uuid("ba5443fd-0711-4f17-9037-875cf21ff663"))
/* dual interface */ IComCurveMesh2;
struct __declspec(uuid("c8fe917a-3c26-4c58-a248-e871179bae55"))
/* dual interface */ IComPolyMesh2;
struct __declspec(uuid("abcac30c-65b7-46a3-a2f3-88cd59c61baa"))
/* dual interface */ IComCuspRoof;
struct __declspec(uuid("d4a06982-b2f8-43a2-acfb-cfb8bb64a048"))
/* dual interface */ IComDualSlopeRoof;
struct __declspec(uuid("36cb4d1e-9e7c-4e2b-afb0-fbe9a09cfcce"))
/* dual interface */ IComSymbCut;
struct __declspec(uuid("2ec12a00-11b0-439d-8644-957d39e6e95b"))
/* dual interface */ IComPolyPathArray;
struct __declspec(uuid("87d26781-df0a-4270-905c-85e3244d7401"))
/* dual interface */ IComCrossStair;
struct __declspec(uuid("d3a5714e-0703-4e29-be6d-891f48d75625"))
/* dual interface */ IComParallelStair;
struct __declspec(uuid("23facce5-7866-47f7-bc70-6fce9120fffa"))
/* dual interface */ IComScissorsStair;
struct __declspec(uuid("40aa08b0-6c38-45b6-9fa9-cb201c5c23b9"))
/* dual interface */ IComCornerStair;
struct __declspec(uuid("1f22b9a1-0337-41fe-a8dd-e5313cc1fb98"))
/* dual interface */ IComDoubleMulStair;
struct __declspec(uuid("727dbbc5-2729-4282-823d-34f5fba1baca"))
/* dual interface */ IComTriangleStair;
struct __declspec(uuid("438c2914-eefe-4fc0-959e-6a7dc63f3c13"))
/* dual interface */ IComRectCornerStair;
struct __declspec(uuid("41205729-d7f3-40b2-a4de-7368ee636cf3"))
/* dual interface */ IComAutoStair;
struct __declspec(uuid("4a50cd49-8bfd-4282-ba61-c36695daeb03"))
/* dual interface */ IComApron;
struct __declspec(uuid("4fadcfc0-7078-4cbe-bf66-990fb5c4f0af"))
/* dual interface */ IComMountRoof;
struct __declspec(uuid("4d9241bd-ddc7-4ac0-ba46-6dfa85217dda"))
/* dual interface */ IComFloorRect;
struct __declspec(uuid("06d560f7-af2e-42ab-a60e-bb6964e7d588"))
/* dual interface */ ISectionEntity;
struct __declspec(uuid("a8cc5cb5-5540-4b62-b263-d0081e1b6253"))
/* dual interface */ IComSymbModi;
struct __declspec(uuid("9474d266-f375-490f-959d-91b7faf9e047"))
/* dual interface */ IComStruBeam;
struct __declspec(uuid("e212fe54-1ce6-41c2-8064-cbe4c0237bbd"))
/* dual interface */ IComStruFloorSlab;
struct __declspec(uuid("6c05e8af-e574-4b93-b283-200c2900ce42"))
/* dual interface */ IComStruSlabHole;
struct __declspec(uuid("64d9a4a9-5316-4403-8d00-b672a8bb392f"))
/* dual interface */ IComStruNodePoint;
struct __declspec(uuid("3dd2e08b-c9ed-4d94-bae3-a6e84afb4139"))
/* dual interface */ IComStruBarBase;
struct __declspec(uuid("8e33d371-f242-46e4-bc03-5e5307d47d9a"))
/* dual interface */ IComStruSelfBase;
struct __declspec(uuid("fc1e625a-b95d-4709-8a80-e2e8823fb6de"))
/* dual interface */ IComStruReinBar;
struct __declspec(uuid("e112126c-8b84-42e1-a0f6-60c9bc2b0400"))
/* dual interface */ IComStruSymbFocus;
struct __declspec(uuid("d320d923-2311-4646-b3ea-3f0e75c0babd"))
/* dual interface */ IComStruSymbInsitu;
struct __declspec(uuid("214238e8-4e99-4032-99a1-74dc5f9a8db7"))
/* dual interface */ IComStruHanger;
struct __declspec(uuid("5b3b29f5-a47e-4ddc-818e-30de3096d748"))
/* dual interface */ IComStruStirrup;
struct __declspec(uuid("6ea24a7d-2215-42ac-934d-9b9711aa524c"))
/* dual interface */ IComStruPlainNumber;
struct __declspec(uuid("3ec94d22-4583-4ba7-94a2-f5af674c2692"))
/* dual interface */ IComStruSectStair;
struct __declspec(uuid("b5a26919-f4c4-43d4-9422-0e86205263f8"))
/* dual interface */ IComReinIndexDim;
struct __declspec(uuid("b798e834-d71c-4fbf-9e3e-2e58b573a34c"))
/* dual interface */ IComStruWColuSect;
struct __declspec(uuid("1bf8fe48-2478-4dc8-9f6f-38e7ca265d53"))
/* dual interface */ IComEvacPath;
struct /* coclass */ ComBalcony;
struct /* coclass */ ComStair;
struct /* coclass */ ComArcStair;
struct /* coclass */ ComAscent;
struct /* coclass */ ComCamera;
struct /* coclass */ ComColumn;
struct /* coclass */ ComCurveMesh;
struct /* coclass */ ComCurveStair;
struct /* coclass */ ComHandRail;
struct /* coclass */ ComLineStair;
struct /* coclass */ ComOpening;
struct /* coclass */ ComRail;
struct /* coclass */ ComRectStair;
struct /* coclass */ ComSlab;
struct /* coclass */ ComSlopeRoof;
struct /* coclass */ ComSpace;
struct /* coclass */ ComStep;
struct /* coclass */ ComVertSlab;
struct /* coclass */ ComWall;
struct /* coclass */ ComWallPatch;
struct /* coclass */ ComLineText;
struct /* coclass */ ComMutiText;
struct /* coclass */ ComSymbComposing;
struct /* coclass */ ComSymbArrow;
struct /* coclass */ ComSymbDrawingIndex;
struct /* coclass */ ComSymbInSight;
struct /* coclass */ ComSymbMultiLeader;
struct /* coclass */ ComSymbElev;
struct /* coclass */ ComSymbIndex;
struct /* coclass */ ComSymbSection;
struct /* coclass */ ComSymbNorthThumb;
struct /* coclass */ ComDimension;
struct /* coclass */ ComRadiusDim;
struct /* coclass */ ComAxisLabel;
struct /* coclass */ ComSymbRupture;
struct /* coclass */ ComSymbCoord;
struct /* coclass */ ComSheet;
struct /* coclass */ ComCurtainWall;
struct /* coclass */ ComMultiStair;
struct /* coclass */ ComCornerWin;
struct /* coclass */ ComRect;
struct /* coclass */ ComSlope;
struct /* coclass */ ComPolyMesh;
struct /* coclass */ ComOpeningSlot;
struct /* coclass */ ComDormer;
struct /* coclass */ ComNetShelf;
struct /* coclass */ ComMultiViewInsert;
struct /* coclass */ ComPromptMark;
struct /* coclass */ ComDrawingName;
struct /* coclass */ ComCurveMesh2;
struct /* coclass */ ComPolyMesh2;
struct /* coclass */ ComCuspRoof;
struct /* coclass */ ComDualSlopeRoof;
struct /* coclass */ ComSymbCut;
struct /* coclass */ ComPolyPathArray;
struct /* coclass */ ComCrossStair;
struct /* coclass */ ComParallelStair;
struct /* coclass */ ComScissorsStair;
struct /* coclass */ ComCornerStair;
struct /* coclass */ ComDoubleMulStair;
struct /* coclass */ ComTriangleStair;
struct /* coclass */ ComRectCornerStair;
struct /* coclass */ ComAutoStair;
struct /* coclass */ ComApron;
struct /* coclass */ ComMountRoof;
struct /* coclass */ ComFloorRect;
struct /* coclass */ SectionEntity;
struct /* coclass */ ComSymbModi;
struct /* coclass */ ComStruBeam;
struct /* coclass */ ComStruFloorSlab;
struct /* coclass */ ComStruSlabHole;
struct /* coclass */ ComStruNodePoint;
struct /* coclass */ ComStruBarBase;
struct /* coclass */ ComStruSelfBase;
struct /* coclass */ ComStruReinBar;
struct /* coclass */ ComStruSymbFocus;
struct /* coclass */ ComStruSymbInsitu;
struct /* coclass */ ComStruHanger;
struct /* coclass */ ComStruStirrup;
struct /* coclass */ ComStruPlainNumber;
struct /* coclass */ ComStruSectStair;
struct /* coclass */ ComReinIndexDim;
struct /* coclass */ ComStruWColuSect;
struct /* coclass */ ComFireZone;
struct /* coclass */ ComEvacPath;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IComBalcony, __uuidof(IComBalcony));
_COM_SMARTPTR_TYPEDEF(IComStair, __uuidof(IComStair));
_COM_SMARTPTR_TYPEDEF(IComArcStair, __uuidof(IComArcStair));
_COM_SMARTPTR_TYPEDEF(IComAscent, __uuidof(IComAscent));
_COM_SMARTPTR_TYPEDEF(IComCamera, __uuidof(IComCamera));
_COM_SMARTPTR_TYPEDEF(IComColumn, __uuidof(IComColumn));
_COM_SMARTPTR_TYPEDEF(IComCurveMesh, __uuidof(IComCurveMesh));
_COM_SMARTPTR_TYPEDEF(IComCurveStair, __uuidof(IComCurveStair));
_COM_SMARTPTR_TYPEDEF(IComHandRail, __uuidof(IComHandRail));
_COM_SMARTPTR_TYPEDEF(IComLineStair, __uuidof(IComLineStair));
_COM_SMARTPTR_TYPEDEF(IComOpening, __uuidof(IComOpening));
_COM_SMARTPTR_TYPEDEF(IComRail, __uuidof(IComRail));
_COM_SMARTPTR_TYPEDEF(IComRectStair, __uuidof(IComRectStair));
_COM_SMARTPTR_TYPEDEF(IComSlab, __uuidof(IComSlab));
_COM_SMARTPTR_TYPEDEF(IComSlopeRoof, __uuidof(IComSlopeRoof));
_COM_SMARTPTR_TYPEDEF(IComSpace, __uuidof(IComSpace));
_COM_SMARTPTR_TYPEDEF(IComFireZone, __uuidof(IComFireZone));
_COM_SMARTPTR_TYPEDEF(IComStep, __uuidof(IComStep));
_COM_SMARTPTR_TYPEDEF(IComVertSlab, __uuidof(IComVertSlab));
_COM_SMARTPTR_TYPEDEF(IComWall, __uuidof(IComWall));
_COM_SMARTPTR_TYPEDEF(IComWallPatch, __uuidof(IComWallPatch));
_COM_SMARTPTR_TYPEDEF(IComLineText, __uuidof(IComLineText));
_COM_SMARTPTR_TYPEDEF(IComMutiText, __uuidof(IComMutiText));
_COM_SMARTPTR_TYPEDEF(IComSymbComposing, __uuidof(IComSymbComposing));
_COM_SMARTPTR_TYPEDEF(IComSymbArrow, __uuidof(IComSymbArrow));
_COM_SMARTPTR_TYPEDEF(IComSymbDrawingIndex, __uuidof(IComSymbDrawingIndex));
_COM_SMARTPTR_TYPEDEF(IComSymbInSight, __uuidof(IComSymbInSight));
_COM_SMARTPTR_TYPEDEF(IComSymbMultiLeader, __uuidof(IComSymbMultiLeader));
_COM_SMARTPTR_TYPEDEF(IComSymbElev, __uuidof(IComSymbElev));
_COM_SMARTPTR_TYPEDEF(IComSymbIndex, __uuidof(IComSymbIndex));
_COM_SMARTPTR_TYPEDEF(IComSymbSection, __uuidof(IComSymbSection));
_COM_SMARTPTR_TYPEDEF(IComSymbNorthThumb, __uuidof(IComSymbNorthThumb));
_COM_SMARTPTR_TYPEDEF(IComDimension, __uuidof(IComDimension));
_COM_SMARTPTR_TYPEDEF(IComRadiusDim, __uuidof(IComRadiusDim));
_COM_SMARTPTR_TYPEDEF(IComAxisLabel, __uuidof(IComAxisLabel));
_COM_SMARTPTR_TYPEDEF(IComSymbRupture, __uuidof(IComSymbRupture));
_COM_SMARTPTR_TYPEDEF(IComSymbCoord, __uuidof(IComSymbCoord));
_COM_SMARTPTR_TYPEDEF(IComSheet, __uuidof(IComSheet));
_COM_SMARTPTR_TYPEDEF(IComCurtainWall, __uuidof(IComCurtainWall));
_COM_SMARTPTR_TYPEDEF(IComMultiStair, __uuidof(IComMultiStair));
_COM_SMARTPTR_TYPEDEF(IComCornerWin, __uuidof(IComCornerWin));
_COM_SMARTPTR_TYPEDEF(IComRect, __uuidof(IComRect));
_COM_SMARTPTR_TYPEDEF(IComSlope, __uuidof(IComSlope));
_COM_SMARTPTR_TYPEDEF(IComPolyMesh, __uuidof(IComPolyMesh));
_COM_SMARTPTR_TYPEDEF(IComOpeningSlot, __uuidof(IComOpeningSlot));
_COM_SMARTPTR_TYPEDEF(IComDormer, __uuidof(IComDormer));
_COM_SMARTPTR_TYPEDEF(IComNetShelf, __uuidof(IComNetShelf));
_COM_SMARTPTR_TYPEDEF(IComMultiViewInsert, __uuidof(IComMultiViewInsert));
_COM_SMARTPTR_TYPEDEF(IComPromptMark, __uuidof(IComPromptMark));
_COM_SMARTPTR_TYPEDEF(IComDrawingName, __uuidof(IComDrawingName));
_COM_SMARTPTR_TYPEDEF(IComCurveMesh2, __uuidof(IComCurveMesh2));
_COM_SMARTPTR_TYPEDEF(IComPolyMesh2, __uuidof(IComPolyMesh2));
_COM_SMARTPTR_TYPEDEF(IComCuspRoof, __uuidof(IComCuspRoof));
_COM_SMARTPTR_TYPEDEF(IComDualSlopeRoof, __uuidof(IComDualSlopeRoof));
_COM_SMARTPTR_TYPEDEF(IComSymbCut, __uuidof(IComSymbCut));
_COM_SMARTPTR_TYPEDEF(IComPolyPathArray, __uuidof(IComPolyPathArray));
_COM_SMARTPTR_TYPEDEF(IComCrossStair, __uuidof(IComCrossStair));
_COM_SMARTPTR_TYPEDEF(IComParallelStair, __uuidof(IComParallelStair));
_COM_SMARTPTR_TYPEDEF(IComScissorsStair, __uuidof(IComScissorsStair));
_COM_SMARTPTR_TYPEDEF(IComCornerStair, __uuidof(IComCornerStair));
_COM_SMARTPTR_TYPEDEF(IComDoubleMulStair, __uuidof(IComDoubleMulStair));
_COM_SMARTPTR_TYPEDEF(IComTriangleStair, __uuidof(IComTriangleStair));
_COM_SMARTPTR_TYPEDEF(IComRectCornerStair, __uuidof(IComRectCornerStair));
_COM_SMARTPTR_TYPEDEF(IComAutoStair, __uuidof(IComAutoStair));
_COM_SMARTPTR_TYPEDEF(IComApron, __uuidof(IComApron));
_COM_SMARTPTR_TYPEDEF(IComMountRoof, __uuidof(IComMountRoof));
_COM_SMARTPTR_TYPEDEF(IComFloorRect, __uuidof(IComFloorRect));
_COM_SMARTPTR_TYPEDEF(ISectionEntity, __uuidof(ISectionEntity));
_COM_SMARTPTR_TYPEDEF(IComSymbModi, __uuidof(IComSymbModi));
_COM_SMARTPTR_TYPEDEF(IComStruBeam, __uuidof(IComStruBeam));
_COM_SMARTPTR_TYPEDEF(IComStruFloorSlab, __uuidof(IComStruFloorSlab));
_COM_SMARTPTR_TYPEDEF(IComStruSlabHole, __uuidof(IComStruSlabHole));
_COM_SMARTPTR_TYPEDEF(IComStruNodePoint, __uuidof(IComStruNodePoint));
_COM_SMARTPTR_TYPEDEF(IComStruBarBase, __uuidof(IComStruBarBase));
_COM_SMARTPTR_TYPEDEF(IComStruSelfBase, __uuidof(IComStruSelfBase));
_COM_SMARTPTR_TYPEDEF(IComStruReinBar, __uuidof(IComStruReinBar));
_COM_SMARTPTR_TYPEDEF(IComStruSymbFocus, __uuidof(IComStruSymbFocus));
_COM_SMARTPTR_TYPEDEF(IComStruSymbInsitu, __uuidof(IComStruSymbInsitu));
_COM_SMARTPTR_TYPEDEF(IComStruHanger, __uuidof(IComStruHanger));
_COM_SMARTPTR_TYPEDEF(IComStruStirrup, __uuidof(IComStruStirrup));
_COM_SMARTPTR_TYPEDEF(IComStruPlainNumber, __uuidof(IComStruPlainNumber));
_COM_SMARTPTR_TYPEDEF(IComStruSectStair, __uuidof(IComStruSectStair));
_COM_SMARTPTR_TYPEDEF(IComReinIndexDim, __uuidof(IComReinIndexDim));
_COM_SMARTPTR_TYPEDEF(IComStruWColuSect, __uuidof(IComStruWColuSect));
_COM_SMARTPTR_TYPEDEF(IComEvacPath, __uuidof(IComEvacPath));

//
// Type library items
//

struct __declspec(uuid("6e5c05af-a400-4bd0-813b-c140c60cbd3f"))
IComBalcony : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailHeight,put=PutRailHeight))
    double RailHeight;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetGirderThickness,put=PutGirderThickness))
    double GirderThickness;
    __declspec(property(get=GetHasGirder,put=PutHasGirder))
    _bstr_t HasGirder;
    __declspec(property(get=GetGroundLayer,put=PutGroundLayer))
    ACAD_LAYER GroundLayer;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetRailClipInsu,put=PutRailClipInsu))
    _bstr_t RailClipInsu;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailHeight ( );
    void PutRailHeight (
        double pVal );
    _bstr_t GetRailClipInsu ( );
    void PutRailClipInsu (
        _bstr_t pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    double GetGirderThickness ( );
    void PutGirderThickness (
        double pVal );
    _bstr_t GetHasGirder ( );
    void PutHasGirder (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    ACAD_LAYER GetGroundLayer ( );
    void PutGroundLayer (
        ACAD_LAYER pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailClipInsu (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailClipInsu (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_GirderThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GirderThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasGirder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasGirder (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_GroundLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_GroundLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("956782f9-f19d-4dde-ac81-4b7be2e82db5"))
IComStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("fcefb38d-19ea-42ca-8f8d-8aaceb75fb5d"))
IComArcStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStepNum,put=PutStepNum))
    long StepNum;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetHasLBeam,put=PutHasLBeam))
    _bstr_t HasLBeam;
    __declspec(property(get=GetHasRBeam,put=PutHasRBeam))
    _bstr_t HasRBeam;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetPaoType,put=PutPaoType))
    _bstr_t PaoType;
    __declspec(property(get=GetRadiusIn,put=PutRadiusIn))
    double RadiusIn;
    __declspec(property(get=GetRadiusOut,put=PutRadiusOut))
    double RadiusOut;
    __declspec(property(get=GetElev,put=PutElev))
    double Elev;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    double StartAngle;
    __declspec(property(get=GetSweepAngle,put=PutSweepAngle))
    double SweepAngle;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetAsAscent,put=PutAsAscent))
    _bstr_t AsAscent;
    __declspec(property(get=GetHasAscentSlab,put=PutHasAscentSlab))
    _bstr_t HasAscentSlab;
    __declspec(property(get=GetOnGround,put=PutOnGround))
    _bstr_t OnGround;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetAlongWall,put=PutAlongWall))
    _bstr_t AlongWall;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    double GetElev ( );
    void PutElev (
        double pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetRadiusIn ( );
    void PutRadiusIn (
        double pVal );
    double GetRadiusOut ( );
    void PutRadiusOut (
        double pVal );
    double GetStartAngle ( );
    void PutStartAngle (
        double pVal );
    double GetSweepAngle ( );
    void PutSweepAngle (
        double pVal );
    long GetStepNum ( );
    void PutStepNum (
        long pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    _bstr_t GetHasLBeam ( );
    void PutHasLBeam (
        _bstr_t pVal );
    _bstr_t GetHasRBeam ( );
    void PutHasRBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetAsAscent ( );
    void PutAsAscent (
        _bstr_t pVal );
    _bstr_t GetHasAscentSlab ( );
    void PutHasAscentSlab (
        _bstr_t pVal );
    _bstr_t GetOnGround ( );
    void PutOnGround (
        _bstr_t pVal );
    _bstr_t GetPaoType ( );
    void PutPaoType (
        _bstr_t pVal );
    _bstr_t GetAlongWall ( );
    void PutAlongWall (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Elev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RadiusIn (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RadiusIn (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RadiusOut (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RadiusOut (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SweepAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SweepAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasLBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasLBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasRBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AsAscent (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AsAscent (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasAscentSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasAscentSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OnGround (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OnGround (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PaoType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PaoType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AlongWall (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlongWall (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("c36dfb5b-1ee8-4f55-bc49-c0609b717a73"))
IComAscent : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetHasSlant,put=PutHasSlant))
    _bstr_t HasSlant;
    __declspec(property(get=GetAlignment_Right,put=PutAlignment_Right))
    _bstr_t Alignment_Right;
    __declspec(property(get=GetAlignment_Left,put=PutAlignment_Left))
    _bstr_t Alignment_Left;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetIndent,put=PutIndent))
    double Indent;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    _bstr_t GetHasSlant ( );
    void PutHasSlant (
        _bstr_t pVal );
    _bstr_t GetAlignment_Right ( );
    void PutAlignment_Right (
        _bstr_t pVal );
    _bstr_t GetAlignment_Left ( );
    void PutAlignment_Left (
        _bstr_t pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    double GetLength ( );
    void PutLength (
        double pVal );
    double GetIndent ( );
    void PutIndent (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlant (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlant (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment_Right (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment_Right (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment_Left (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment_Left (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Indent (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Indent (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("514fb2bc-12c9-4c9c-a83c-82af3f81775d"))
IComCamera : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCameraElev,put=PutCameraElev))
    double CameraElev;
    __declspec(property(get=GetTargetElev,put=PutTargetElev))
    double TargetElev;
    __declspec(property(get=GetLens,put=PutLens))
    double Lens;
    __declspec(property(get=GetPerspective,put=PutPerspective))
    _bstr_t Perspective;
    __declspec(property(get=GetActive,put=PutActive))
    _bstr_t Active;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    double Longitude;
    __declspec(property(get=GetLatitude,put=PutLatitude))
    double Latitude;
    __declspec(property(get=GetFrontClipOn,put=PutFrontClipOn))
    _bstr_t FrontClipOn;
    __declspec(property(get=GetBackClipOn,put=PutBackClipOn))
    _bstr_t BackClipOn;
    __declspec(property(get=GetFrontClipAtEye,put=PutFrontClipAtEye))
    _bstr_t FrontClipAtEye;
    __declspec(property(get=GetFrontClipDist,put=PutFrontClipDist))
    double FrontClipDist;
    __declspec(property(get=GetBackClipDist,put=PutBackClipDist))
    double BackClipDist;
    __declspec(property(get=GetCameraType))
    _bstr_t CameraType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetCameraElev ( );
    void PutCameraElev (
        double pVal );
    double GetTargetElev ( );
    void PutTargetElev (
        double pVal );
    double GetLens ( );
    void PutLens (
        double pVal );
    _bstr_t GetPerspective ( );
    void PutPerspective (
        _bstr_t pVal );
    _bstr_t GetActive ( );
    void PutActive (
        _bstr_t pVal );
    double GetLongitude ( );
    void PutLongitude (
        double pVal );
    double GetLatitude ( );
    void PutLatitude (
        double pVal );
    _bstr_t GetFrontClipOn ( );
    void PutFrontClipOn (
        _bstr_t pVal );
    _bstr_t GetBackClipOn ( );
    void PutBackClipOn (
        _bstr_t pVal );
    _bstr_t GetFrontClipAtEye ( );
    void PutFrontClipAtEye (
        _bstr_t pVal );
    double GetFrontClipDist ( );
    void PutFrontClipDist (
        double pVal );
    double GetBackClipDist ( );
    void PutBackClipDist (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetCameraType ( );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CameraElev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CameraElev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TargetElev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TargetElev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lens (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lens (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Perspective (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FrontClipOn (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FrontClipOn (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BackClipOn (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BackClipOn (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FrontClipAtEye (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FrontClipAtEye (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FrontClipDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FrontClipDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BackClipDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BackClipDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CameraType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("6168c398-51c0-4d43-9e53-c11ffa30340d"))
IComColumn : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetType,put=PutType))
    _bstr_t Type;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetDeep,put=PutDeep))
    double Deep;
    __declspec(property(get=GetDiameter,put=PutDiameter))
    double Diameter;
    __declspec(property(get=GetSideLength,put=PutSideLength))
    double SideLength;
    __declspec(property(get=GetSectionArea))
    _bstr_t SectionArea;
    __declspec(property(get=GetSectionPerimeter))
    _bstr_t SectionPerimeter;
    __declspec(property(get=GetSideArea))
    _bstr_t SideArea;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetSectionShapeText,put=PutSectionShapeText))
    _bstr_t SectionShapeText;
    __declspec(property(get=GetStyle,put=PutStyle))
    _bstr_t Style;
    __declspec(property(get=GetTopFace,put=PutTopFace))
    _bstr_t TopFace;
    __declspec(property(get=GetBottomFace,put=PutBottomFace))
    _bstr_t BottomFace;
    __declspec(property(get=GetHatchLayer,put=PutHatchLayer))
    ACAD_LAYER HatchLayer;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetInsulate,put=PutInsulate))
    _bstr_t Insulate;
    __declspec(property(get=GetInsulateThick,put=PutInsulateThick))
    double InsulateThick;
    __declspec(property(get=GetInsulateLayer,put=PutInsulateLayer))
    ACAD_LAYER InsulateLayer;
    __declspec(property(get=GetColumnNumber,put=PutColumnNumber))
    _bstr_t ColumnNumber;
    __declspec(property(get=GetColumnIsHatch,put=PutColumnIsHatch))
    _bstr_t ColumnIsHatch;
    __declspec(property(get=GetColumnIsOverThick,put=PutColumnIsOverThick))
    _bstr_t ColumnIsOverThick;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetColumnWidthB,put=PutColumnWidthB))
    double ColumnWidthB;
    __declspec(property(get=GetColumnHeightH,put=PutColumnHeightH))
    double ColumnHeightH;
    __declspec(property(get=GetColumnThicknessB,put=PutColumnThicknessB))
    double ColumnThicknessB;
    __declspec(property(get=GetColumnSumH,put=PutColumnSumH))
    double ColumnSumH;
    __declspec(property(get=GetColumnWidthU,put=PutColumnWidthU))
    double ColumnWidthU;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetColumnThicknessT,put=PutColumnThicknessT))
    double ColumnThicknessT;
    __declspec(property(get=GetColumnWidthD,put=PutColumnWidthD))
    double ColumnWidthD;
    __declspec(property(get=GetColumnThicknessF,put=PutColumnThicknessF))
    double ColumnThicknessF;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetHideLabel,put=PutHideLabel))
    _bstr_t HideLabel;
    __declspec(property(get=GetStruElevation,put=PutStruElevation))
    double StruElevation;
    __declspec(property(get=GetStruHeight,put=PutStruHeight))
    double StruHeight;
    __declspec(property(get=GetStruDiameter,put=PutStruDiameter))
    double StruDiameter;
    __declspec(property(get=GetStruSectionShapeText,put=PutStruSectionShapeText))
    _bstr_t StruSectionShapeText;
    __declspec(property(get=GetStruStyle,put=PutStruStyle))
    _bstr_t StruStyle;
    __declspec(property(get=GetStruHatchLayer,put=PutStruHatchLayer))
    ACAD_LAYER StruHatchLayer;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    double GetRotation ( );
    void PutRotation (
        double pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetDeep ( );
    void PutDeep (
        double pVal );
    double GetDiameter ( );
    void PutDiameter (
        double pVal );
    double GetSideLength ( );
    void PutSideLength (
        double pVal );
    _bstr_t GetSectionArea ( );
    _bstr_t GetSectionPerimeter ( );
    _bstr_t GetSideArea ( );
    _bstr_t GetVolume ( );
    _bstr_t GetSectionShapeText ( );
    void PutSectionShapeText (
        _bstr_t pVal );
    _bstr_t GetStruSectionShapeText ( );
    void PutStruSectionShapeText (
        _bstr_t pVal );
    double GetStruDiameter ( );
    void PutStruDiameter (
        double pVal );
    _bstr_t GetTopFace ( );
    void PutTopFace (
        _bstr_t pVal );
    _bstr_t GetBottomFace ( );
    void PutBottomFace (
        _bstr_t pVal );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetHideLabel ( );
    void PutHideLabel (
        _bstr_t pVal );
    ACAD_LAYER GetHatchLayer ( );
    void PutHatchLayer (
        ACAD_LAYER pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetType ( );
    void PutType (
        _bstr_t pVal );
    _bstr_t GetStyle ( );
    void PutStyle (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetInsulate ( );
    void PutInsulate (
        _bstr_t pVal );
    double GetInsulateThick ( );
    void PutInsulateThick (
        double pVal );
    ACAD_LAYER GetInsulateLayer ( );
    void PutInsulateLayer (
        ACAD_LAYER pVal );
    _bstr_t GetColumnNumber ( );
    void PutColumnNumber (
        _bstr_t pVal );
    _bstr_t GetColumnIsHatch ( );
    void PutColumnIsHatch (
        _bstr_t pVal );
    _bstr_t GetColumnIsOverThick ( );
    void PutColumnIsOverThick (
        _bstr_t pVal );
    double GetColumnWidthB ( );
    void PutColumnWidthB (
        double pVal );
    double GetColumnHeightH ( );
    void PutColumnHeightH (
        double pVal );
    double GetColumnThicknessB ( );
    void PutColumnThicknessB (
        double pVal );
    double GetColumnSumH ( );
    void PutColumnSumH (
        double pVal );
    double GetColumnWidthU ( );
    void PutColumnWidthU (
        double pVal );
    double GetColumnThicknessT ( );
    void PutColumnThicknessT (
        double pVal );
    double GetColumnWidthD ( );
    void PutColumnWidthD (
        double pVal );
    double GetColumnThicknessF ( );
    void PutColumnThicknessF (
        double pVal );
    double GetStruElevation ( );
    void PutStruElevation (
        double pVal );
    double GetStruHeight ( );
    void PutStruHeight (
        double pVal );
    _bstr_t GetStruStyle ( );
    void PutStruStyle (
        _bstr_t pVal );
    ACAD_LAYER GetStruHatchLayer ( );
    void PutStruHatchLayer (
        ACAD_LAYER pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Deep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Deep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Diameter (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Diameter (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SideLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SideLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SectionArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SectionPerimeter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SideArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SectionShapeText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SectionShapeText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StruSectionShapeText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StruSectionShapeText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StruDiameter (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StruDiameter (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TopFace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TopFace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BottomFace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BottomFace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HideLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HideLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Insulate (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Insulate (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_InsulateThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_InsulateThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InsulateLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_InsulateLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnNumber (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnIsHatch (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnIsHatch (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnIsOverThick (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnIsOverThick (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnWidthB (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnWidthB (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnHeightH (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnHeightH (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnThicknessB (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnThicknessB (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnSumH (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnSumH (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnWidthU (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnWidthU (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnThicknessT (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnThicknessT (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnWidthD (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnWidthD (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnThicknessF (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnThicknessF (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StruElevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StruElevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StruHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StruHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StruStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StruStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StruHatchLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StruHatchLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
};

struct __declspec(uuid("7a4ff7ac-f399-4e09-b6b7-f89472a2bf53"))
IComCurveMesh : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetShapeVisibility,put=PutShapeVisibility))
    _bstr_t ShapeVisibility;
    __declspec(property(get=GetPathLength))
    _bstr_t PathLength;
    __declspec(property(get=GetSideArea))
    _bstr_t SideArea;
    __declspec(property(get=GetShapePerimeter))
    _bstr_t ShapePerimeter;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetVertex,put=PutVertex))
    _variant_t Vertex;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    _bstr_t GetPathLength ( );
    _bstr_t GetSideArea ( );
    _bstr_t GetShapePerimeter ( );
    _bstr_t GetVolume ( );
    _variant_t GetVertex ( );
    void PutVertex (
        const _variant_t & pVal );
    _bstr_t GetShapeVisibility ( );
    void PutShapeVisibility (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PathLength (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SideArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ShapePerimeter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Vertex (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Vertex (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ShapeVisibility (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShapeVisibility (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("123d306c-d28d-4049-8ebb-21654078c3a4"))
IComCurveStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStepNum,put=PutStepNum))
    long StepNum;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetHasLBeam,put=PutHasLBeam))
    _bstr_t HasLBeam;
    __declspec(property(get=GetHasRBeam,put=PutHasRBeam))
    _bstr_t HasRBeam;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetPaoType,put=PutPaoType))
    _bstr_t PaoType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetAsAscent,put=PutAsAscent))
    _bstr_t AsAscent;
    __declspec(property(get=GetHasAscentSlab,put=PutHasAscentSlab))
    _bstr_t HasAscentSlab;
    __declspec(property(get=GetOnGround,put=PutOnGround))
    _bstr_t OnGround;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetAlongWall,put=PutAlongWall))
    _bstr_t AlongWall;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    long GetStepNum ( );
    void PutStepNum (
        long pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    _bstr_t GetHasLBeam ( );
    void PutHasLBeam (
        _bstr_t pVal );
    _bstr_t GetHasRBeam ( );
    void PutHasRBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    _bstr_t GetPaoType ( );
    void PutPaoType (
        _bstr_t pVal );
    _bstr_t GetAsAscent ( );
    void PutAsAscent (
        _bstr_t pVal );
    _bstr_t GetHasAscentSlab ( );
    void PutHasAscentSlab (
        _bstr_t pVal );
    _bstr_t GetOnGround ( );
    void PutOnGround (
        _bstr_t pVal );
    _bstr_t GetAlongWall ( );
    void PutAlongWall (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasLBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasLBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasRBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_PaoType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PaoType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AsAscent (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AsAscent (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasAscentSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasAscentSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OnGround (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OnGround (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AlongWall (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlongWall (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("5dfc2c91-2e3a-4460-84bd-cf318e5afa99"))
IComHandRail : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetShape,put=PutShape))
    _bstr_t Shape;
    __declspec(property(get=GetThickness,put=PutThickness))
    _bstr_t Thickness;
    __declspec(property(get=GetVertex,put=PutVertex))
    _variant_t Vertex;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    _bstr_t GetThickness ( );
    void PutThickness (
        _bstr_t pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    _variant_t GetVertex ( );
    void PutVertex (
        const _variant_t & pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    _bstr_t GetShape ( );
    void PutShape (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Vertex (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Vertex (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Shape (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("e386b4e6-4f04-493e-a17e-0902e38e5a19"))
IComLineStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetStepNum,put=PutStepNum))
    long StepNum;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetHasLBeam,put=PutHasLBeam))
    _bstr_t HasLBeam;
    __declspec(property(get=GetHasRBeam,put=PutHasRBeam))
    _bstr_t HasRBeam;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetPaoType,put=PutPaoType))
    _bstr_t PaoType;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetStairWidth,put=PutStairWidth))
    double StairWidth;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetAsAscent,put=PutAsAscent))
    _bstr_t AsAscent;
    __declspec(property(get=GetHasAscentSlab,put=PutHasAscentSlab))
    _bstr_t HasAscentSlab;
    __declspec(property(get=GetOnGround,put=PutOnGround))
    _bstr_t OnGround;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetAlongWall,put=PutAlongWall))
    _bstr_t AlongWall;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetRotation ( );
    void PutRotation (
        double pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetStairWidth ( );
    void PutStairWidth (
        double pVal );
    long GetStepNum ( );
    void PutStepNum (
        long pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    _bstr_t GetHasLBeam ( );
    void PutHasLBeam (
        _bstr_t pVal );
    _bstr_t GetHasRBeam ( );
    void PutHasRBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    _bstr_t GetAsAscent ( );
    void PutAsAscent (
        _bstr_t pVal );
    _bstr_t GetHasAscentSlab ( );
    void PutHasAscentSlab (
        _bstr_t pVal );
    _bstr_t GetOnGround ( );
    void PutOnGround (
        _bstr_t pVal );
    _bstr_t GetAlongWall ( );
    void PutAlongWall (
        _bstr_t pVal );
    _bstr_t GetPaoType ( );
    void PutPaoType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasLBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasLBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasRBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_AsAscent (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AsAscent (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasAscentSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasAscentSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OnGround (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OnGround (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AlongWall (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlongWall (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PaoType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PaoType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("d8f08a01-ce41-44f9-bfce-db68afca8d47"))
IComOpening : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetWinSill,put=PutWinSill))
    double WinSill;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetGetKind))
    _bstr_t GetKind;
    __declspec(property(get=GetOutlineArea))
    _bstr_t OutlineArea;
    __declspec(property(get=GetOutlineLength))
    double OutlineLength;
    __declspec(property(get=GetDoorSill,put=PutDoorSill))
    double DoorSill;
    __declspec(property(get=GetSlot,put=PutSlot))
    _bstr_t Slot;
    __declspec(property(get=GetSlotExt,put=PutSlotExt))
    double SlotExt;
    __declspec(property(get=GetSlotWidth,put=PutSlotWidth))
    double SlotWidth;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetUpLevel,put=PutUpLevel))
    _bstr_t UpLevel;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    double TextHeight;
    __declspec(property(get=GetDoorLine,put=PutDoorLine))
    short DoorLine;
    __declspec(property(get=GetHoleType,put=PutHoleType))
    _bstr_t HoleType;
    __declspec(property(get=GetStructure,put=PutStructure))
    _bstr_t Structure;
    __declspec(property(get=GetExtShading,put=PutExtShading))
    _bstr_t ExtShading;
    __declspec(property(get=GetAreaRatio))
    double AreaRatio;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetGlassLayer,put=PutGlassLayer))
    ACAD_LAYER GlassLayer;
    __declspec(property(get=GetFrameLayer,put=PutFrameLayer))
    ACAD_LAYER FrameLayer;
    __declspec(property(get=GetSlabLayer,put=PutSlabLayer))
    ACAD_LAYER SlabLayer;
    __declspec(property(get=GetUFrame,put=PutUFrame))
    double UFrame;
    __declspec(property(get=GetVFrame,put=PutVFrame))
    double VFrame;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetHideLabel,put=PutHideLabel))
    _bstr_t HideLabel;
    __declspec(property(get=GetSlotMaterial,put=PutSlotMaterial))
    _bstr_t SlotMaterial;
    __declspec(property(get=GetProStyle,put=PutProStyle))
    _bstr_t ProStyle;
    __declspec(property(get=GetLeftSlab,put=PutLeftSlab))
    _bstr_t LeftSlab;
    __declspec(property(get=GetRightSlab,put=PutRightSlab))
    _bstr_t RightSlab;
    __declspec(property(get=GetProWinSlabWidth,put=PutProWinSlabWidth))
    double ProWinSlabWidth;
    __declspec(property(get=GetSlotInsuThick,put=PutSlotInsuThick))
    double SlotInsuThick;
    __declspec(property(get=GetSlotInsuCap,put=PutSlotInsuCap))
    _bstr_t SlotInsuCap;
    __declspec(property(get=GetEvacuationType,put=PutEvacuationType))
    _bstr_t EvacuationType;
    __declspec(property(get=GetLineOffsetDist,put=PutLineOffsetDist))
    double LineOffsetDist;
    __declspec(property(get=GetProWinSlabInsuThick,put=PutProWinSlabInsuThick))
    double ProWinSlabInsuThick;
    __declspec(property(get=GetGetSubKind,put=PutGetSubKind))
    _bstr_t GetSubKind;
    __declspec(property(get=GetBayThick,put=PutBayThick))
    double BayThick;
    __declspec(property(get=GetHoleStyle,put=PutHoleStyle))
    _bstr_t HoleStyle;
    __declspec(property(get=GetConductivity))
    double Conductivity;
    __declspec(property(get=GetUsage,put=PutUsage))
    _bstr_t Usage;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetIsHigh,put=PutIsHigh))
    _bstr_t IsHigh;
    __declspec(property(get=GetStruWinSill,put=PutStruWinSill))
    double StruWinSill;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetHoleType ( );
    void PutHoleType (
        _bstr_t pVal );
    double GetWinSill ( );
    void PutWinSill (
        double pVal );
    double GetDoorSill ( );
    void PutDoorSill (
        double pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetStruWinSill ( );
    void PutStruWinSill (
        double pVal );
    double GetBayThick ( );
    void PutBayThick (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    double GetUFrame ( );
    void PutUFrame (
        double pVal );
    double GetVFrame ( );
    void PutVFrame (
        double pVal );
    _bstr_t GetOutlineArea ( );
    double GetOutlineLength ( );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pVal );
    double GetTextHeight ( );
    void PutTextHeight (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetHideLabel ( );
    void PutHideLabel (
        _bstr_t pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetGlassLayer ( );
    void PutGlassLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetFrameLayer ( );
    void PutFrameLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetSlabLayer ( );
    void PutSlabLayer (
        ACAD_LAYER pVal );
    _bstr_t GetProStyle ( );
    void PutProStyle (
        _bstr_t pVal );
    _bstr_t GetLeftSlab ( );
    void PutLeftSlab (
        _bstr_t pVal );
    _bstr_t GetRightSlab ( );
    void PutRightSlab (
        _bstr_t pVal );
    double GetProWinSlabWidth ( );
    void PutProWinSlabWidth (
        double pVal );
    double GetProWinSlabInsuThick ( );
    void PutProWinSlabInsuThick (
        double pVal );
    _bstr_t GetSlot ( );
    void PutSlot (
        _bstr_t pVal );
    _bstr_t GetSlotMaterial ( );
    void PutSlotMaterial (
        _bstr_t pVal );
    double GetSlotExt ( );
    void PutSlotExt (
        double pVal );
    double GetSlotWidth ( );
    void PutSlotWidth (
        double pVal );
    double GetSlotInsuThick ( );
    void PutSlotInsuThick (
        double pVal );
    _bstr_t GetSlotInsuCap ( );
    void PutSlotInsuCap (
        _bstr_t pVal );
    _bstr_t GetGetKind ( );
    _bstr_t GetGetSubKind ( );
    void PutGetSubKind (
        _bstr_t pVal );
    _bstr_t GetHoleStyle ( );
    void PutHoleStyle (
        _bstr_t pVal );
    _bstr_t GetEvacuationType ( );
    void PutEvacuationType (
        _bstr_t pVal );
    _bstr_t GetUpLevel ( );
    void PutUpLevel (
        _bstr_t pVal );
    short GetDoorLine ( );
    void PutDoorLine (
        short pVal );
    double GetLineOffsetDist ( );
    void PutLineOffsetDist (
        double pVal );
    _bstr_t GetStructure ( );
    void PutStructure (
        _bstr_t pVal );
    _bstr_t GetExtShading ( );
    void PutExtShading (
        _bstr_t pVal );
    double GetAreaRatio ( );
    double GetConductivity ( );
    _bstr_t GetUsage ( );
    void PutUsage (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetIsHigh ( );
    void PutIsHigh (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HoleType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HoleType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_WinSill (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WinSill (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DoorSill (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DoorSill (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StruWinSill (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StruWinSill (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BayThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BayThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UFrame (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_UFrame (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_VFrame (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VFrame (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OutlineArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_OutlineLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HideLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HideLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_GlassLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_GlassLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_FrameLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_FrameLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_SlabLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ProStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ProStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LeftSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ProWinSlabWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ProWinSlabWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ProWinSlabInsuThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ProWinSlabInsuThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Slot (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Slot (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlotMaterial (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SlotMaterial (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlotExt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlotExt (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlotWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlotWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlotInsuThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlotInsuThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlotInsuCap (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SlotInsuCap (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GetKind (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GetSubKind (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_GetSubKind (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HoleStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HoleStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EvacuationType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EvacuationType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpLevel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UpLevel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DoorLine (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_DoorLine (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_LineOffsetDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LineOffsetDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Structure (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Structure (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ExtShading (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ExtShading (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AreaRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Conductivity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Usage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Usage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsHigh (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsHigh (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("eef70547-9e18-4496-8251-1d9ee5d6b81d"))
IComRail : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetUnitWidth,put=PutUnitWidth))
    double UnitWidth;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetAutoExpand,put=PutAutoExpand))
    _bstr_t AutoExpand;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    double GetUnitWidth ( );
    void PutUnitWidth (
        double pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    _bstr_t GetAutoExpand ( );
    void PutAutoExpand (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UnitWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_UnitWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AutoExpand (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoExpand (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("94fcefec-28e6-4e1b-ba21-ae7f5d0b59d2"))
IComRectStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStepNum1,put=PutStepNum1))
    short StepNum1;
    __declspec(property(get=GetStepNum2,put=PutStepNum2))
    short StepNum2;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetStairWidth,put=PutStairWidth))
    double StairWidth;
    __declspec(property(get=GetSpaceWidth,put=PutSpaceWidth))
    double SpaceWidth;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetStruTextHeight,put=PutStruTextHeight))
    _bstr_t StruTextHeight;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailDistToSide,put=PutRailDistToSide))
    double RailDistToSide;
    __declspec(property(get=GetHasSlab,put=PutHasSlab))
    _bstr_t HasSlab;
    __declspec(property(get=GetSlabSize,put=PutSlabSize))
    double SlabSize;
    __declspec(property(get=GetAsAcsent,put=PutAsAcsent))
    _bstr_t AsAcsent;
    __declspec(property(get=GetHasAcsentSlab,put=PutHasAcsentSlab))
    _bstr_t HasAcsentSlab;
    __declspec(property(get=GetOnGround,put=PutOnGround))
    _bstr_t OnGround;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetPlatType,put=PutPlatType))
    _bstr_t PlatType;
    __declspec(property(get=GetLeftBeam,put=PutLeftBeam))
    _bstr_t LeftBeam;
    __declspec(property(get=GetRightBeam,put=PutRightBeam))
    _bstr_t RightBeam;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetFirstRailDist,put=PutFirstRailDist))
    double FirstRailDist;
    __declspec(property(get=GetEndRailDist,put=PutEndRailDist))
    double EndRailDist;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetStepTotalNum,put=PutStepTotalNum))
    short StepTotalNum;
    __declspec(property(get=GetRailConnection,put=PutRailConnection))
    _bstr_t RailConnection;
    __declspec(property(get=GetHasOutRail,put=PutHasOutRail))
    _bstr_t HasOutRail;
    __declspec(property(get=GetHasOutHandRail,put=PutHasOutHandRail))
    _bstr_t HasOutHandRail;
    __declspec(property(get=GetSectHeight,put=PutSectHeight))
    double SectHeight;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetEvacuateDia,put=PutEvacuateDia))
    _bstr_t EvacuateDia;
    __declspec(property(get=GetEvacuateDiaPos,put=PutEvacuateDiaPos))
    _bstr_t EvacuateDiaPos;
    __declspec(property(get=GetEvacuateDiaColor,put=PutEvacuateDiaColor))
    _variant_t EvacuateDiaColor;
    __declspec(property(get=GetStruFontStyle,put=PutStruFontStyle))
    _bstr_t StruFontStyle;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetSlabThick,put=PutSlabThick))
    double SlabThick;
    __declspec(property(get=GetStairThick,put=PutStairThick))
    double StairThick;
    __declspec(property(get=GetUpSlabWidth,put=PutUpSlabWidth))
    double UpSlabWidth;
    __declspec(property(get=GetDownSlabWidth,put=PutDownSlabWidth))
    double DownSlabWidth;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetSpaceWidth ( );
    void PutSpaceWidth (
        double pVal );
    double GetStairWidth ( );
    void PutStairWidth (
        double pVal );
    double GetSlabThick ( );
    void PutSlabThick (
        double pVal );
    double GetStairThick ( );
    void PutStairThick (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetUpSlabWidth ( );
    void PutUpSlabWidth (
        double pVal );
    double GetDownSlabWidth ( );
    void PutDownSlabWidth (
        double pVal );
    short GetStepTotalNum ( );
    void PutStepTotalNum (
        short pVal );
    _bstr_t GetStruTextHeight ( );
    void PutStruTextHeight (
        _bstr_t pVal );
    _bstr_t GetStruFontStyle ( );
    void PutStruFontStyle (
        _bstr_t pVal );
    short GetStepNum1 ( );
    void PutStepNum1 (
        short pVal );
    short GetStepNum2 ( );
    void PutStepNum2 (
        short pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailDistToSide ( );
    void PutRailDistToSide (
        double pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    _bstr_t GetHasOutRail ( );
    void PutHasOutRail (
        _bstr_t pVal );
    _bstr_t GetHasOutHandRail ( );
    void PutHasOutHandRail (
        _bstr_t pVal );
    _bstr_t GetRailConnection ( );
    void PutRailConnection (
        _bstr_t pVal );
    _bstr_t GetPlatType ( );
    void PutPlatType (
        _bstr_t pVal );
    _bstr_t GetHasSlab ( );
    void PutHasSlab (
        _bstr_t pVal );
    double GetSlabSize ( );
    void PutSlabSize (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    _bstr_t GetLeftBeam ( );
    void PutLeftBeam (
        _bstr_t pVal );
    _bstr_t GetRightBeam ( );
    void PutRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetAsAcsent ( );
    void PutAsAcsent (
        _bstr_t pVal );
    _bstr_t GetHasAcsentSlab ( );
    void PutHasAcsentSlab (
        _bstr_t pVal );
    _bstr_t GetOnGround ( );
    void PutOnGround (
        _bstr_t pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    double GetFirstRailDist ( );
    void PutFirstRailDist (
        double pVal );
    double GetEndRailDist ( );
    void PutEndRailDist (
        double pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );
    double GetSectHeight ( );
    void PutSectHeight (
        double pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );
    _bstr_t GetEvacuateDia ( );
    void PutEvacuateDia (
        _bstr_t pVal );
    _bstr_t GetEvacuateDiaPos ( );
    void PutEvacuateDiaPos (
        _bstr_t pVal );
    _variant_t GetEvacuateDiaColor ( );
    void PutEvacuateDiaColor (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpaceWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UpSlabWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_UpSlabWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DownSlabWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DownSlabWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepTotalNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepTotalNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StruTextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StruTextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StruFontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StruFontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum1 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum1 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum2 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum2 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailDistToSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDistToSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutHandRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutHandRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailConnection (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailConnection (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PlatType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PlatType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_AsAcsent (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AsAcsent (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasAcsentSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasAcsentSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OnGround (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OnGround (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FirstRailDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstRailDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndRailDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndRailDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SectHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_EvacuateDia (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EvacuateDia (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EvacuateDiaPos (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EvacuateDiaPos (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EvacuateDiaColor (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_EvacuateDiaColor (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("476d9e0f-83ce-476f-88e0-7ac656618697"))
IComSlab : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetThickness ( );
    void PutThickness (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("fbb869e3-272a-4f92-94df-a56a6965a3f8"))
IComSlopeRoof : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetVertex,put=PutVertex))
    _variant_t Vertex;
    __declspec(property(get=GetSlopeAngle,put=PutSlopeAngle))
    double SlopeAngle;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    _variant_t GetVertex ( );
    void PutVertex (
        const _variant_t & pVal );
    double GetSlopeAngle ( );
    void PutSlopeAngle (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Vertex (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Vertex (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_SlopeAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlopeAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("f949c36f-53a8-45a5-b801-570e486b92bd"))
IComSpace : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetCode,put=PutCode))
    _bstr_t Code;
    __declspec(property(get=GetUseVolume))
    _bstr_t UseVolume;
    __declspec(property(get=GetUseArea))
    _bstr_t UseArea;
    __declspec(property(get=GetOccuArea))
    _bstr_t OccuArea;
    __declspec(property(get=GetWallSurfArea))
    _bstr_t WallSurfArea;
    __declspec(property(get=GetExtWallArea))
    _bstr_t ExtWallArea;
    __declspec(property(get=GetExtWinArea))
    _bstr_t ExtWinArea;
    __declspec(property(get=GetExtDoorArea))
    _bstr_t ExtDoorArea;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetPerimeter))
    double Perimeter;
    __declspec(property(get=GetKickboard))
    double Kickboard;
    __declspec(property(get=GetMaskFlag,put=PutMaskFlag))
    _bstr_t MaskFlag;
    __declspec(property(get=GetNameType,put=PutNameType))
    _bstr_t NameType;
    __declspec(property(get=GetName2,put=PutName2))
    _bstr_t Name2;
    __declspec(property(get=GetShowHatch,put=PutShowHatch))
    _bstr_t ShowHatch;
    __declspec(property(get=GetHatchStyle,put=PutHatchStyle))
    _bstr_t HatchStyle;
    __declspec(property(get=GetStructure,put=PutStructure))
    _bstr_t Structure;
    __declspec(property(get=GetStructure2,put=PutStructure2))
    _bstr_t Structure2;
    __declspec(property(get=GetFloorType,put=PutFloorType))
    _bstr_t FloorType;
    __declspec(property(get=GetFloor3D,put=PutFloor3D))
    _bstr_t Floor3D;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    double TextHeight;
    __declspec(property(get=GetTextRotation,put=PutTextRotation))
    double TextRotation;
    __declspec(property(get=GetFloorThickness,put=PutFloorThickness))
    double FloorThickness;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetStuccoThickness,put=PutStuccoThickness))
    double StuccoThickness;
    __declspec(property(get=GetShowCode,put=PutShowCode))
    _bstr_t ShowCode;
    __declspec(property(get=GetShowName,put=PutShowName))
    _bstr_t ShowName;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetConductivity))
    double Conductivity;
    __declspec(property(get=GetHasRoof,put=PutHasRoof))
    _bstr_t HasRoof;
    __declspec(property(get=GetConductivity2))
    double Conductivity2;
    __declspec(property(get=GetInertiaIndex2))
    double InertiaIndex2;
    __declspec(property(get=GetAreaComputeType,put=PutAreaComputeType))
    _bstr_t AreaComputeType;
    __declspec(property(get=GetHatchLayer,put=PutHatchLayer))
    ACAD_LAYER HatchLayer;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetShowArea,put=PutShowArea))
    _bstr_t ShowArea;
    __declspec(property(get=GetDispMode,put=PutDispMode))
    _bstr_t DispMode;
    __declspec(property(get=GetShowOutLine,put=PutShowOutLine))
    _bstr_t ShowOutLine;
    __declspec(property(get=GetAreaUnit,put=PutAreaUnit))
    _bstr_t AreaUnit;
    __declspec(property(get=GetHatchColor,put=PutHatchColor))
    _variant_t HatchColor;
    __declspec(property(get=GetHatchScale,put=PutHatchScale))
    _bstr_t HatchScale;
    __declspec(property(get=GetHatchAngle,put=PutHatchAngle))
    _bstr_t HatchAngle;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetDispMode ( );
    void PutDispMode (
        _bstr_t pVal );
    _bstr_t GetCode ( );
    void PutCode (
        _bstr_t pVal );
    _bstr_t GetShowCode ( );
    void PutShowCode (
        _bstr_t pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    double GetFloorThickness ( );
    void PutFloorThickness (
        double pVal );
    double GetStuccoThickness ( );
    void PutStuccoThickness (
        double pVal );
    double GetKickboard ( );
    double GetPerimeter ( );
    _bstr_t GetUseVolume ( );
    _bstr_t GetUseArea ( );
    _bstr_t GetOccuArea ( );
    _bstr_t GetWallSurfArea ( );
    _bstr_t GetExtWallArea ( );
    _bstr_t GetExtWinArea ( );
    _bstr_t GetExtDoorArea ( );
    _bstr_t GetAreaComputeType ( );
    void PutAreaComputeType (
        _bstr_t pVal );
    ACAD_LAYER GetHatchLayer ( );
    void PutHatchLayer (
        ACAD_LAYER pVal );
    _bstr_t GetMaskFlag ( );
    void PutMaskFlag (
        _bstr_t pVal );
    _bstr_t GetFloor3D ( );
    void PutFloor3D (
        _bstr_t pVal );
    _bstr_t GetNameType ( );
    void PutNameType (
        _bstr_t pVal );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetName2 ( );
    void PutName2 (
        _bstr_t pVal );
    _bstr_t GetShowName ( );
    void PutShowName (
        _bstr_t pVal );
    _bstr_t GetShowArea ( );
    void PutShowArea (
        _bstr_t pVal );
    _bstr_t GetAreaUnit ( );
    void PutAreaUnit (
        _bstr_t pVal );
    double GetTextHeight ( );
    void PutTextHeight (
        double pVal );
    double GetTextRotation ( );
    void PutTextRotation (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetFloorType ( );
    void PutFloorType (
        _bstr_t pVal );
    _bstr_t GetStructure ( );
    void PutStructure (
        _bstr_t pVal );
    double GetConductivity ( );
    _bstr_t GetHasRoof ( );
    void PutHasRoof (
        _bstr_t pVal );
    _bstr_t GetStructure2 ( );
    void PutStructure2 (
        _bstr_t pVal );
    double GetConductivity2 ( );
    double GetInertiaIndex2 ( );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetShowOutLine ( );
    void PutShowOutLine (
        _bstr_t pVal );
    _bstr_t GetShowHatch ( );
    void PutShowHatch (
        _bstr_t pVal );
    _bstr_t GetHatchStyle ( );
    void PutHatchStyle (
        _bstr_t pVal );
    _variant_t GetHatchColor ( );
    void PutHatchColor (
        const _variant_t & pVal );
    _bstr_t GetHatchScale ( );
    void PutHatchScale (
        _bstr_t pVal );
    _bstr_t GetHatchAngle ( );
    void PutHatchAngle (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DispMode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DispMode (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Code (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Code (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowCode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowCode (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FloorThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StuccoThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StuccoThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Kickboard (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Perimeter (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_UseVolume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UseArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_OccuArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_WallSurfArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ExtWallArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ExtWinArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ExtDoorArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_AreaComputeType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AreaComputeType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_MaskFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MaskFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Floor3D (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Floor3D (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NameType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NameType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Name2 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name2 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowArea (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AreaUnit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AreaUnit (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FloorType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Structure (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Structure (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Conductivity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_HasRoof (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRoof (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Structure2 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Structure2 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Conductivity2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_InertiaIndex2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowOutLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowOutLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowHatch (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowHatch (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchColor (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchColor (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_HatchScale (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchScale (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchAngle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchAngle (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("2ba2c08f-3ba3-4ecb-9924-c724e4c2eade"))
IComFireZone : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetFireZoneName,put=PutFireZoneName))
    _bstr_t FireZoneName;
    __declspec(property(get=GetFireZoneSumArea,put=PutFireZoneSumArea))
    double FireZoneSumArea;
    __declspec(property(get=GetSubFireZoneName,put=PutSubFireZoneName))
    _bstr_t SubFireZoneName;
    __declspec(property(get=GetSubFireZoneArea,put=PutSubFireZoneArea))
    double SubFireZoneArea;
    __declspec(property(get=GetFireZoneFunction,put=PutFireZoneFunction))
    _bstr_t FireZoneFunction;
    __declspec(property(get=GetAutoExtinguishingSys,put=PutAutoExtinguishingSys))
    _bstr_t AutoExtinguishingSys;
    __declspec(property(get=GetLocalSprayArea,put=PutLocalSprayArea))
    double LocalSprayArea;
    __declspec(property(get=GetStandardRange,put=PutStandardRange))
    _bstr_t StandardRange;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    double TextHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetIsDimFireZoneName,put=PutIsDimFireZoneName))
    _bstr_t IsDimFireZoneName;
    __declspec(property(get=GetIsDimSumArea,put=PutIsDimSumArea))
    _bstr_t IsDimSumArea;
    __declspec(property(get=GetIsDimSubNameAndArea,put=PutIsDimSubNameAndArea))
    _bstr_t IsDimSubNameAndArea;
    __declspec(property(get=GetIsDimFunction,put=PutIsDimFunction))
    _bstr_t IsDimFunction;
    __declspec(property(get=GetIsDimAutoExtinguishingSys,put=PutIsDimAutoExtinguishingSys))
    _bstr_t IsDimAutoExtinguishingSys;
    __declspec(property(get=GetAreaAccuracy,put=PutAreaAccuracy))
    _bstr_t AreaAccuracy;
    __declspec(property(get=GetHatchLayer,put=PutHatchLayer))
    ACAD_LAYER HatchLayer;
    __declspec(property(get=GetIsDimTextFrame,put=PutIsDimTextFrame))
    _bstr_t IsDimTextFrame;
    __declspec(property(get=GetIsDimFireZoneMask,put=PutIsDimFireZoneMask))
    _bstr_t IsDimFireZoneMask;
    __declspec(property(get=GetOutLineWidth,put=PutOutLineWidth))
    double OutLineWidth;
    __declspec(property(get=GetHasHatch,put=PutHasHatch))
    _bstr_t HasHatch;
    __declspec(property(get=GetHatchStyle,put=PutHatchStyle))
    _bstr_t HatchStyle;
    __declspec(property(get=GetHatchColor,put=PutHatchColor))
    _variant_t HatchColor;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetHatchAngle,put=PutHatchAngle))
    _bstr_t HatchAngle;
    __declspec(property(get=GetHatchScale,put=PutHatchScale))
    _bstr_t HatchScale;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetHaveSubFireZone,put=PutHaveSubFireZone))
    _bstr_t HaveSubFireZone;
    __declspec(property(get=GetIsDimFireZoneUint,put=PutIsDimFireZoneUint))
    _bstr_t IsDimFireZoneUint;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetTextHeight ( );
    void PutTextHeight (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetIsDimFireZoneName ( );
    void PutIsDimFireZoneName (
        _bstr_t pVal );
    _bstr_t GetIsDimSumArea ( );
    void PutIsDimSumArea (
        _bstr_t pVal );
    _bstr_t GetIsDimSubNameAndArea ( );
    void PutIsDimSubNameAndArea (
        _bstr_t pVal );
    _bstr_t GetIsDimFunction ( );
    void PutIsDimFunction (
        _bstr_t pVal );
    _bstr_t GetIsDimAutoExtinguishingSys ( );
    void PutIsDimAutoExtinguishingSys (
        _bstr_t pVal );
    _bstr_t GetIsDimFireZoneUint ( );
    void PutIsDimFireZoneUint (
        _bstr_t pVal );
    _bstr_t GetAreaAccuracy ( );
    void PutAreaAccuracy (
        _bstr_t pVal );
    _bstr_t GetFireZoneName ( );
    void PutFireZoneName (
        _bstr_t pVal );
    double GetFireZoneSumArea ( );
    void PutFireZoneSumArea (
        double pVal );
    _bstr_t GetHaveSubFireZone ( );
    void PutHaveSubFireZone (
        _bstr_t pVal );
    _bstr_t GetSubFireZoneName ( );
    void PutSubFireZoneName (
        _bstr_t pVal );
    double GetSubFireZoneArea ( );
    void PutSubFireZoneArea (
        double pVal );
    _bstr_t GetFireZoneFunction ( );
    void PutFireZoneFunction (
        _bstr_t pVal );
    _bstr_t GetAutoExtinguishingSys ( );
    void PutAutoExtinguishingSys (
        _bstr_t pVal );
    double GetLocalSprayArea ( );
    void PutLocalSprayArea (
        double pVal );
    _bstr_t GetStandardRange ( );
    void PutStandardRange (
        _bstr_t pVal );
    ACAD_LAYER GetHatchLayer ( );
    void PutHatchLayer (
        ACAD_LAYER pVal );
    _bstr_t GetIsDimTextFrame ( );
    void PutIsDimTextFrame (
        _bstr_t pVal );
    _bstr_t GetIsDimFireZoneMask ( );
    void PutIsDimFireZoneMask (
        _bstr_t pVal );
    double GetOutLineWidth ( );
    void PutOutLineWidth (
        double pVal );
    _bstr_t GetHasHatch ( );
    void PutHasHatch (
        _bstr_t pVal );
    _bstr_t GetHatchStyle ( );
    void PutHatchStyle (
        _bstr_t pVal );
    _variant_t GetHatchColor ( );
    void PutHatchColor (
        const _variant_t & pVal );
    _bstr_t GetHatchScale ( );
    void PutHatchScale (
        _bstr_t pVal );
    _bstr_t GetHatchAngle ( );
    void PutHatchAngle (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_IsDimFireZoneName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDimFireZoneName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsDimSumArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDimSumArea (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsDimSubNameAndArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDimSubNameAndArea (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsDimFunction (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDimFunction (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsDimAutoExtinguishingSys (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDimAutoExtinguishingSys (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsDimFireZoneUint (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDimFireZoneUint (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AreaAccuracy (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AreaAccuracy (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FireZoneName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FireZoneName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FireZoneSumArea (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FireZoneSumArea (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HaveSubFireZone (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HaveSubFireZone (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SubFireZoneName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SubFireZoneName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SubFireZoneArea (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SubFireZoneArea (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FireZoneFunction (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FireZoneFunction (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AutoExtinguishingSys (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoExtinguishingSys (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LocalSprayArea (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LocalSprayArea (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StandardRange (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StandardRange (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_IsDimTextFrame (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDimTextFrame (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsDimFireZoneMask (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDimFireZoneMask (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OutLineWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OutLineWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasHatch (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasHatch (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchColor (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchColor (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_HatchScale (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchScale (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchAngle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchAngle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("ba7bdc1f-1dc5-4a4f-9ade-1477089c5e46"))
IComStep : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStepNum,put=PutStepNum))
    long StepNum;
    __declspec(property(get=GetAllStepHeight))
    double AllStepHeight;
    __declspec(property(get=GetBaseFace,put=PutBaseFace))
    _bstr_t BaseFace;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetDownStep,put=PutDownStep))
    _bstr_t DownStep;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    long GetStepNum ( );
    void PutStepNum (
        long pVal );
    double GetAllStepHeight ( );
    _bstr_t GetBaseFace ( );
    void PutBaseFace (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetDownStep ( );
    void PutDownStep (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AllStepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_BaseFace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BaseFace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DownStep (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DownStep (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("d3860f81-5a4a-404e-b373-5e7a6a9e8ee6"))
IComVertSlab : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStartPoint,put=PutStartPoint))
    double StartPoint;
    __declspec(property(get=GetEndPoint,put=PutEndPoint))
    double EndPoint;
    __declspec(property(get=GetHeightS,put=PutHeightS))
    double HeightS;
    __declspec(property(get=GetHeightE,put=PutHeightE))
    double HeightE;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    double GetStartPoint ( );
    void PutStartPoint (
        double pVal );
    double GetEndPoint ( );
    void PutEndPoint (
        double pVal );
    double GetHeightS ( );
    void PutHeightS (
        double pVal );
    double GetHeightE ( );
    void PutHeightE (
        double pVal );
    double GetThickness ( );
    void PutThickness (
        double pVal );
    _bstr_t GetVolume ( );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StartPoint (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartPoint (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndPoint (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndPoint (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HeightS (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HeightS (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HeightE (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HeightE (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("769ad814-ea8e-41d5-a6a5-3a9c69d31c6a"))
IComWall : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetLeftWidth,put=PutLeftWidth))
    double LeftWidth;
    __declspec(property(get=GetRightWidth,put=PutRightWidth))
    double RightWidth;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetLSurfaceArea))
    _bstr_t LSurfaceArea;
    __declspec(property(get=GetRSurfaceArea))
    _bstr_t RSurfaceArea;
    __declspec(property(get=GetHoleArea))
    _bstr_t HoleArea;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetHoleVolume))
    _bstr_t HoleVolume;
    __declspec(property(get=GetLeftLayer,put=PutLeftLayer))
    ACAD_LAYER LeftLayer;
    __declspec(property(get=GetIsArc))
    _bstr_t IsArc;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetIsExternal))
    _bstr_t IsExternal;
    __declspec(property(get=GetTopFace,put=PutTopFace))
    _bstr_t TopFace;
    __declspec(property(get=GetBottomFace,put=PutBottomFace))
    _bstr_t BottomFace;
    __declspec(property(get=GetEndClose,put=PutEndClose))
    _bstr_t EndClose;
    __declspec(property(get=GetStructure,put=PutStructure))
    _bstr_t Structure;
    __declspec(property(get=GetAreaRatio))
    double AreaRatio;
    __declspec(property(get=GetConductivity))
    double Conductivity;
    __declspec(property(get=GetUsage,put=PutUsage))
    _bstr_t Usage;
    __declspec(property(get=GetStyle,put=PutStyle))
    _bstr_t Style;
    __declspec(property(get=GetRightLayer,put=PutRightLayer))
    ACAD_LAYER RightLayer;
    __declspec(property(get=GetHatchLayer,put=PutHatchLayer))
    ACAD_LAYER HatchLayer;
    __declspec(property(get=GetSurfLayer,put=PutSurfLayer))
    ACAD_LAYER SurfLayer;
    __declspec(property(get=GetLeftSpace))
    _bstr_t LeftSpace;
    __declspec(property(get=GetRightSpace))
    _bstr_t RightSpace;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetInertiaIndex))
    double InertiaIndex;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetTotalWidth))
    double TotalWidth;
    __declspec(property(get=GetInsulate,put=PutInsulate))
    _bstr_t Insulate;
    __declspec(property(get=GetInsuThick,put=PutInsuThick))
    double InsuThick;
    __declspec(property(get=GetEnUsage,put=PutEnUsage))
    _bstr_t EnUsage;
    __declspec(property(get=GetIOFeature,put=PutIOFeature))
    _bstr_t IOFeature;
    __declspec(property(get=GetStruIsArc))
    _bstr_t StruIsArc;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetLeftInsuThick,put=PutLeftInsuThick))
    double LeftInsuThick;
    __declspec(property(get=GetRightInsuThick,put=PutRightInsuThick))
    double RightInsuThick;
    __declspec(property(get=GetStruHeight,put=PutStruHeight))
    double StruHeight;
    __declspec(property(get=GetStemInsulate,put=PutStemInsulate))
    _bstr_t StemInsulate;
    __declspec(property(get=GetStemInsulateThick,put=PutStemInsulateThick))
    double StemInsulateThick;
    __declspec(property(get=GetInsulateClose,put=PutInsulateClose))
    _bstr_t InsulateClose;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetHideLabel,put=PutHideLabel))
    _bstr_t HideLabel;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetLeftWidth ( );
    void PutLeftWidth (
        double pVal );
    double GetRightWidth ( );
    void PutRightWidth (
        double pVal );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetHideLabel ( );
    void PutHideLabel (
        _bstr_t pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    _bstr_t GetIsArc ( );
    _bstr_t GetStruIsArc ( );
    _bstr_t GetLSurfaceArea ( );
    _bstr_t GetRSurfaceArea ( );
    _bstr_t GetHoleArea ( );
    _bstr_t GetVolume ( );
    _bstr_t GetHoleVolume ( );
    ACAD_LAYER GetLeftLayer ( );
    void PutLeftLayer (
        ACAD_LAYER pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    _bstr_t GetIsExternal ( );
    _bstr_t GetTopFace ( );
    void PutTopFace (
        _bstr_t pVal );
    _bstr_t GetBottomFace ( );
    void PutBottomFace (
        _bstr_t pVal );
    _bstr_t GetEndClose ( );
    void PutEndClose (
        _bstr_t pVal );
    _bstr_t GetUsage ( );
    void PutUsage (
        _bstr_t pVal );
    _bstr_t GetStyle ( );
    void PutStyle (
        _bstr_t pVal );
    ACAD_LAYER GetRightLayer ( );
    void PutRightLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHatchLayer ( );
    void PutHatchLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetSurfLayer ( );
    void PutSurfLayer (
        ACAD_LAYER pVal );
    _bstr_t GetLeftSpace ( );
    _bstr_t GetRightSpace ( );
    _bstr_t GetEnUsage ( );
    void PutEnUsage (
        _bstr_t pVal );
    _bstr_t GetIOFeature ( );
    void PutIOFeature (
        _bstr_t pVal );
    _bstr_t GetStructure ( );
    void PutStructure (
        _bstr_t pVal );
    double GetAreaRatio ( );
    double GetConductivity ( );
    double GetInertiaIndex ( );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    double GetTotalWidth ( );
    _bstr_t GetInsulate ( );
    void PutInsulate (
        _bstr_t pVal );
    double GetInsuThick ( );
    void PutInsuThick (
        double pVal );
    double GetStruHeight ( );
    void PutStruHeight (
        double pVal );
    double GetLeftInsuThick ( );
    void PutLeftInsuThick (
        double pVal );
    double GetRightInsuThick ( );
    void PutRightInsuThick (
        double pVal );
    _bstr_t GetStemInsulate ( );
    void PutStemInsulate (
        _bstr_t pVal );
    double GetStemInsulateThick ( );
    void PutStemInsulateThick (
        double pVal );
    _bstr_t GetInsulateClose ( );
    void PutInsulateClose (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RightWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RightWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HideLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HideLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IsArc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_StruIsArc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LSurfaceArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RSurfaceArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_HoleArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_HoleVolume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LeftLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IsExternal (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_TopFace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TopFace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BottomFace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BottomFace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EndClose (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EndClose (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Usage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Usage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RightLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HatchLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_SurfLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_SurfLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_LeftSpace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RightSpace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_EnUsage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EnUsage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IOFeature (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IOFeature (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Structure (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Structure (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AreaRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Conductivity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_InertiaIndex (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TotalWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Insulate (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Insulate (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_InsuThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_InsuThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StruHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StruHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftInsuThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftInsuThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RightInsuThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RightInsuThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StemInsulate (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StemInsulate (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StemInsulateThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StemInsulateThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InsulateClose (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InsulateClose (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("f66343ee-0f26-4a58-b91b-ffbd17cef1a3"))
IComWallPatch : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetArea))
    _bstr_t Area;
    __declspec(property(get=GetLayerHatch,put=PutLayerHatch))
    ACAD_LAYER LayerHatch;
    __declspec(property(get=GetSurfLayer,put=PutSurfLayer))
    ACAD_LAYER SurfLayer;
    __declspec(property(get=GetInsulate,put=PutInsulate))
    _bstr_t Insulate;
    __declspec(property(get=GetInsuThick,put=PutInsuThick))
    double InsuThick;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    _bstr_t GetVolume ( );
    _bstr_t GetArea ( );
    ACAD_LAYER GetLayerHatch ( );
    void PutLayerHatch (
        ACAD_LAYER pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    ACAD_LAYER GetSurfLayer ( );
    void PutSurfLayer (
        ACAD_LAYER pVal );
    _bstr_t GetInsulate ( );
    void PutInsulate (
        _bstr_t pVal );
    double GetInsuThick ( );
    void PutInsuThick (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LayerHatch (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_LayerHatch (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SurfLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_SurfLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_Insulate (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Insulate (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_InsuThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_InsuThick (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("c130da97-36b4-42b0-b26c-85e179048038"))
IComLineText : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    _bstr_t Height;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHeight ( );
    void PutHeight (
        _bstr_t pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    double GetRotation ( );
    void PutRotation (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("c6db89f5-2a2b-4ac7-bcc3-24418b2cb4c3"))
IComMutiText : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    _bstr_t Height;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetPageWidth,put=PutPageWidth))
    _bstr_t PageWidth;
    __declspec(property(get=GetLineSpace,put=PutLineSpace))
    _bstr_t LineSpace;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHeight ( );
    void PutHeight (
        _bstr_t pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    double GetRotation ( );
    void PutRotation (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetPageWidth ( );
    void PutPageWidth (
        _bstr_t pVal );
    _bstr_t GetLineSpace ( );
    void PutLineSpace (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PageWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PageWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LineSpace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LineSpace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("59d1ceac-08de-46d2-aa6c-30ecc7baf05b"))
IComSymbComposing : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    _bstr_t Height;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTextSide,put=PutTextSide))
    _bstr_t TextSide;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetParagraphSpace,put=PutParagraphSpace))
    _bstr_t ParagraphSpace;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetLineSpace,put=PutLineSpace))
    _bstr_t LineSpace;
    __declspec(property(get=GetTextType,put=PutTextType))
    _bstr_t TextType;
    __declspec(property(get=GetPageWidth,put=PutPageWidth))
    _bstr_t PageWidth;
    __declspec(property(get=GetText2BaseRatio,put=PutText2BaseRatio))
    _bstr_t Text2BaseRatio;
    __declspec(property(get=GetTextBaseLen,put=PutTextBaseLen))
    _bstr_t TextBaseLen;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetSpace,put=PutSpace))
    _bstr_t Space;
    __declspec(property(get=GetDist2Line,put=PutDist2Line))
    _bstr_t Dist2Line;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetCirPointSize,put=PutCirPointSize))
    _bstr_t CirPointSize;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHeight ( );
    void PutHeight (
        _bstr_t pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetTextSide ( );
    void PutTextSide (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetParagraphSpace ( );
    void PutParagraphSpace (
        _bstr_t pVal );
    _bstr_t GetLineSpace ( );
    void PutLineSpace (
        _bstr_t pVal );
    _bstr_t GetText2BaseRatio ( );
    void PutText2BaseRatio (
        _bstr_t pVal );
    _bstr_t GetTextType ( );
    void PutTextType (
        _bstr_t pVal );
    _bstr_t GetTextBaseLen ( );
    void PutTextBaseLen (
        _bstr_t pVal );
    _bstr_t GetDist2Line ( );
    void PutDist2Line (
        _bstr_t pVal );
    _bstr_t GetPageWidth ( );
    void PutPageWidth (
        _bstr_t pVal );
    _bstr_t GetSpace ( );
    void PutSpace (
        _bstr_t pVal );
    _bstr_t GetCirPointSize ( );
    void PutCirPointSize (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ParagraphSpace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ParagraphSpace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LineSpace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LineSpace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text2BaseRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text2BaseRatio (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextBaseLen (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextBaseLen (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Dist2Line (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Dist2Line (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PageWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PageWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Space (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Space (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CirPointSize (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CirPointSize (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("1c350fb6-dd30-4971-8e6b-69ec43f139cf"))
IComSymbArrow : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    _bstr_t Height;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetArrowSize,put=PutArrowSize))
    _bstr_t ArrowSize;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetText2BaseRatio,put=PutText2BaseRatio))
    _bstr_t Text2BaseRatio;
    __declspec(property(get=GetText2,put=PutText2))
    _bstr_t Text2;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHeight ( );
    void PutHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetText2 ( );
    void PutText2 (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetArrowSize ( );
    void PutArrowSize (
        _bstr_t pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetText2BaseRatio ( );
    void PutText2BaseRatio (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text2 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text2 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowSize (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowSize (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Text2BaseRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text2BaseRatio (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("714fddb3-ce33-4e75-a092-2ac8acdf87dd"))
IComSymbDrawingIndex : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetDrawingLabel,put=PutDrawingLabel))
    _bstr_t DrawingLabel;
    __declspec(property(get=GetIndexLabel,put=PutIndexLabel))
    _bstr_t IndexLabel;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetDiameter,put=PutDiameter))
    _bstr_t Diameter;
    __declspec(property(get=GetLineWeight,put=PutLineWeight))
    _bstr_t LineWeight;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetShowScale,put=PutShowScale))
    _bstr_t ShowScale;
    __declspec(property(get=GetScaleText,put=PutScaleText))
    _bstr_t ScaleText;
    __declspec(property(get=GetScaleStyle,put=PutScaleStyle))
    _bstr_t ScaleStyle;
    __declspec(property(get=GetScaleHeight,put=PutScaleHeight))
    _bstr_t ScaleHeight;
    __declspec(property(get=GetTextRatio,put=PutTextRatio))
    _bstr_t TextRatio;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetOldStyle,put=PutOldStyle))
    _bstr_t OldStyle;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetDrawingLabel ( );
    void PutDrawingLabel (
        _bstr_t pVal );
    _bstr_t GetIndexLabel ( );
    void PutIndexLabel (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetDiameter ( );
    void PutDiameter (
        _bstr_t pVal );
    _bstr_t GetLineWeight ( );
    void PutLineWeight (
        _bstr_t pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetShowScale ( );
    void PutShowScale (
        _bstr_t pVal );
    _bstr_t GetScaleText ( );
    void PutScaleText (
        _bstr_t pVal );
    _bstr_t GetScaleStyle ( );
    void PutScaleStyle (
        _bstr_t pVal );
    _bstr_t GetScaleHeight ( );
    void PutScaleHeight (
        _bstr_t pVal );
    _bstr_t GetOldStyle ( );
    void PutOldStyle (
        _bstr_t pVal );
    _bstr_t GetTextRatio ( );
    void PutTextRatio (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawingLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawingLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IndexLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IndexLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Diameter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Diameter (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowScale (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowScale (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OldStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OldStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextRatio (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("aa954dfd-0bc1-484e-a2b9-36eb133b9364"))
IComSymbInSight : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetDrawingLabel,put=PutDrawingLabel))
    _bstr_t DrawingLabel;
    __declspec(property(get=GetIndexLabel,put=PutIndexLabel))
    _bstr_t IndexLabel;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetDiameter,put=PutDiameter))
    _bstr_t Diameter;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetTextRatio,put=PutTextRatio))
    _bstr_t TextRatio;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetIndexLabel ( );
    void PutIndexLabel (
        _bstr_t pVal );
    _bstr_t GetDrawingLabel ( );
    void PutDrawingLabel (
        _bstr_t pVal );
    _bstr_t GetDiameter ( );
    void PutDiameter (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetTextRatio ( );
    void PutTextRatio (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IndexLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IndexLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawingLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawingLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Diameter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Diameter (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_TextRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextRatio (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("03d2f728-b730-4f03-8a14-963b350c744f"))
IComSymbMultiLeader : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    _bstr_t Height;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetArrowStyle,put=PutArrowStyle))
    _bstr_t ArrowStyle;
    __declspec(property(get=GetUpText,put=PutUpText))
    _bstr_t UpText;
    __declspec(property(get=GetDownText,put=PutDownText))
    _bstr_t DownText;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetText2BaseRatio,put=PutText2BaseRatio))
    _bstr_t Text2BaseRatio;
    __declspec(property(get=GetAlignType,put=PutAlignType))
    _bstr_t AlignType;
    __declspec(property(get=GetUpTextType,put=PutUpTextType))
    _bstr_t UpTextType;
    __declspec(property(get=GetDownTextType,put=PutDownTextType))
    _bstr_t DownTextType;
    __declspec(property(get=GetUpPageWidth,put=PutUpPageWidth))
    _bstr_t UpPageWidth;
    __declspec(property(get=GetDownPageWidth,put=PutDownPageWidth))
    _bstr_t DownPageWidth;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHeight ( );
    void PutHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetArrowStyle ( );
    void PutArrowStyle (
        _bstr_t pVal );
    _bstr_t GetUpText ( );
    void PutUpText (
        _bstr_t pVal );
    _bstr_t GetDownText ( );
    void PutDownText (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetText2BaseRatio ( );
    void PutText2BaseRatio (
        _bstr_t pVal );
    _bstr_t GetAlignType ( );
    void PutAlignType (
        _bstr_t pVal );
    _bstr_t GetUpTextType ( );
    void PutUpTextType (
        _bstr_t pVal );
    _bstr_t GetUpPageWidth ( );
    void PutUpPageWidth (
        _bstr_t pVal );
    _bstr_t GetDownTextType ( );
    void PutDownTextType (
        _bstr_t pVal );
    _bstr_t GetDownPageWidth ( );
    void PutDownPageWidth (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UpText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DownText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DownText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Text2BaseRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text2BaseRatio (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AlignType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlignType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpTextType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UpTextType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpPageWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UpPageWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DownTextType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DownTextType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DownPageWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DownPageWidth (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("2ac8fde4-dc95-41b5-8d87-65a1c6e2e918"))
IComSymbElev : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetHasBaseLine,put=PutHasBaseLine))
    _bstr_t HasBaseLine;
    __declspec(property(get=GetHasLeader,put=PutHasLeader))
    _bstr_t HasLeader;
    __declspec(property(get=GetPrecision,put=PutPrecision))
    _bstr_t Precision;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetFillMode,put=PutFillMode))
    _bstr_t FillMode;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetText2BaseRatio,put=PutText2BaseRatio))
    _bstr_t Text2BaseRatio;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetFloorsOnLeftSide,put=PutFloorsOnLeftSide))
    _bstr_t FloorsOnLeftSide;
    __declspec(property(get=GetSitePlanElevMode,put=PutSitePlanElevMode))
    _bstr_t SitePlanElevMode;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetText2BaseRatio ( );
    void PutText2BaseRatio (
        _bstr_t pVal );
    _bstr_t GetFloorsOnLeftSide ( );
    void PutFloorsOnLeftSide (
        _bstr_t pVal );
    _bstr_t GetHasBaseLine ( );
    void PutHasBaseLine (
        _bstr_t pVal );
    _bstr_t GetHasLeader ( );
    void PutHasLeader (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetPrecision ( );
    void PutPrecision (
        _bstr_t pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetFillMode ( );
    void PutFillMode (
        _bstr_t pVal );
    _bstr_t GetSitePlanElevMode ( );
    void PutSitePlanElevMode (
        _bstr_t pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text2BaseRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text2BaseRatio (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FloorsOnLeftSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorsOnLeftSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasBaseLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasBaseLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasLeader (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasLeader (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Precision (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Precision (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FillMode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FillMode (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SitePlanElevMode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SitePlanElevMode (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
};

struct __declspec(uuid("024f2915-9029-4808-8b6c-c498e9d7bed3"))
IComSymbIndex : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    _bstr_t Height;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetDrawingLabel,put=PutDrawingLabel))
    _bstr_t DrawingLabel;
    __declspec(property(get=GetIndexLabel,put=PutIndexLabel))
    _bstr_t IndexLabel;
    __declspec(property(get=GetUpText,put=PutUpText))
    _bstr_t UpText;
    __declspec(property(get=GetDownText,put=PutDownText))
    _bstr_t DownText;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetDiameter,put=PutDiameter))
    _bstr_t Diameter;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetText2BaseRatio,put=PutText2BaseRatio))
    _bstr_t Text2BaseRatio;
    __declspec(property(get=GetAlignType,put=PutAlignType))
    _bstr_t AlignType;
    __declspec(property(get=GetTextRatio,put=PutTextRatio))
    _bstr_t TextRatio;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetOldStyle,put=PutOldStyle))
    _bstr_t OldStyle;
    __declspec(property(get=GetUpTextType,put=PutUpTextType))
    _bstr_t UpTextType;
    __declspec(property(get=GetUpPageWidth,put=PutUpPageWidth))
    _bstr_t UpPageWidth;
    __declspec(property(get=GetDownTextType,put=PutDownTextType))
    _bstr_t DownTextType;
    __declspec(property(get=GetDownPageWidth,put=PutDownPageWidth))
    _bstr_t DownPageWidth;
    __declspec(property(get=GetDimStyle,put=PutDimStyle))
    _bstr_t DimStyle;
    __declspec(property(get=GetExtendLine,put=PutExtendLine))
    _bstr_t ExtendLine;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetHeight ( );
    void PutHeight (
        _bstr_t pVal );
    _bstr_t GetDimStyle ( );
    void PutDimStyle (
        _bstr_t pVal );
    _bstr_t GetUpText ( );
    void PutUpText (
        _bstr_t pVal );
    _bstr_t GetDownText ( );
    void PutDownText (
        _bstr_t pVal );
    _bstr_t GetUpTextType ( );
    void PutUpTextType (
        _bstr_t pVal );
    _bstr_t GetUpPageWidth ( );
    void PutUpPageWidth (
        _bstr_t pVal );
    _bstr_t GetDownTextType ( );
    void PutDownTextType (
        _bstr_t pVal );
    _bstr_t GetDownPageWidth ( );
    void PutDownPageWidth (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetDrawingLabel ( );
    void PutDrawingLabel (
        _bstr_t pVal );
    _bstr_t GetIndexLabel ( );
    void PutIndexLabel (
        _bstr_t pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetOldStyle ( );
    void PutOldStyle (
        _bstr_t pVal );
    _bstr_t GetDiameter ( );
    void PutDiameter (
        _bstr_t pVal );
    _bstr_t GetTextRatio ( );
    void PutTextRatio (
        _bstr_t pVal );
    _bstr_t GetText2BaseRatio ( );
    void PutText2BaseRatio (
        _bstr_t pVal );
    _bstr_t GetAlignType ( );
    void PutAlignType (
        _bstr_t pVal );
    _bstr_t GetExtendLine ( );
    void PutExtendLine (
        _bstr_t pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DimStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DimStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UpText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DownText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DownText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpTextType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UpTextType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpPageWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UpPageWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DownTextType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DownTextType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DownPageWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DownPageWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawingLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawingLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IndexLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IndexLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_OldStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OldStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Diameter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Diameter (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextRatio (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text2BaseRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text2BaseRatio (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AlignType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlignType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ExtendLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ExtendLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
};

struct __declspec(uuid("891dde69-4d04-4ba4-8a86-458461e73996"))
IComSymbSection : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    _bstr_t Height;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetSectionType,put=PutSectionType))
    short SectionType;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetDrawHeight,put=PutDrawHeight))
    _bstr_t DrawHeight;
    __declspec(property(get=GetDrawStyle,put=PutDrawStyle))
    _bstr_t DrawStyle;
    __declspec(property(get=GetDrawText,put=PutDrawText))
    _bstr_t DrawText;
    __declspec(property(get=GetDrawLocal,put=PutDrawLocal))
    _bstr_t DrawLocal;
    __declspec(property(get=GetDrawDirect,put=PutDrawDirect))
    _bstr_t DrawDirect;
    __declspec(property(get=GetDrawModulus,put=PutDrawModulus))
    _bstr_t DrawModulus;
    __declspec(property(get=GetIsShowIndex,put=PutIsShowIndex))
    _bstr_t IsShowIndex;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHeight ( );
    void PutHeight (
        _bstr_t pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetIsShowIndex ( );
    void PutIsShowIndex (
        _bstr_t pVal );
    _bstr_t GetDrawHeight ( );
    void PutDrawHeight (
        _bstr_t pVal );
    _bstr_t GetDrawText ( );
    void PutDrawText (
        _bstr_t pVal );
    _bstr_t GetDrawStyle ( );
    void PutDrawStyle (
        _bstr_t pVal );
    _bstr_t GetDrawLocal ( );
    void PutDrawLocal (
        _bstr_t pVal );
    _bstr_t GetDrawDirect ( );
    void PutDrawDirect (
        _bstr_t pVal );
    _bstr_t GetDrawModulus ( );
    void PutDrawModulus (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    short GetSectionType ( );
    void PutSectionType (
        short pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsShowIndex (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsShowIndex (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawLocal (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawLocal (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawDirect (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawDirect (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawModulus (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawModulus (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_SectionType (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectionType (
        /*[in]*/ short pVal ) = 0;
};

struct __declspec(uuid("089d2279-0ff9-44f9-9d57-f62c3ae573e0"))
IComSymbNorthThumb : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetRotation,put=PutRotation))
    _bstr_t Rotation;
    __declspec(property(get=GetRadius,put=PutRadius))
    _bstr_t Radius;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetHeight,put=PutHeight))
    _bstr_t Height;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetHeight ( );
    void PutHeight (
        _bstr_t pVal );
    _bstr_t GetRotation ( );
    void PutRotation (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetRadius ( );
    void PutRadius (
        _bstr_t pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("37165a00-b44f-45af-8236-cf890f8a6ef1"))
IComDimension : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetDimStyle,put=PutDimStyle))
    _bstr_t DimStyle;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetAssociate,put=PutAssociate))
    _bstr_t Associate;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDimStyle ( );
    void PutDimStyle (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetAssociate ( );
    void PutAssociate (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DimStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DimStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Associate (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Associate (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("bf8fcfb4-9144-417e-abee-f29646fc1f47"))
IComRadiusDim : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetDimStyle,put=PutDimStyle))
    _bstr_t DimStyle;
    __declspec(property(get=GetText))
    _bstr_t Text;
    __declspec(property(get=GetDesText,put=PutDesText))
    _bstr_t DesText;
    __declspec(property(get=GetRadiusType,put=PutRadiusType))
    _bstr_t RadiusType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDimStyle ( );
    void PutDimStyle (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetDesText ( );
    void PutDesText (
        _bstr_t pVal );
    _bstr_t GetText ( );
    _bstr_t GetRadiusType ( );
    void PutRadiusType (
        _bstr_t pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DimStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DimStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DesText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DesText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RadiusType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RadiusType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("cfeec3d4-6674-4ca7-8126-51afc0bc163a"))
IComAxisLabel : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetRadius,put=PutRadius))
    _bstr_t Radius;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetLeaderLen1,put=PutLeaderLen1))
    double LeaderLen1;
    __declspec(property(get=GetLeaderLen2,put=PutLeaderLen2))
    double LeaderLen2;
    __declspec(property(get=GetCircleTextStyle,put=PutCircleTextStyle))
    _bstr_t CircleTextStyle;
    __declspec(property(get=GetTextRatio,put=PutTextRatio))
    _bstr_t TextRatio;
    __declspec(property(get=GetHideAxisText,put=PutHideAxisText))
    _bstr_t HideAxisText;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetRadius ( );
    void PutRadius (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetLeaderLen1 ( );
    void PutLeaderLen1 (
        double pVal );
    double GetLeaderLen2 ( );
    void PutLeaderLen2 (
        double pVal );
    _bstr_t GetCircleTextStyle ( );
    void PutCircleTextStyle (
        _bstr_t pVal );
    _bstr_t GetTextRatio ( );
    void PutTextRatio (
        _bstr_t pVal );
    _bstr_t GetHideAxisText ( );
    void PutHideAxisText (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeaderLen1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeaderLen1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeaderLen2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeaderLen2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CircleTextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CircleTextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextRatio (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HideAxisText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HideAxisText (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("c4ed46cf-ffed-442b-a757-6f9367192df2"))
IComSymbRupture : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetRuptureNum,put=PutRuptureNum))
    short RuptureNum;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    short GetRuptureNum ( );
    void PutRuptureNum (
        short pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RuptureNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_RuptureNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("4cb93abd-82ff-461d-b2d1-b362fb592dfe"))
IComSymbCoord : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetStyle,put=PutStyle))
    _bstr_t Style;
    __declspec(property(get=GetLocation,put=PutLocation))
    _variant_t Location;
    __declspec(property(get=GetXValue,put=PutXValue))
    double XValue;
    __declspec(property(get=GetYValue,put=PutYValue))
    double YValue;
    __declspec(property(get=GetPrecision,put=PutPrecision))
    _bstr_t Precision;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetText2BaseRatio,put=PutText2BaseRatio))
    _bstr_t Text2BaseRatio;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetCoordShowMode,put=PutCoordShowMode))
    _bstr_t CoordShowMode;
    __declspec(property(get=GetLabelNumber,put=PutLabelNumber))
    _bstr_t LabelNumber;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetXValue ( );
    void PutXValue (
        double pVal );

    _variant_t GetLocation ( );
    void PutLocation (
        const _variant_t & pVal );
    _bstr_t GetStyle ( );
    void PutStyle (
        _bstr_t pVal );
    _bstr_t GetPrecision ( );
    void PutPrecision (
        _bstr_t pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetText2BaseRatio ( );
    void PutText2BaseRatio (
        _bstr_t pVal );
    _bstr_t GetCoordShowMode ( );
    void PutCoordShowMode (
        _bstr_t pVal );
    _bstr_t GetLabelNumber ( );
    void PutLabelNumber (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_XValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_XValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_YValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_YValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Location (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Precision (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Precision (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Text2BaseRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text2BaseRatio (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CoordShowMode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordShowMode (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LabelNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelNumber (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("f575e0d2-cf9c-4f87-86f3-c78c4be85947"))
IComSheet : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetAllTextStyle,put=PutAllTextStyle))
    _bstr_t AllTextStyle;
    __declspec(property(get=GetAllTextSize,put=PutAllTextSize))
    _bstr_t AllTextSize;
    __declspec(property(get=GetAllTextColor,put=PutAllTextColor))
    ACAD_COLOR AllTextColor;
    __declspec(property(get=GetAllSpaceFactor,put=PutAllSpaceFactor))
    _bstr_t AllSpaceFactor;
    __declspec(property(get=GetAllHAlign,put=PutAllHAlign))
    _bstr_t AllHAlign;
    __declspec(property(get=GetAllVAlign,put=PutAllVAlign))
    _bstr_t AllVAlign;
    __declspec(property(get=GetAllAutoLine,put=PutAllAutoLine))
    _bstr_t AllAutoLine;
    __declspec(property(get=GetAllInherit,put=PutAllInherit))
    _bstr_t AllInherit;
    __declspec(property(get=GetHasHLine,put=PutHasHLine))
    _bstr_t HasHLine;
    __declspec(property(get=GetHLineColor,put=PutHLineColor))
    ACAD_COLOR HLineColor;
    __declspec(property(get=GetHLineStyle,put=PutHLineStyle))
    _bstr_t HLineStyle;
    __declspec(property(get=GetHLineWidth,put=PutHLineWidth))
    _bstr_t HLineWidth;
    __declspec(property(get=GetAllRowHeight,put=PutAllRowHeight))
    _bstr_t AllRowHeight;
    __declspec(property(get=GetAllRowHeightProperty,put=PutAllRowHeightProperty))
    _bstr_t AllRowHeightProperty;
    __declspec(property(get=GetAllHLineInherit,put=PutAllHLineInherit))
    _bstr_t AllHLineInherit;
    __declspec(property(get=GetRangeRowMax))
    short RangeRowMax[][];
    __declspec(property(get=GetRangeColumnMax))
    short RangeColumnMax[][];
    __declspec(property(get=GetRangeRow))
    short RangeRow[][];
    __declspec(property(get=GetHasVLine,put=PutHasVLine))
    _bstr_t HasVLine;
    __declspec(property(get=GetVLineColor,put=PutVLineColor))
    ACAD_COLOR VLineColor;
    __declspec(property(get=GetVLineStyle,put=PutVLineStyle))
    _bstr_t VLineStyle;
    __declspec(property(get=GetVLineWidth,put=PutVLineWidth))
    _bstr_t VLineWidth;
    __declspec(property(get=GetAllVLineInherit,put=PutAllVLineInherit))
    _bstr_t AllVLineInherit;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetHasBorder,put=PutHasBorder))
    _bstr_t HasBorder;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    ACAD_COLOR BorderColor;
    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    _bstr_t BorderStyle;
    __declspec(property(get=GetBorderWidth,put=PutBorderWidth))
    _bstr_t BorderWidth;
    __declspec(property(get=GetRangeColumn))
    short RangeColumn[][];
    __declspec(property(get=GetIsRange))
    long IsRange[][];
    __declspec(property(get=GetText))
    _bstr_t Text[][];
    __declspec(property(get=GetColumnNum))
    short ColumnNum;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetTitleTextStyle,put=PutTitleTextStyle))
    _bstr_t TitleTextStyle;
    __declspec(property(get=GetTitleTextSize,put=PutTitleTextSize))
    _bstr_t TitleTextSize;
    __declspec(property(get=GetTitleTextColor,put=PutTitleTextColor))
    ACAD_COLOR TitleTextColor;
    __declspec(property(get=GetTitleSpaceFactor,put=PutTitleSpaceFactor))
    _bstr_t TitleSpaceFactor;
    __declspec(property(get=GetTitleHAlign,put=PutTitleHAlign))
    _bstr_t TitleHAlign;
    __declspec(property(get=GetTitleVAlign,put=PutTitleVAlign))
    _bstr_t TitleVAlign;
    __declspec(property(get=GetTitleBaseLineColor,put=PutTitleBaseLineColor))
    ACAD_COLOR TitleBaseLineColor;
    __declspec(property(get=GetTitleBaseLineStyle,put=PutTitleBaseLineStyle))
    _bstr_t TitleBaseLineStyle;
    __declspec(property(get=GetTitleBaseLineWidth,put=PutTitleBaseLineWidth))
    _bstr_t TitleBaseLineWidth;
    __declspec(property(get=GetTitleHeight,put=PutTitleHeight))
    _bstr_t TitleHeight;
    __declspec(property(get=GetTitleOutside,put=PutTitleOutside))
    _bstr_t TitleOutside;
    __declspec(property(get=GetTitleHide,put=PutTitleHide))
    _bstr_t TitleHide;
    __declspec(property(get=GetCellRowIndex,put=PutCellRowIndex))
    long CellRowIndex;
    __declspec(property(get=GetCellColIndex,put=PutCellColIndex))
    long CellColIndex;
    __declspec(property(get=GetCellText,put=PutCellText))
    _bstr_t CellText;
    __declspec(property(get=GetCellTextStyle,put=PutCellTextStyle))
    _bstr_t CellTextStyle;
    __declspec(property(get=GetCellTextSize,put=PutCellTextSize))
    _bstr_t CellTextSize;
    __declspec(property(get=GetCellTextColor,put=PutCellTextColor))
    ACAD_COLOR CellTextColor;
    __declspec(property(get=GetCellSpaceFactor,put=PutCellSpaceFactor))
    _bstr_t CellSpaceFactor;
    __declspec(property(get=GetCellHAlign,put=PutCellHAlign))
    _bstr_t CellHAlign;
    __declspec(property(get=GetCellVAlign,put=PutCellVAlign))
    _bstr_t CellVAlign;
    __declspec(property(get=GetCellLinePropertyInherit,put=PutCellLinePropertyInherit))
    _bstr_t CellLinePropertyInherit;
    __declspec(property(get=GetCellLineWrap,put=PutCellLineWrap))
    _bstr_t CellLineWrap;
    __declspec(property(get=GetRowNum))
    short RowNum;
    __declspec(property(get=GetRowIndex,put=PutRowIndex))
    long RowIndex;
    __declspec(property(get=GetRowHeight,put=PutRowHeight))
    _bstr_t RowHeight;
    __declspec(property(get=GetRowHeightProperty,put=PutRowHeightProperty))
    _bstr_t RowHeightProperty;
    __declspec(property(get=GetRowInheritSheet,put=PutRowInheritSheet))
    _bstr_t RowInheritSheet;
    __declspec(property(get=GetRowHasBaseLine,put=PutRowHasBaseLine))
    _bstr_t RowHasBaseLine;
    __declspec(property(get=GetRowHLineColor,put=PutRowHLineColor))
    ACAD_COLOR RowHLineColor;
    __declspec(property(get=GetRowHLineStyle,put=PutRowHLineStyle))
    _bstr_t RowHLineStyle;
    __declspec(property(get=GetRowHLineWidth,put=PutRowHLineWidth))
    _bstr_t RowHLineWidth;
    __declspec(property(get=GetAllRowCellInherit,put=PutAllRowCellInherit))
    _bstr_t AllRowCellInherit;
    __declspec(property(get=GetColNum))
    long ColNum;
    __declspec(property(get=GetColIndex,put=PutColIndex))
    long ColIndex;
    __declspec(property(get=GetColWidth,put=PutColWidth))
    _bstr_t ColWidth;
    __declspec(property(get=GetColTextStyle,put=PutColTextStyle))
    _bstr_t ColTextStyle;
    __declspec(property(get=GetColTextSize,put=PutColTextSize))
    _bstr_t ColTextSize;
    __declspec(property(get=GetColTextColor,put=PutColTextColor))
    ACAD_COLOR ColTextColor;
    __declspec(property(get=GetColSpaceFactor,put=PutColSpaceFactor))
    _bstr_t ColSpaceFactor;
    __declspec(property(get=GetColHAlign,put=PutColHAlign))
    _bstr_t ColHAlign;
    __declspec(property(get=GetColLinePropertyInherit,put=PutColLinePropertyInherit))
    _bstr_t ColLinePropertyInherit;
    __declspec(property(get=GetColLineWrap,put=PutColLineWrap))
    _bstr_t ColLineWrap;
    __declspec(property(get=GetColAllowDrag,put=PutColAllowDrag))
    _bstr_t ColAllowDrag;
    __declspec(property(get=GetColInheritSheet,put=PutColInheritSheet))
    _bstr_t ColInheritSheet;
    __declspec(property(get=GetColHasRightLine,put=PutColHasRightLine))
    _bstr_t ColHasRightLine;
    __declspec(property(get=GetColRLineColor,put=PutColRLineColor))
    ACAD_COLOR ColRLineColor;
    __declspec(property(get=GetColRLineStyle,put=PutColRLineStyle))
    _bstr_t ColRLineStyle;
    __declspec(property(get=GetColRLineWidth,put=PutColRLineWidth))
    _bstr_t ColRLineWidth;
    __declspec(property(get=GetAllColCellInherit,put=PutAllColCellInherit))
    _bstr_t AllColCellInherit;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetAllTextStyle ( );
    void PutAllTextStyle (
        _bstr_t pVal );
    _bstr_t GetAllTextSize ( );
    void PutAllTextSize (
        _bstr_t pVal );
    ACAD_COLOR GetAllTextColor ( );
    void PutAllTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetAllSpaceFactor ( );
    void PutAllSpaceFactor (
        _bstr_t pVal );
    _bstr_t GetAllHAlign ( );
    void PutAllHAlign (
        _bstr_t pVal );
    _bstr_t GetAllVAlign ( );
    void PutAllVAlign (
        _bstr_t pVal );
    _bstr_t GetAllAutoLine ( );
    void PutAllAutoLine (
        _bstr_t pVal );
    _bstr_t GetAllInherit ( );
    void PutAllInherit (
        _bstr_t pVal );
    _bstr_t GetHasHLine ( );
    void PutHasHLine (
        _bstr_t pVal );
    ACAD_COLOR GetHLineColor ( );
    void PutHLineColor (
        ACAD_COLOR pVal );
    _bstr_t GetHLineStyle ( );
    void PutHLineStyle (
        _bstr_t pVal );
    _bstr_t GetHLineWidth ( );
    void PutHLineWidth (
        _bstr_t pVal );
    _bstr_t GetAllRowHeight ( );
    void PutAllRowHeight (
        _bstr_t pVal );
    _bstr_t GetAllRowHeightProperty ( );
    void PutAllRowHeightProperty (
        _bstr_t pVal );
    _bstr_t GetAllHLineInherit ( );
    void PutAllHLineInherit (
        _bstr_t pVal );
    _bstr_t GetHasVLine ( );
    void PutHasVLine (
        _bstr_t pVal );
    ACAD_COLOR GetVLineColor ( );
    void PutVLineColor (
        ACAD_COLOR pVal );
    _bstr_t GetVLineStyle ( );
    void PutVLineStyle (
        _bstr_t pVal );
    _bstr_t GetVLineWidth ( );
    void PutVLineWidth (
        _bstr_t pVal );
    _bstr_t GetAllVLineInherit ( );
    void PutAllVLineInherit (
        _bstr_t pVal );
    _bstr_t GetHasBorder ( );
    void PutHasBorder (
        _bstr_t pVal );
    ACAD_COLOR GetBorderColor ( );
    void PutBorderColor (
        ACAD_COLOR pVal );
    _bstr_t GetBorderStyle ( );
    void PutBorderStyle (
        _bstr_t pVal );
    _bstr_t GetBorderWidth ( );
    void PutBorderWidth (
        _bstr_t pVal );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t pVal );
    _bstr_t GetTitleTextStyle ( );
    void PutTitleTextStyle (
        _bstr_t pVal );
    _bstr_t GetTitleTextSize ( );
    void PutTitleTextSize (
        _bstr_t pVal );
    ACAD_COLOR GetTitleTextColor ( );
    void PutTitleTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetTitleSpaceFactor ( );
    void PutTitleSpaceFactor (
        _bstr_t pVal );
    _bstr_t GetTitleHAlign ( );
    void PutTitleHAlign (
        _bstr_t pVal );
    _bstr_t GetTitleVAlign ( );
    void PutTitleVAlign (
        _bstr_t pVal );
    ACAD_COLOR GetTitleBaseLineColor ( );
    void PutTitleBaseLineColor (
        ACAD_COLOR pVal );
    _bstr_t GetTitleBaseLineStyle ( );
    void PutTitleBaseLineStyle (
        _bstr_t pVal );
    _bstr_t GetTitleBaseLineWidth ( );
    void PutTitleBaseLineWidth (
        _bstr_t pVal );
    _bstr_t GetTitleHeight ( );
    void PutTitleHeight (
        _bstr_t pVal );
    _bstr_t GetTitleOutside ( );
    void PutTitleOutside (
        _bstr_t pVal );
    _bstr_t GetTitleHide ( );
    void PutTitleHide (
        _bstr_t pVal );
    long GetCellRowIndex ( );
    void PutCellRowIndex (
        long pVal );
    long GetCellColIndex ( );
    void PutCellColIndex (
        long pVal );
    _bstr_t GetCellText ( );
    void PutCellText (
        _bstr_t pVal );
    _bstr_t GetCellTextStyle ( );
    void PutCellTextStyle (
        _bstr_t pVal );
    _bstr_t GetCellTextSize ( );
    void PutCellTextSize (
        _bstr_t pVal );
    ACAD_COLOR GetCellTextColor ( );
    void PutCellTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetCellSpaceFactor ( );
    void PutCellSpaceFactor (
        _bstr_t pVal );
    _bstr_t GetCellHAlign ( );
    void PutCellHAlign (
        _bstr_t pVal );
    _bstr_t GetCellVAlign ( );
    void PutCellVAlign (
        _bstr_t pVal );
    _bstr_t GetCellLinePropertyInherit ( );
    void PutCellLinePropertyInherit (
        _bstr_t pVal );
    _bstr_t GetCellLineWrap ( );
    void PutCellLineWrap (
        _bstr_t pVal );
    short GetRowNum ( );
    long GetRowIndex ( );
    void PutRowIndex (
        long pVal );
    _bstr_t GetRowHeight ( );
    void PutRowHeight (
        _bstr_t pVal );
    _bstr_t GetRowHeightProperty ( );
    void PutRowHeightProperty (
        _bstr_t pVal );
    _bstr_t GetRowInheritSheet ( );
    void PutRowInheritSheet (
        _bstr_t pVal );
    _bstr_t GetRowHasBaseLine ( );
    void PutRowHasBaseLine (
        _bstr_t pVal );
    ACAD_COLOR GetRowHLineColor ( );
    void PutRowHLineColor (
        ACAD_COLOR pVal );
    _bstr_t GetRowHLineStyle ( );
    void PutRowHLineStyle (
        _bstr_t pVal );
    _bstr_t GetRowHLineWidth ( );
    void PutRowHLineWidth (
        _bstr_t pVal );
    _bstr_t GetAllRowCellInherit ( );
    void PutAllRowCellInherit (
        _bstr_t pVal );
    long GetColNum ( );
    long GetColIndex ( );
    void PutColIndex (
        long pVal );
    _bstr_t GetColWidth ( );
    void PutColWidth (
        _bstr_t pVal );
    _bstr_t GetColTextStyle ( );
    void PutColTextStyle (
        _bstr_t pVal );
    _bstr_t GetColTextSize ( );
    void PutColTextSize (
        _bstr_t pVal );
    ACAD_COLOR GetColTextColor ( );
    void PutColTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetColSpaceFactor ( );
    void PutColSpaceFactor (
        _bstr_t pVal );
    _bstr_t GetColHAlign ( );
    void PutColHAlign (
        _bstr_t pVal );
    _bstr_t GetColLinePropertyInherit ( );
    void PutColLinePropertyInherit (
        _bstr_t pVal );
    _bstr_t GetColLineWrap ( );
    void PutColLineWrap (
        _bstr_t pVal );
    _bstr_t GetColAllowDrag ( );
    void PutColAllowDrag (
        _bstr_t pVal );
    _bstr_t GetColInheritSheet ( );
    void PutColInheritSheet (
        _bstr_t pVal );
    _bstr_t GetColHasRightLine ( );
    void PutColHasRightLine (
        _bstr_t pVal );
    ACAD_COLOR GetColRLineColor ( );
    void PutColRLineColor (
        ACAD_COLOR pVal );
    _bstr_t GetColRLineStyle ( );
    void PutColRLineStyle (
        _bstr_t pVal );
    _bstr_t GetColRLineWidth ( );
    void PutColRLineWidth (
        _bstr_t pVal );
    _bstr_t GetAllColCellInherit ( );
    void PutAllColCellInherit (
        _bstr_t pVal );
    HRESULT Create (
        short nRowNum,
        short nColNum );
    HRESULT SetCellText (
        short Row,
        short Col,
        _bstr_t Text );
    HRESULT Merge (
        short StartRow,
        short StartColumn,
        short NumRow,
        short NumColumn );
    HRESULT ExplodeCell (
        short Row,
        short Col );
    short GetRangeRowMax (
        short Row,
        short Column );
    short GetRangeColumnMax (
        short Row,
        short Column );
    short GetRangeRow (
        short Row,
        short Column );
    short GetRangeColumn (
        short Row,
        short Column );
    long GetIsRange (
        short Row,
        short Column );
    _bstr_t GetText (
        short Row,
        short Column );
    short GetColumnNum ( );
    long GetTextColor (
        short Row,
        short Col );
    void PutTextColor (
        short Row,
        short Col,
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AllTextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllTextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllTextSize (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllTextSize (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllTextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllTextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_AllSpaceFactor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllSpaceFactor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllHAlign (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllHAlign (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllVAlign (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllVAlign (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllAutoLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllAutoLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllInherit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllInherit (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasHLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasHLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HLineColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_HLineColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_HLineStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HLineStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HLineWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HLineWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllRowHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllRowHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllRowHeightProperty (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllRowHeightProperty (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllHLineInherit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllHLineInherit (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasVLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasVLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VLineColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_VLineColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_VLineStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VLineStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VLineWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VLineWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllVLineInherit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllVLineInherit (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasBorder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasBorder (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BorderWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BorderWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleTextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleTextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleTextSize (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleTextSize (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleTextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleTextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleSpaceFactor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleSpaceFactor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleHAlign (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleHAlign (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleVAlign (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleVAlign (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleBaseLineColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleBaseLineColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleBaseLineStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleBaseLineStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleBaseLineWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleBaseLineWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleOutside (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleOutside (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleHide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleHide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CellRowIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CellRowIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CellColIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CellColIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CellText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CellTextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellTextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CellTextSize (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellTextSize (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CellTextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellTextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_CellSpaceFactor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellSpaceFactor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CellHAlign (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellHAlign (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CellVAlign (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellVAlign (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CellLinePropertyInherit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellLinePropertyInherit (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CellLineWrap (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellLineWrap (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RowNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall get_RowIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RowIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RowHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RowHeightProperty (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowHeightProperty (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RowInheritSheet (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowInheritSheet (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RowHasBaseLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowHasBaseLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RowHLineColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowHLineColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_RowHLineStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowHLineStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RowHLineWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowHLineWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllRowCellInherit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllRowCellInherit (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ColIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ColIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ColWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColTextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColTextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColTextSize (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColTextSize (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColTextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColTextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ColSpaceFactor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColSpaceFactor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColHAlign (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColHAlign (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColLinePropertyInherit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColLinePropertyInherit (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColLineWrap (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColLineWrap (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColAllowDrag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColAllowDrag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColInheritSheet (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColInheritSheet (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColHasRightLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColHasRightLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColRLineColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColRLineColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ColRLineStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColRLineStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColRLineWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColRLineWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllColCellInherit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllColCellInherit (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ short nRowNum,
        /*[in]*/ short nColNum ) = 0;
      virtual HRESULT __stdcall raw_SetCellText (
        short Row,
        short Col,
        BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_Merge (
        short StartRow,
        short StartColumn,
        short NumRow,
        short NumColumn ) = 0;
      virtual HRESULT __stdcall raw_ExplodeCell (
        short Row,
        short Col ) = 0;
      virtual HRESULT __stdcall get_RangeRowMax (
        /*[in]*/ short Row,
        /*[in]*/ short Column,
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall get_RangeColumnMax (
        /*[in]*/ short Row,
        /*[in]*/ short Column,
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall get_RangeRow (
        /*[in]*/ short Row,
        /*[in]*/ short Column,
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall get_RangeColumn (
        /*[in]*/ short Row,
        /*[in]*/ short Column,
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall get_IsRange (
        /*[in]*/ short Row,
        /*[in]*/ short Column,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[in]*/ short Row,
        /*[in]*/ short Column,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        short Row,
        short Col,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        short Row,
        short Col,
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("6085664f-da62-4bbf-9717-814f5930911f"))
IComCurtainWall : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetGlassLayer,put=PutGlassLayer))
    ACAD_LAYER GlassLayer;
    __declspec(property(get=GetRowLayer,put=PutRowLayer))
    ACAD_LAYER RowLayer;
    __declspec(property(get=GetColLayer,put=PutColLayer))
    ACAD_LAYER ColLayer;
    __declspec(property(get=GetRowNum))
    long RowNum;
    __declspec(property(get=GetColNum))
    long ColNum;
    __declspec(property(get=GetTopFrame,put=PutTopFrame))
    _bstr_t TopFrame;
    __declspec(property(get=GetBotFrame,put=PutBotFrame))
    _bstr_t BotFrame;
    __declspec(property(get=GetColAverage,put=PutColAverage))
    _bstr_t ColAverage;
    __declspec(property(get=GetURow,put=PutURow))
    double URow;
    __declspec(property(get=GetVRow,put=PutVRow))
    double VRow;
    __declspec(property(get=GetUCol,put=PutUCol))
    double UCol;
    __declspec(property(get=GetVCol,put=PutVCol))
    double VCol;
    __declspec(property(get=GetBasePos,put=PutBasePos))
    _bstr_t BasePos;
    __declspec(property(get=GetRowHide,put=PutRowHide))
    _bstr_t RowHide;
    __declspec(property(get=GetColHide,put=PutColHide))
    _bstr_t ColHide;
    __declspec(property(get=GetGlassDist,put=PutGlassDist))
    double GlassDist;
    __declspec(property(get=GetFrameDist,put=PutFrameDist))
    double FrameDist;
    __declspec(property(get=GetRowAverage,put=PutRowAverage))
    _bstr_t RowAverage;
    __declspec(property(get=GetRowHeight,put=PutRowHeight))
    _variant_t RowHeight;
    __declspec(property(get=GetColWidth,put=PutColWidth))
    _variant_t ColWidth;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetIsArc))
    _bstr_t IsArc;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetStructure,put=PutStructure))
    _bstr_t Structure;
    __declspec(property(get=GetAreaRatio))
    double AreaRatio;
    __declspec(property(get=GetConductivity))
    double Conductivity;
    __declspec(property(get=GetInertiaIndex))
    double InertiaIndex;
    __declspec(property(get=GetEnUsage,put=PutEnUsage))
    _bstr_t EnUsage;
    __declspec(property(get=GetIOFeature,put=PutIOFeature))
    _bstr_t IOFeature;
    __declspec(property(get=GetLeftWidth,put=PutLeftWidth))
    double LeftWidth;
    __declspec(property(get=GetRightWidth,put=PutRightWidth))
    double RightWidth;
    __declspec(property(get=GetPlaneDisplay,put=PutPlaneDisplay))
    _bstr_t PlaneDisplay;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetLeftWidth ( );
    void PutLeftWidth (
        double pVal );
    double GetRightWidth ( );
    void PutRightWidth (
        double pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    double GetLength ( );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    long GetRowNum ( );
    long GetColNum ( );
    _bstr_t GetRowAverage ( );
    void PutRowAverage (
        _bstr_t pVal );
    _bstr_t GetColAverage ( );
    void PutColAverage (
        _bstr_t pVal );
    _variant_t GetRowHeight ( );
    void PutRowHeight (
        const _variant_t & pVal );
    _variant_t GetColWidth ( );
    void PutColWidth (
        const _variant_t & pVal );
    double GetURow ( );
    void PutURow (
        double pVal );
    double GetVRow ( );
    void PutVRow (
        double pVal );
    double GetUCol ( );
    void PutUCol (
        double pVal );
    double GetVCol ( );
    void PutVCol (
        double pVal );
    _bstr_t GetRowHide ( );
    void PutRowHide (
        _bstr_t pVal );
    _bstr_t GetColHide ( );
    void PutColHide (
        _bstr_t pVal );
    _bstr_t GetBasePos ( );
    void PutBasePos (
        _bstr_t pVal );
    double GetGlassDist ( );
    void PutGlassDist (
        double pVal );
    double GetFrameDist ( );
    void PutFrameDist (
        double pVal );
    _bstr_t GetPlaneDisplay ( );
    void PutPlaneDisplay (
        _bstr_t pVal );
    _bstr_t GetIsArc ( );
    _bstr_t GetTopFrame ( );
    void PutTopFrame (
        _bstr_t pVal );
    _bstr_t GetBotFrame ( );
    void PutBotFrame (
        _bstr_t pVal );
    ACAD_LAYER GetGlassLayer ( );
    void PutGlassLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRowLayer ( );
    void PutRowLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetColLayer ( );
    void PutColLayer (
        ACAD_LAYER pVal );
    _bstr_t GetEnUsage ( );
    void PutEnUsage (
        _bstr_t pVal );
    _bstr_t GetIOFeature ( );
    void PutIOFeature (
        _bstr_t pVal );
    _bstr_t GetStructure ( );
    void PutStructure (
        _bstr_t pVal );
    double GetAreaRatio ( );
    double GetConductivity ( );
    double GetInertiaIndex ( );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RightWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RightWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RowNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ColNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_RowAverage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowAverage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColAverage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColAverage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RowHeight (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_RowHeight (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ColWidth (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ColWidth (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_URow (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_URow (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_VRow (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VRow (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UCol (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_UCol (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_VCol (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VCol (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RowHide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowHide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColHide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColHide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BasePos (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BasePos (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GlassDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GlassDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FrameDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FrameDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PlaneDisplay (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PlaneDisplay (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsArc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_TopFrame (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TopFrame (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BotFrame (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BotFrame (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GlassLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_GlassLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ColLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ColLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_EnUsage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EnUsage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IOFeature (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IOFeature (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Structure (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Structure (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AreaRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Conductivity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_InertiaIndex (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("4a603a18-09c8-4c92-95b7-c3f4cc6eb42c"))
IComMultiStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetStairWidth,put=PutStairWidth))
    double StairWidth;
    __declspec(property(get=GetStepNum,put=PutStepNum))
    long StepNum;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetHasLeftBeam,put=PutHasLeftBeam))
    _bstr_t HasLeftBeam;
    __declspec(property(get=GetHasRightBeam,put=PutHasRightBeam))
    _bstr_t HasRightBeam;
    __declspec(property(get=GetHasLeftHandRail,put=PutHasLeftHandRail))
    _bstr_t HasLeftHandRail;
    __declspec(property(get=GetHasRightHandRail,put=PutHasRightHandRail))
    _bstr_t HasRightHandRail;
    __declspec(property(get=GetAsAscent,put=PutAsAscent))
    _bstr_t AsAscent;
    __declspec(property(get=GetHasSlant,put=PutHasSlant))
    _bstr_t HasSlant;
    __declspec(property(get=GetOnGround,put=PutOnGround))
    _bstr_t OnGround;
    __declspec(property(get=GetBasePos,put=PutBasePos))
    _bstr_t BasePos;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailDist,put=PutRailDist))
    double RailDist;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailHeight,put=PutRailHeight))
    double RailHeight;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetLayerType,put=PutLayerType))
    _bstr_t LayerType;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetAlongWall,put=PutAlongWall))
    _bstr_t AlongWall;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetElev,put=PutElev))
    double Elev;
    __declspec(property(get=GetFirstRailDist,put=PutFirstRailDist))
    double FirstRailDist;
    __declspec(property(get=GetEndRailDist,put=PutEndRailDist))
    double EndRailDist;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetSectHeight,put=PutSectHeight))
    double SectHeight;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetStairWidth ( );
    void PutStairWidth (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    double GetElev ( );
    void PutElev (
        double pVal );
    long GetStepNum ( );
    void PutStepNum (
        long pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetHasLeftHandRail ( );
    void PutHasLeftHandRail (
        _bstr_t pVal );
    _bstr_t GetHasRightHandRail ( );
    void PutHasRightHandRail (
        _bstr_t pVal );
    double GetRailDist ( );
    void PutRailDist (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailHeight ( );
    void PutRailHeight (
        double pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    _bstr_t GetHasLeftBeam ( );
    void PutHasLeftBeam (
        _bstr_t pVal );
    _bstr_t GetHasRightBeam ( );
    void PutHasRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    _bstr_t GetAsAscent ( );
    void PutAsAscent (
        _bstr_t pVal );
    _bstr_t GetHasSlant ( );
    void PutHasSlant (
        _bstr_t pVal );
    _bstr_t GetOnGround ( );
    void PutOnGround (
        _bstr_t pVal );
    _bstr_t GetBasePos ( );
    void PutBasePos (
        _bstr_t pVal );
    _bstr_t GetAlongWall ( );
    void PutAlongWall (
        _bstr_t pVal );
    _bstr_t GetLayerType ( );
    void PutLayerType (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    double GetFirstRailDist ( );
    void PutFirstRailDist (
        double pVal );
    double GetEndRailDist ( );
    void PutEndRailDist (
        double pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );
    double GetSectHeight ( );
    void PutSectHeight (
        double pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HasLeftHandRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasLeftHandRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasRightHandRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRightHandRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasLeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasLeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasRightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AsAscent (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AsAscent (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlant (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlant (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OnGround (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OnGround (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BasePos (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BasePos (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AlongWall (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlongWall (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LayerType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LayerType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FirstRailDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstRailDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndRailDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndRailDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SectHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
};

struct __declspec(uuid("c2bd3da7-678b-4a08-b5d2-0f5b2006a4de"))
IComCornerWin : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetGlassLayer,put=PutGlassLayer))
    ACAD_LAYER GlassLayer;
    __declspec(property(get=GetFrameLayer,put=PutFrameLayer))
    ACAD_LAYER FrameLayer;
    __declspec(property(get=GetSlabLayer,put=PutSlabLayer))
    ACAD_LAYER SlabLayer;
    __declspec(property(get=GetFrameHeight,put=PutFrameHeight))
    double FrameHeight;
    __declspec(property(get=GetFrameThickness,put=PutFrameThickness))
    double FrameThickness;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetSillHeight,put=PutSillHeight))
    double SillHeight;
    __declspec(property(get=GetOnGround,put=PutOnGround))
    _bstr_t OnGround;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetIsProtrudeWin,put=PutIsProtrudeWin))
    _bstr_t IsProtrudeWin;
    __declspec(property(get=GetFrontDist,put=PutFrontDist))
    double FrontDist;
    __declspec(property(get=GetDist1,put=PutDist1))
    double Dist1;
    __declspec(property(get=GetDist2,put=PutDist2))
    double Dist2;
    __declspec(property(get=GetGlassDist,put=PutGlassDist))
    double GlassDist;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetKind))
    _bstr_t Kind;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    double TextHeight;
    __declspec(property(get=GetWidth1,put=PutWidth1))
    double Width1;
    __declspec(property(get=GetWidth2,put=PutWidth2))
    double Width2;
    __declspec(property(get=GetIsHole,put=PutIsHole))
    _bstr_t IsHole;
    __declspec(property(get=GetTextAngle,put=PutTextAngle))
    double TextAngle;
    __declspec(property(get=GetHasSlab1,put=PutHasSlab1))
    _bstr_t HasSlab1;
    __declspec(property(get=GetHasSlab2,put=PutHasSlab2))
    _bstr_t HasSlab2;
    __declspec(property(get=GetProWinSlabWidth,put=PutProWinSlabWidth))
    double ProWinSlabWidth;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetHideLabel,put=PutHideLabel))
    _bstr_t HideLabel;
    __declspec(property(get=GetProWinSlabInsuThick,put=PutProWinSlabInsuThick))
    double ProWinSlabInsuThick;
    __declspec(property(get=GetFrontDist2,put=PutFrontDist2))
    double FrontDist2;
    __declspec(property(get=GetStructure,put=PutStructure))
    _bstr_t Structure;
    __declspec(property(get=GetExtShading,put=PutExtShading))
    _bstr_t ExtShading;
    __declspec(property(get=GetConductivity))
    double Conductivity;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    double GetSillHeight ( );
    void PutSillHeight (
        double pVal );
    double GetWidth1 ( );
    void PutWidth1 (
        double pVal );
    double GetWidth2 ( );
    void PutWidth2 (
        double pVal );
    double GetFrameHeight ( );
    void PutFrameHeight (
        double pVal );
    double GetFrameThickness ( );
    void PutFrameThickness (
        double pVal );
    _bstr_t GetIsProtrudeWin ( );
    void PutIsProtrudeWin (
        _bstr_t pVal );
    double GetFrontDist ( );
    void PutFrontDist (
        double pVal );
    double GetFrontDist2 ( );
    void PutFrontDist2 (
        double pVal );
    _bstr_t GetOnGround ( );
    void PutOnGround (
        _bstr_t pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    double GetDist1 ( );
    void PutDist1 (
        double pVal );
    double GetDist2 ( );
    void PutDist2 (
        double pVal );
    double GetGlassDist ( );
    void PutGlassDist (
        double pVal );
    _bstr_t GetHasSlab1 ( );
    void PutHasSlab1 (
        _bstr_t pVal );
    _bstr_t GetHasSlab2 ( );
    void PutHasSlab2 (
        _bstr_t pVal );
    double GetProWinSlabWidth ( );
    void PutProWinSlabWidth (
        double pVal );
    double GetProWinSlabInsuThick ( );
    void PutProWinSlabInsuThick (
        double pVal );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pVal );
    double GetTextAngle ( );
    void PutTextAngle (
        double pVal );
    double GetTextHeight ( );
    void PutTextHeight (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetHideLabel ( );
    void PutHideLabel (
        _bstr_t pVal );
    ACAD_LAYER GetGlassLayer ( );
    void PutGlassLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetFrameLayer ( );
    void PutFrameLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetSlabLayer ( );
    void PutSlabLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    _bstr_t GetIsHole ( );
    void PutIsHole (
        _bstr_t pVal );
    _bstr_t GetKind ( );
    _bstr_t GetStructure ( );
    void PutStructure (
        _bstr_t pVal );
    _bstr_t GetExtShading ( );
    void PutExtShading (
        _bstr_t pVal );
    double GetConductivity ( );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SillHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SillHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FrameHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FrameHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FrameThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FrameThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IsProtrudeWin (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsProtrudeWin (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FrontDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FrontDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FrontDist2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FrontDist2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OnGround (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OnGround (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Dist1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Dist1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Dist2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Dist2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_GlassDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GlassDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlab1 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlab1 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlab2 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlab2 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ProWinSlabWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ProWinSlabWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ProWinSlabInsuThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ProWinSlabInsuThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HideLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HideLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GlassLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_GlassLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_FrameLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_FrameLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_SlabLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_IsHole (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsHole (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Structure (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Structure (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ExtShading (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ExtShading (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Conductivity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("091ec5e6-d8d8-4e72-b19d-ec1d457d0b8d"))
IComRect : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetDiaLine,put=PutDiaLine))
    _bstr_t DiaLine;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetBaseType,put=PutBaseType))
    _bstr_t BaseType;
    __declspec(property(get=GetElev,put=PutElev))
    double Elev;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetHeight ( );
    void PutHeight (
        double pVal );
    _bstr_t GetDiaLine ( );
    void PutDiaLine (
        _bstr_t pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetLength ( );
    void PutLength (
        double pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    _bstr_t GetBaseType ( );
    void PutBaseType (
        _bstr_t pVal );
    double GetElev ( );
    void PutElev (
        double pVal );
    double GetRotation ( );
    void PutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DiaLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DiaLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BaseType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BaseType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Elev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("a0006352-d5e4-4f86-87fd-47a2d9a8e305"))
IComSlope : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetVertexNum,put=PutVertexNum))
    long VertexNum;
    __declspec(property(get=GetShowMode,put=PutShowMode))
    _bstr_t ShowMode;
    __declspec(property(get=GetReactor,put=PutReactor))
    _bstr_t Reactor;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetTransform,put=PutTransform))
    _bstr_t Transform;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    long GetVertexNum ( );
    void PutVertexNum (
        long pVal );
    _bstr_t GetShowMode ( );
    void PutShowMode (
        _bstr_t pVal );
    _bstr_t GetReactor ( );
    void PutReactor (
        _bstr_t pVal );
    _bstr_t GetTransform ( );
    void PutTransform (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VertexNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_VertexNum (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ShowMode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowMode (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Reactor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Reactor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Transform (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Transform (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("3b24ec86-4a5d-488d-a487-7c1c2ffbfa2d"))
IComPolyMesh : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetShapeVisibility,put=PutShapeVisibility))
    _bstr_t ShapeVisibility;
    __declspec(property(get=GetPathLength))
    _bstr_t PathLength;
    __declspec(property(get=GetSideArea))
    _bstr_t SideArea;
    __declspec(property(get=GetSectionNum))
    int SectionNum;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetVertex,put=PutVertex))
    _variant_t Vertex;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetSection,put=PutSection))
    _variant_t Section;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    _bstr_t GetPathLength ( );
    _bstr_t GetSideArea ( );
    int GetSectionNum ( );
    _bstr_t GetVolume ( );
    _variant_t GetVertex ( );
    void PutVertex (
        const _variant_t & pVal );
    _variant_t GetSection ( );
    void PutSection (
        const _variant_t & pVal );
    _bstr_t GetShapeVisibility ( );
    void PutShapeVisibility (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PathLength (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SideArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SectionNum (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Vertex (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Vertex (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Section (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Section (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ShapeVisibility (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShapeVisibility (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("28ed9b9a-fa06-4475-9fa7-53019255d6a0"))
IComOpeningSlot : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetShowShape,put=PutShowShape))
    _bstr_t ShowShape;
    __declspec(property(get=GetOutsideSlot,put=PutOutsideSlot))
    _bstr_t OutsideSlot;
    __declspec(property(get=GetInsideSlot,put=PutInsideSlot))
    _bstr_t InsideSlot;
    __declspec(property(get=GetWidth1,put=PutWidth1))
    double Width1;
    __declspec(property(get=GetWidth2,put=PutWidth2))
    double Width2;
    __declspec(property(get=GetA,put=PutA))
    double A;
    __declspec(property(get=GetT,put=PutT))
    double T;
    __declspec(property(get=GetStyle,put=PutStyle))
    _bstr_t Style;
    __declspec(property(get=GetBoardWidth,put=PutBoardWidth))
    double BoardWidth;
    __declspec(property(get=GetInsideBoard,put=PutInsideBoard))
    _bstr_t InsideBoard;
    __declspec(property(get=GetOutsideBoard,put=PutOutsideBoard))
    _bstr_t OutsideBoard;
    __declspec(property(get=GetInsideSill,put=PutInsideSill))
    _bstr_t InsideSill;
    __declspec(property(get=GetOutsideSill,put=PutOutsideSill))
    _bstr_t OutsideSill;
    __declspec(property(get=GetA1,put=PutA1))
    double A1;
    __declspec(property(get=GetA2,put=PutA2))
    double A2;
    __declspec(property(get=GetH1,put=PutH1))
    double H1;
    __declspec(property(get=GetH2,put=PutH2))
    double H2;
    __declspec(property(get=GetW1,put=PutW1))
    double W1;
    __declspec(property(get=GetW2,put=PutW2))
    double W2;
    __declspec(property(get=GetLayerBoard,put=PutLayerBoard))
    ACAD_LAYER LayerBoard;
    __declspec(property(get=GetLayerSill,put=PutLayerSill))
    ACAD_LAYER LayerSill;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    _bstr_t GetShowShape ( );
    void PutShowShape (
        _bstr_t pVal );
    _bstr_t GetOutsideSlot ( );
    void PutOutsideSlot (
        _bstr_t pVal );
    _bstr_t GetInsideSlot ( );
    void PutInsideSlot (
        _bstr_t pVal );
    double GetWidth1 ( );
    void PutWidth1 (
        double pVal );
    double GetWidth2 ( );
    void PutWidth2 (
        double pVal );
    double GetA ( );
    void PutA (
        double pVal );
    double GetT ( );
    void PutT (
        double pVal );
    _bstr_t GetStyle ( );
    void PutStyle (
        _bstr_t pVal );
    double GetBoardWidth ( );
    void PutBoardWidth (
        double pVal );
    _bstr_t GetInsideBoard ( );
    void PutInsideBoard (
        _bstr_t pVal );
    _bstr_t GetOutsideBoard ( );
    void PutOutsideBoard (
        _bstr_t pVal );
    _bstr_t GetInsideSill ( );
    void PutInsideSill (
        _bstr_t pVal );
    _bstr_t GetOutsideSill ( );
    void PutOutsideSill (
        _bstr_t pVal );
    double GetA1 ( );
    void PutA1 (
        double pVal );
    double GetA2 ( );
    void PutA2 (
        double pVal );
    double GetH1 ( );
    void PutH1 (
        double pVal );
    double GetH2 ( );
    void PutH2 (
        double pVal );
    double GetW1 ( );
    void PutW1 (
        double pVal );
    double GetW2 ( );
    void PutW2 (
        double pVal );
    ACAD_LAYER GetLayerBoard ( );
    void PutLayerBoard (
        ACAD_LAYER pVal );
    ACAD_LAYER GetLayerSill ( );
    void PutLayerSill (
        ACAD_LAYER pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowShape (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowShape (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OutsideSlot (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OutsideSlot (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_InsideSlot (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InsideSlot (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Width1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_T (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_T (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BoardWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BoardWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InsideBoard (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InsideBoard (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OutsideBoard (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OutsideBoard (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_InsideSill (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InsideSill (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OutsideSill (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OutsideSill (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_A1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_A1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_A2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_A2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_H1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_H1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_H2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_H2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_W1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_W1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_W2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_W2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayerBoard (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_LayerBoard (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_LayerSill (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_LayerSill (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("9d654bc0-1705-4bf6-9d35-4e06e6f31b83"))
IComDormer : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetDormerType,put=PutDormerType))
    _bstr_t DormerType;
    __declspec(property(get=GetShowWindow,put=PutShowWindow))
    _bstr_t ShowWindow;
    __declspec(property(get=GetWallWidth,put=PutWallWidth))
    double WallWidth;
    __declspec(property(get=GetWallHeight,put=PutWallHeight))
    double WallHeight;
    __declspec(property(get=GetWallThickness,put=PutWallThickness))
    double WallThickness;
    __declspec(property(get=GetWinWidth,put=PutWinWidth))
    double WinWidth;
    __declspec(property(get=GetWinHeight,put=PutWinHeight))
    double WinHeight;
    __declspec(property(get=GetSlopeGrade,put=PutSlopeGrade))
    double SlopeGrade;
    __declspec(property(get=GetSlopeHeight,put=PutSlopeHeight))
    double SlopeHeight;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetExtendEaves,put=PutExtendEaves))
    double ExtendEaves;
    __declspec(property(get=GetExtendHill,put=PutExtendHill))
    double ExtendHill;
    __declspec(property(get=GetRoofLayer,put=PutRoofLayer))
    ACAD_LAYER RoofLayer;
    __declspec(property(get=GetCeilingLayer,put=PutCeilingLayer))
    ACAD_LAYER CeilingLayer;
    __declspec(property(get=GetSlabLayer,put=PutSlabLayer))
    ACAD_LAYER SlabLayer;
    __declspec(property(get=GetWallLayer,put=PutWallLayer))
    ACAD_LAYER WallLayer;
    __declspec(property(get=GetFrameLayer,put=PutFrameLayer))
    ACAD_LAYER FrameLayer;
    __declspec(property(get=GetGlassLayer,put=PutGlassLayer))
    ACAD_LAYER GlassLayer;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    double TextHeight;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetWallWidth ( );
    void PutWallWidth (
        double pVal );
    double GetWallHeight ( );
    void PutWallHeight (
        double pVal );
    double GetWallThickness ( );
    void PutWallThickness (
        double pVal );
    double GetWinWidth ( );
    void PutWinWidth (
        double pVal );
    double GetWinHeight ( );
    void PutWinHeight (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    double GetExtendEaves ( );
    void PutExtendEaves (
        double pVal );
    double GetExtendHill ( );
    void PutExtendHill (
        double pVal );
    double GetSlopeGrade ( );
    void PutSlopeGrade (
        double pVal );
    double GetSlopeHeight ( );
    void PutSlopeHeight (
        double pVal );
    _bstr_t GetDormerType ( );
    void PutDormerType (
        _bstr_t pVal );
    _bstr_t GetShowWindow ( );
    void PutShowWindow (
        _bstr_t pVal );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pVal );
    double GetTextHeight ( );
    void PutTextHeight (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    ACAD_LAYER GetRoofLayer ( );
    void PutRoofLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetCeilingLayer ( );
    void PutCeilingLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetSlabLayer ( );
    void PutSlabLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetWallLayer ( );
    void PutWallLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetFrameLayer ( );
    void PutFrameLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetGlassLayer ( );
    void PutGlassLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WallWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WallWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WallHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WallHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WallThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WallThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WinWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WinWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WinHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WinHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ExtendEaves (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ExtendEaves (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ExtendHill (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ExtendHill (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlopeGrade (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlopeGrade (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlopeHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlopeHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DormerType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DormerType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowWindow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowWindow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RoofLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RoofLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_CeilingLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_CeilingLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_SlabLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_WallLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_WallLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_FrameLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_FrameLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_GlassLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_GlassLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("a4236810-f69f-49ab-83ad-920333197e28"))
IComNetShelf : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetSphereLayer,put=PutSphereLayer))
    ACAD_LAYER SphereLayer;
    __declspec(property(get=GetMonoSphere,put=PutMonoSphere))
    _bstr_t MonoSphere;
    __declspec(property(get=GetSphereRadius,put=PutSphereRadius))
    double SphereRadius;
    __declspec(property(get=GetPoleRadius,put=PutPoleRadius))
    double PoleRadius;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    ACAD_LAYER GetSphereLayer ( );
    void PutSphereLayer (
        ACAD_LAYER pVal );
    _bstr_t GetMonoSphere ( );
    void PutMonoSphere (
        _bstr_t pVal );
    double GetSphereRadius ( );
    void PutSphereRadius (
        double pVal );
    double GetPoleRadius ( );
    void PutPoleRadius (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SphereLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_SphereLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_MonoSphere (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MonoSphere (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SphereRadius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SphereRadius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PoleRadius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PoleRadius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("dc8ea239-3c7f-4d2c-be9a-c9695be96912"))
IComMultiViewInsert : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetScaleX,put=PutScaleX))
    double ScaleX;
    __declspec(property(get=GetScaleY,put=PutScaleY))
    double ScaleY;
    __declspec(property(get=GetScaleZ,put=PutScaleZ))
    double ScaleZ;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetRotation ( );
    void PutRotation (
        double pVal );
    double GetScaleX ( );
    void PutScaleX (
        double pVal );
    double GetScaleY ( );
    void PutScaleY (
        double pVal );
    double GetScaleZ ( );
    void PutScaleZ (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleZ (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleZ (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("b8996fca-d6e7-4778-94af-a8bd8917c689"))
IComPromptMark : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetShape,put=PutShape))
    _bstr_t Shape;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetLength ( );
    void PutLength (
        double pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetRotation ( );
    void PutRotation (
        double pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetShape ( );
    void PutShape (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Shape (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("59b5f902-e6c3-42b7-8681-016d03ecb2b8"))
IComDrawingName : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetNameText,put=PutNameText))
    _bstr_t NameText;
    __declspec(property(get=GetNameStyle,put=PutNameStyle))
    _bstr_t NameStyle;
    __declspec(property(get=GetNameHeight,put=PutNameHeight))
    _bstr_t NameHeight;
    __declspec(property(get=GetScaleText,put=PutScaleText))
    _bstr_t ScaleText;
    __declspec(property(get=GetScaleStyle,put=PutScaleStyle))
    _bstr_t ScaleStyle;
    __declspec(property(get=GetScaleHeight,put=PutScaleHeight))
    _bstr_t ScaleHeight;
    __declspec(property(get=GetSpaceCoef,put=PutSpaceCoef))
    _bstr_t SpaceCoef;
    __declspec(property(get=GetDimStyle,put=PutDimStyle))
    _bstr_t DimStyle;
    __declspec(property(get=GetShowScale,put=PutShowScale))
    _bstr_t ShowScale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetNameText ( );
    void PutNameText (
        _bstr_t pVal );
    _bstr_t GetNameStyle ( );
    void PutNameStyle (
        _bstr_t pVal );
    _bstr_t GetNameHeight ( );
    void PutNameHeight (
        _bstr_t pVal );
    _bstr_t GetScaleText ( );
    void PutScaleText (
        _bstr_t pVal );
    _bstr_t GetScaleStyle ( );
    void PutScaleStyle (
        _bstr_t pVal );
    _bstr_t GetScaleHeight ( );
    void PutScaleHeight (
        _bstr_t pVal );
    _bstr_t GetSpaceCoef ( );
    void PutSpaceCoef (
        _bstr_t pVal );
    _bstr_t GetDimStyle ( );
    void PutDimStyle (
        _bstr_t pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetShowScale ( );
    void PutShowScale (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NameText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NameText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NameStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NameStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NameHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NameHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceCoef (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SpaceCoef (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DimStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DimStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowScale (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowScale (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("ba5443fd-0711-4f17-9037-875cf21ff663"))
IComCurveMesh2 : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetShapeVisibility,put=PutShapeVisibility))
    _bstr_t ShapeVisibility;
    __declspec(property(get=GetPathLength))
    _bstr_t PathLength;
    __declspec(property(get=GetSideArea))
    _bstr_t SideArea;
    __declspec(property(get=GetShapePerimeter))
    _bstr_t ShapePerimeter;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetVertex,put=PutVertex))
    _variant_t Vertex;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    _bstr_t GetPathLength ( );
    _bstr_t GetSideArea ( );
    _bstr_t GetShapePerimeter ( );
    _bstr_t GetVolume ( );
    _variant_t GetVertex ( );
    void PutVertex (
        const _variant_t & pVal );
    _bstr_t GetShapeVisibility ( );
    void PutShapeVisibility (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PathLength (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SideArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ShapePerimeter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Vertex (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Vertex (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ShapeVisibility (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShapeVisibility (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("c8fe917a-3c26-4c58-a248-e871179bae55"))
IComPolyMesh2 : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetShapeVisibility,put=PutShapeVisibility))
    _bstr_t ShapeVisibility;
    __declspec(property(get=GetPathLength))
    _bstr_t PathLength;
    __declspec(property(get=GetSideArea))
    _bstr_t SideArea;
    __declspec(property(get=GetSectionNum))
    int SectionNum;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetVertex,put=PutVertex))
    _variant_t Vertex;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetSection,put=PutSection))
    _variant_t Section;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    _bstr_t GetPathLength ( );
    _bstr_t GetSideArea ( );
    int GetSectionNum ( );
    _bstr_t GetVolume ( );
    _variant_t GetVertex ( );
    void PutVertex (
        const _variant_t & pVal );
    _variant_t GetSection ( );
    void PutSection (
        const _variant_t & pVal );
    _bstr_t GetShapeVisibility ( );
    void PutShapeVisibility (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PathLength (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SideArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SectionNum (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Vertex (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Vertex (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Section (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Section (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ShapeVisibility (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShapeVisibility (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("abcac30c-65b7-46a3-a2f3-88cd59c61baa"))
IComCuspRoof : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetSlabThick,put=PutSlabThick))
    double SlabThick;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetElev,put=PutElev))
    double Elev;
    __declspec(property(get=GetSideNum,put=PutSideNum))
    int SideNum;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetRotate,put=PutRotate))
    double Rotate;
    __declspec(property(get=GetEavesLen,put=PutEavesLen))
    double EavesLen;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    double GetElev ( );
    void PutElev (
        double pVal );
    int GetSideNum ( );
    void PutSideNum (
        int pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    double GetRotate ( );
    void PutRotate (
        double pVal );
    double GetEavesLen ( );
    void PutEavesLen (
        double pVal );
    double GetSlabThick ( );
    void PutSlabThick (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Elev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SideNum (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_SideNum (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rotate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EavesLen (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EavesLen (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThick (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("d4a06982-b2f8-43a2-acfb-cfb8bb64a048"))
IComDualSlopeRoof : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElev,put=PutElev))
    double Elev;
    __declspec(property(get=GetLeftSlopeAng,put=PutLeftSlopeAng))
    double LeftSlopeAng;
    __declspec(property(get=GetRightSlopeAng,put=PutRightSlopeAng))
    double RightSlopeAng;
    __declspec(property(get=GetSlabThick,put=PutSlabThick))
    double SlabThick;
    __declspec(property(get=GetRoofHeight,put=PutRoofHeight))
    double RoofHeight;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    double GetElev ( );
    void PutElev (
        double pVal );
    double GetLeftSlopeAng ( );
    void PutLeftSlopeAng (
        double pVal );
    double GetRightSlopeAng ( );
    void PutRightSlopeAng (
        double pVal );
    double GetSlabThick ( );
    void PutSlabThick (
        double pVal );
    double GetRoofHeight ( );
    void PutRoofHeight (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Elev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftSlopeAng (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftSlopeAng (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RightSlopeAng (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RightSlopeAng (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RoofHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RoofHeight (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("36cb4d1e-9e7c-4e2b-afb0-fbe9a09cfcce"))
IComSymbCut : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCutType,put=PutCutType))
    _bstr_t CutType;
    __declspec(property(get=GetIsHide,put=PutIsHide))
    _bstr_t IsHide;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetCutType ( );
    void PutCutType (
        _bstr_t pVal );
    _bstr_t GetIsHide ( );
    void PutIsHide (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CutType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CutType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsHide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsHide (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("2ec12a00-11b0-439d-8644-957d39e6e95b"))
IComPolyPathArray : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCellAlign,put=PutCellAlign))
    _bstr_t CellAlign;
    __declspec(property(get=GetBasePos,put=PutBasePos))
    _bstr_t BasePos;
    __declspec(property(get=GetPicWidth,put=PutPicWidth))
    double PicWidth;
    __declspec(property(get=GetPicRatio,put=PutPicRatio))
    _bstr_t PicRatio;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetCellAlign ( );
    void PutCellAlign (
        _bstr_t pVal );
    _bstr_t GetBasePos ( );
    void PutBasePos (
        _bstr_t pVal );
    double GetPicWidth ( );
    void PutPicWidth (
        double pVal );
    _bstr_t GetPicRatio ( );
    void PutPicRatio (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CellAlign (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellAlign (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BasePos (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BasePos (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PicWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PicWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PicRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PicRatio (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("87d26781-df0a-4270-905c-85e3244d7401"))
IComCrossStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetStairWidth,put=PutStairWidth))
    double StairWidth;
    __declspec(property(get=GetSpaceWidth,put=PutSpaceWidth))
    double SpaceWidth;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStepSumNum,put=PutStepSumNum))
    short StepSumNum;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailDistToSide,put=PutRailDistToSide))
    double RailDistToSide;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetRailOutDist,put=PutRailOutDist))
    double RailOutDist;
    __declspec(property(get=GetRailOutSide,put=PutRailOutSide))
    _bstr_t RailOutSide;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetLeftBeam,put=PutLeftBeam))
    _bstr_t LeftBeam;
    __declspec(property(get=GetRightBeam,put=PutRightBeam))
    _bstr_t RightBeam;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetSlabLength1,put=PutSlabLength1))
    double SlabLength1;
    __declspec(property(get=GetSlabLength2,put=PutSlabLength2))
    double SlabLength2;
    __declspec(property(get=GetSlabLength3,put=PutSlabLength3))
    double SlabLength3;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetRailInside,put=PutRailInside))
    _bstr_t RailInside;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetEvacuateDia,put=PutEvacuateDia))
    _bstr_t EvacuateDia;
    __declspec(property(get=GetEvacuateDiaColor,put=PutEvacuateDiaColor))
    _variant_t EvacuateDiaColor;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetBoardThick,put=PutBoardThick))
    double BoardThick;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetHasOutsideHandrail,put=PutHasOutsideHandrail))
    _bstr_t HasOutsideHandrail;
    __declspec(property(get=GetHasCeller,put=PutHasCeller))
    _bstr_t HasCeller;
    __declspec(property(get=GetDownDir,put=PutDownDir))
    _bstr_t DownDir;
    __declspec(property(get=GetHasRoof,put=PutHasRoof))
    _bstr_t HasRoof;
    __declspec(property(get=GetUpDir,put=PutUpDir))
    _bstr_t UpDir;

    //
    // Wrapper methods for error-handling
    //

    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetSpaceWidth ( );
    void PutSpaceWidth (
        double pVal );
    double GetStairWidth ( );
    void PutStairWidth (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    short GetStepSumNum ( );
    void PutStepSumNum (
        short pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailDistToSide ( );
    void PutRailDistToSide (
        double pVal );
    _bstr_t GetRailInside ( );
    void PutRailInside (
        _bstr_t pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    double GetRailOutDist ( );
    void PutRailOutDist (
        double pVal );
    _bstr_t GetRailOutSide ( );
    void PutRailOutSide (
        _bstr_t pVal );
    _bstr_t GetHasOutsideHandrail ( );
    void PutHasOutsideHandrail (
        _bstr_t pVal );
    _bstr_t GetLeftBeam ( );
    void PutLeftBeam (
        _bstr_t pVal );
    _bstr_t GetRightBeam ( );
    void PutRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    double GetSlabLength1 ( );
    void PutSlabLength1 (
        double pVal );
    double GetSlabLength2 ( );
    void PutSlabLength2 (
        double pVal );
    double GetSlabLength3 ( );
    void PutSlabLength3 (
        double pVal );
    double GetBoardThick ( );
    void PutBoardThick (
        double pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );
    _bstr_t GetEvacuateDia ( );
    void PutEvacuateDia (
        _bstr_t pVal );
    _variant_t GetEvacuateDiaColor ( );
    void PutEvacuateDiaColor (
        const _variant_t & pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetHasCeller ( );
    void PutHasCeller (
        _bstr_t pVal );
    _bstr_t GetDownDir ( );
    void PutDownDir (
        _bstr_t pVal );
    _bstr_t GetHasRoof ( );
    void PutHasRoof (
        _bstr_t pVal );
    _bstr_t GetUpDir ( );
    void PutUpDir (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpaceWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepSumNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepSumNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailDistToSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDistToSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailInside (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailInside (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailOutDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailOutDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailOutSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailOutSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutsideHandrail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutsideHandrail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_SlabLength1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabLength1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabLength2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabLength2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabLength3 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabLength3 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BoardThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BoardThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_EvacuateDia (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EvacuateDia (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EvacuateDiaColor (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_EvacuateDiaColor (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasCeller (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasCeller (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DownDir (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DownDir (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasRoof (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRoof (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpDir (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UpDir (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("d3a5714e-0703-4e29-be6d-891f48d75625"))
IComParallelStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStepNum1,put=PutStepNum1))
    short StepNum1;
    __declspec(property(get=GetStepNum2,put=PutStepNum2))
    short StepNum2;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetStairWidth,put=PutStairWidth))
    double StairWidth;
    __declspec(property(get=GetSpaceWidth,put=PutSpaceWidth))
    double SpaceWidth;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailDistToSide,put=PutRailDistToSide))
    double RailDistToSide;
    __declspec(property(get=GetHasSlab,put=PutHasSlab))
    _bstr_t HasSlab;
    __declspec(property(get=GetSlabSize,put=PutSlabSize))
    double SlabSize;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetPlatType,put=PutPlatType))
    _bstr_t PlatType;
    __declspec(property(get=GetLeftBeam,put=PutLeftBeam))
    _bstr_t LeftBeam;
    __declspec(property(get=GetRightBeam,put=PutRightBeam))
    _bstr_t RightBeam;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetStairWidth2,put=PutStairWidth2))
    double StairWidth2;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetStepTotalNum,put=PutStepTotalNum))
    short StepTotalNum;
    __declspec(property(get=GetRotationDist,put=PutRotationDist))
    double RotationDist;
    __declspec(property(get=GetLayerDist,put=PutLayerDist))
    double LayerDist;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetHasOutRail,put=PutHasOutRail))
    _bstr_t HasOutRail;
    __declspec(property(get=GetHasOutsideHandrail,put=PutHasOutsideHandrail))
    _bstr_t HasOutsideHandrail;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetSpaceWidth ( );
    void PutSpaceWidth (
        double pVal );
    double GetStairWidth ( );
    void PutStairWidth (
        double pVal );
    double GetStairWidth2 ( );
    void PutStairWidth2 (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    short GetStepTotalNum ( );
    void PutStepTotalNum (
        short pVal );
    short GetStepNum1 ( );
    void PutStepNum1 (
        short pVal );
    short GetStepNum2 ( );
    void PutStepNum2 (
        short pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailDistToSide ( );
    void PutRailDistToSide (
        double pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    _bstr_t GetHasOutRail ( );
    void PutHasOutRail (
        _bstr_t pVal );
    _bstr_t GetHasOutsideHandrail ( );
    void PutHasOutsideHandrail (
        _bstr_t pVal );
    double GetRotationDist ( );
    void PutRotationDist (
        double pVal );
    double GetLayerDist ( );
    void PutLayerDist (
        double pVal );
    _bstr_t GetPlatType ( );
    void PutPlatType (
        _bstr_t pVal );
    _bstr_t GetHasSlab ( );
    void PutHasSlab (
        _bstr_t pVal );
    double GetSlabSize ( );
    void PutSlabSize (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    _bstr_t GetLeftBeam ( );
    void PutLeftBeam (
        _bstr_t pVal );
    _bstr_t GetRightBeam ( );
    void PutRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpaceWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepTotalNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepTotalNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum1 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum1 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum2 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum2 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailDistToSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDistToSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutsideHandrail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutsideHandrail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RotationDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RotationDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayerDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayerDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PlatType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PlatType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("23facce5-7866-47f7-bc70-6fce9120fffa"))
IComScissorsStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStepNum1,put=PutStepNum1))
    short StepNum1;
    __declspec(property(get=GetStepNum2,put=PutStepNum2))
    short StepNum2;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetStairWidth,put=PutStairWidth))
    double StairWidth;
    __declspec(property(get=GetSpaceWidth,put=PutSpaceWidth))
    double SpaceWidth;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailDistToSide,put=PutRailDistToSide))
    double RailDistToSide;
    __declspec(property(get=GetHasSlab,put=PutHasSlab))
    _bstr_t HasSlab;
    __declspec(property(get=GetSlabSize,put=PutSlabSize))
    double SlabSize;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetLeftBeam,put=PutLeftBeam))
    _bstr_t LeftBeam;
    __declspec(property(get=GetRightBeam,put=PutRightBeam))
    _bstr_t RightBeam;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetStepTotalNum,put=PutStepTotalNum))
    short StepTotalNum;
    __declspec(property(get=GetRotationDist,put=PutRotationDist))
    double RotationDist;
    __declspec(property(get=GetLayerDist,put=PutLayerDist))
    double LayerDist;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetHasOutRail,put=PutHasOutRail))
    _bstr_t HasOutRail;
    __declspec(property(get=GetHasOutsideHandrail,put=PutHasOutsideHandrail))
    _bstr_t HasOutsideHandrail;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetSpaceWidth ( );
    void PutSpaceWidth (
        double pVal );
    double GetStairWidth ( );
    void PutStairWidth (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    short GetStepTotalNum ( );
    void PutStepTotalNum (
        short pVal );
    short GetStepNum1 ( );
    void PutStepNum1 (
        short pVal );
    short GetStepNum2 ( );
    void PutStepNum2 (
        short pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailDistToSide ( );
    void PutRailDistToSide (
        double pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    _bstr_t GetHasOutRail ( );
    void PutHasOutRail (
        _bstr_t pVal );
    _bstr_t GetHasOutsideHandrail ( );
    void PutHasOutsideHandrail (
        _bstr_t pVal );
    double GetRotationDist ( );
    void PutRotationDist (
        double pVal );
    double GetLayerDist ( );
    void PutLayerDist (
        double pVal );
    _bstr_t GetHasSlab ( );
    void PutHasSlab (
        _bstr_t pVal );
    double GetSlabSize ( );
    void PutSlabSize (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    _bstr_t GetLeftBeam ( );
    void PutLeftBeam (
        _bstr_t pVal );
    _bstr_t GetRightBeam ( );
    void PutRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpaceWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepTotalNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepTotalNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum1 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum1 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum2 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum2 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailDistToSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDistToSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutsideHandrail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutsideHandrail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RotationDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RotationDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayerDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayerDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("40aa08b0-6c38-45b6-9fa9-cb201c5c23b9"))
IComCornerStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStepNum1,put=PutStepNum1))
    short StepNum1;
    __declspec(property(get=GetStepNum2,put=PutStepNum2))
    short StepNum2;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetMidStairWidth,put=PutMidStairWidth))
    double MidStairWidth;
    __declspec(property(get=GetSideStairWidth,put=PutSideStairWidth))
    double SideStairWidth;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailDistToSide,put=PutRailDistToSide))
    double RailDistToSide;
    __declspec(property(get=GetHasSlab,put=PutHasSlab))
    _bstr_t HasSlab;
    __declspec(property(get=GetSlabSize,put=PutSlabSize))
    double SlabSize;
    __declspec(property(get=GetSlabLength,put=PutSlabLength))
    double SlabLength;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetPlatType,put=PutPlatType))
    _bstr_t PlatType;
    __declspec(property(get=GetLeftBeam,put=PutLeftBeam))
    _bstr_t LeftBeam;
    __declspec(property(get=GetRightBeam,put=PutRightBeam))
    _bstr_t RightBeam;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetStepTotalNum,put=PutStepTotalNum))
    short StepTotalNum;
    __declspec(property(get=GetRotationDist,put=PutRotationDist))
    double RotationDist;
    __declspec(property(get=GetLayerDist,put=PutLayerDist))
    double LayerDist;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetHasOutRail,put=PutHasOutRail))
    _bstr_t HasOutRail;
    __declspec(property(get=GetHasOutsideHandrail,put=PutHasOutsideHandrail))
    _bstr_t HasOutsideHandrail;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetSideStairWidth ( );
    void PutSideStairWidth (
        double pVal );
    double GetMidStairWidth ( );
    void PutMidStairWidth (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    short GetStepTotalNum ( );
    void PutStepTotalNum (
        short pVal );
    short GetStepNum1 ( );
    void PutStepNum1 (
        short pVal );
    short GetStepNum2 ( );
    void PutStepNum2 (
        short pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailDistToSide ( );
    void PutRailDistToSide (
        double pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    _bstr_t GetHasOutRail ( );
    void PutHasOutRail (
        _bstr_t pVal );
    _bstr_t GetHasOutsideHandrail ( );
    void PutHasOutsideHandrail (
        _bstr_t pVal );
    _bstr_t GetPlatType ( );
    void PutPlatType (
        _bstr_t pVal );
    _bstr_t GetHasSlab ( );
    void PutHasSlab (
        _bstr_t pVal );
    double GetSlabSize ( );
    void PutSlabSize (
        double pVal );
    double GetSlabLength ( );
    void PutSlabLength (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    double GetRotationDist ( );
    void PutRotationDist (
        double pVal );
    double GetLayerDist ( );
    void PutLayerDist (
        double pVal );
    _bstr_t GetLeftBeam ( );
    void PutLeftBeam (
        _bstr_t pVal );
    _bstr_t GetRightBeam ( );
    void PutRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SideStairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SideStairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MidStairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MidStairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepTotalNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepTotalNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum1 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum1 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum2 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum2 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailDistToSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDistToSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutsideHandrail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutsideHandrail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PlatType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PlatType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RotationDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RotationDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayerDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayerDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("1f22b9a1-0337-41fe-a8dd-e5313cc1fb98"))
IComDoubleMulStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStepNum1,put=PutStepNum1))
    short StepNum1;
    __declspec(property(get=GetStepNum2,put=PutStepNum2))
    short StepNum2;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetMidStairWidth,put=PutMidStairWidth))
    double MidStairWidth;
    __declspec(property(get=GetSideStairWidth,put=PutSideStairWidth))
    double SideStairWidth;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailDistToSide,put=PutRailDistToSide))
    double RailDistToSide;
    __declspec(property(get=GetSidePlatWidth,put=PutSidePlatWidth))
    double SidePlatWidth;
    __declspec(property(get=GetMidPlatLength,put=PutMidPlatLength))
    double MidPlatLength;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetSidePlatLength,put=PutSidePlatLength))
    double SidePlatLength;
    __declspec(property(get=GetLeftBeam,put=PutLeftBeam))
    _bstr_t LeftBeam;
    __declspec(property(get=GetRightBeam,put=PutRightBeam))
    _bstr_t RightBeam;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetMidPlatWidth,put=PutMidPlatWidth))
    double MidPlatWidth;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetRailOutDistSide,put=PutRailOutDistSide))
    double RailOutDistSide;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetStepTotalNum,put=PutStepTotalNum))
    short StepTotalNum;
    __declspec(property(get=GetStepNum3,put=PutStepNum3))
    short StepNum3;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetHasOutRail,put=PutHasOutRail))
    _bstr_t HasOutRail;
    __declspec(property(get=GetHasOutsideHandrail,put=PutHasOutsideHandrail))
    _bstr_t HasOutsideHandrail;
    __declspec(property(get=GetRailOutDist,put=PutRailOutDist))
    double RailOutDist;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetSideStairWidth ( );
    void PutSideStairWidth (
        double pVal );
    double GetMidStairWidth ( );
    void PutMidStairWidth (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    short GetStepTotalNum ( );
    void PutStepTotalNum (
        short pVal );
    short GetStepNum1 ( );
    void PutStepNum1 (
        short pVal );
    short GetStepNum2 ( );
    void PutStepNum2 (
        short pVal );
    short GetStepNum3 ( );
    void PutStepNum3 (
        short pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailDistToSide ( );
    void PutRailDistToSide (
        double pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    double GetRailOutDist ( );
    void PutRailOutDist (
        double pVal );
    double GetRailOutDistSide ( );
    void PutRailOutDistSide (
        double pVal );
    _bstr_t GetHasOutRail ( );
    void PutHasOutRail (
        _bstr_t pVal );
    _bstr_t GetHasOutsideHandrail ( );
    void PutHasOutsideHandrail (
        _bstr_t pVal );
    double GetSidePlatLength ( );
    void PutSidePlatLength (
        double pVal );
    double GetSidePlatWidth ( );
    void PutSidePlatWidth (
        double pVal );
    double GetMidPlatLength ( );
    void PutMidPlatLength (
        double pVal );
    double GetMidPlatWidth ( );
    void PutMidPlatWidth (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    _bstr_t GetLeftBeam ( );
    void PutLeftBeam (
        _bstr_t pVal );
    _bstr_t GetRightBeam ( );
    void PutRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SideStairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SideStairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MidStairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MidStairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepTotalNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepTotalNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum1 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum1 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum2 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum2 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum3 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum3 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailDistToSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDistToSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailOutDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailOutDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailOutDistSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailOutDistSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutsideHandrail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutsideHandrail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SidePlatLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SidePlatLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SidePlatWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SidePlatWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MidPlatLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MidPlatLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MidPlatWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MidPlatWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("727dbbc5-2729-4282-823d-34f5fba1baca"))
IComTriangleStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetRailIsOpen,put=PutRailIsOpen))
    _bstr_t RailIsOpen;
    __declspec(property(get=GetStepNum1,put=PutStepNum1))
    short StepNum1;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetStairWidth,put=PutStairWidth))
    double StairWidth;
    __declspec(property(get=GetSpaceWidth,put=PutSpaceWidth))
    double SpaceWidth;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailDistToSide,put=PutRailDistToSide))
    double RailDistToSide;
    __declspec(property(get=GetHasSlab,put=PutHasSlab))
    _bstr_t HasSlab;
    __declspec(property(get=GetSlabSize,put=PutSlabSize))
    double SlabSize;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetLeftBeam,put=PutLeftBeam))
    _bstr_t LeftBeam;
    __declspec(property(get=GetRightBeam,put=PutRightBeam))
    _bstr_t RightBeam;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetRailOutDist,put=PutRailOutDist))
    double RailOutDist;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetHasOutRail,put=PutHasOutRail))
    _bstr_t HasOutRail;
    __declspec(property(get=GetHasOutsideHandrail,put=PutHasOutsideHandrail))
    _bstr_t HasOutsideHandrail;
    __declspec(property(get=GetHasRailConnect,put=PutHasRailConnect))
    _bstr_t HasRailConnect;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetSpaceWidth ( );
    void PutSpaceWidth (
        double pVal );
    double GetStairWidth ( );
    void PutStairWidth (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    short GetStepNum1 ( );
    void PutStepNum1 (
        short pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailDistToSide ( );
    void PutRailDistToSide (
        double pVal );
    _bstr_t GetHasRailConnect ( );
    void PutHasRailConnect (
        _bstr_t pVal );
    _bstr_t GetRailIsOpen ( );
    void PutRailIsOpen (
        _bstr_t pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    _bstr_t GetHasOutRail ( );
    void PutHasOutRail (
        _bstr_t pVal );
    _bstr_t GetHasOutsideHandrail ( );
    void PutHasOutsideHandrail (
        _bstr_t pVal );
    double GetRailOutDist ( );
    void PutRailOutDist (
        double pVal );
    _bstr_t GetHasSlab ( );
    void PutHasSlab (
        _bstr_t pVal );
    double GetSlabSize ( );
    void PutSlabSize (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    _bstr_t GetLeftBeam ( );
    void PutLeftBeam (
        _bstr_t pVal );
    _bstr_t GetRightBeam ( );
    void PutRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpaceWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum1 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum1 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailDistToSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDistToSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasRailConnect (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRailConnect (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailIsOpen (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailIsOpen (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutsideHandrail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutsideHandrail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailOutDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailOutDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("438c2914-eefe-4fc0-959e-6a7dc63f3c13"))
IComRectCornerStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStepNum1,put=PutStepNum1))
    short StepNum1;
    __declspec(property(get=GetStepNum2,put=PutStepNum2))
    short StepNum2;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailDistToSide,put=PutRailDistToSide))
    double RailDistToSide;
    __declspec(property(get=GetHasSlab,put=PutHasSlab))
    _bstr_t HasSlab;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetLeftBeam,put=PutLeftBeam))
    _bstr_t LeftBeam;
    __declspec(property(get=GetRightBeam,put=PutRightBeam))
    _bstr_t RightBeam;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetRailOutDist,put=PutRailOutDist))
    double RailOutDist;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetHasOutRail,put=PutHasOutRail))
    _bstr_t HasOutRail;
    __declspec(property(get=GetHasOutsideHandrail,put=PutHasOutsideHandrail))
    _bstr_t HasOutsideHandrail;
    __declspec(property(get=GetHasRailConnect,put=PutHasRailConnect))
    _bstr_t HasRailConnect;
    __declspec(property(get=GetStairWidthOne,put=PutStairWidthOne))
    double StairWidthOne;
    __declspec(property(get=GetStairWidthTwo,put=PutStairWidthTwo))
    double StairWidthTwo;
    __declspec(property(get=GetStairNum,put=PutStairNum))
    _bstr_t StairNum;
    __declspec(property(get=GetStairWidthThree,put=PutStairWidthThree))
    double StairWidthThree;
    __declspec(property(get=GetStepNum3,put=PutStepNum3))
    short StepNum3;
    __declspec(property(get=GetStairWidthFour,put=PutStairWidthFour))
    double StairWidthFour;
    __declspec(property(get=GetStepNum4,put=PutStepNum4))
    short StepNum4;
    __declspec(property(get=GetIsSmmetry,put=PutIsSmmetry))
    _bstr_t IsSmmetry;
    __declspec(property(get=GetSlabSizeOne,put=PutSlabSizeOne))
    double SlabSizeOne;
    __declspec(property(get=GetSlabWidthTwo,put=PutSlabWidthTwo))
    double SlabWidthTwo;
    __declspec(property(get=GetSlabSizeTwo,put=PutSlabSizeTwo))
    double SlabSizeTwo;
    __declspec(property(get=GetSlabWidthThree,put=PutSlabWidthThree))
    double SlabWidthThree;
    __declspec(property(get=GetSlabSizeThree,put=PutSlabSizeThree))
    double SlabSizeThree;
    __declspec(property(get=GetSlabWidthOne,put=PutSlabWidthOne))
    double SlabWidthOne;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetRailOutDistDown,put=PutRailOutDistDown))
    double RailOutDistDown;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetStairWidthOne ( );
    void PutStairWidthOne (
        double pVal );
    double GetStairWidthTwo ( );
    void PutStairWidthTwo (
        double pVal );
    _bstr_t GetIsSmmetry ( );
    void PutIsSmmetry (
        _bstr_t pVal );
    _bstr_t GetStairNum ( );
    void PutStairNum (
        _bstr_t pVal );
    double GetStairWidthThree ( );
    void PutStairWidthThree (
        double pVal );
    short GetStepNum3 ( );
    void PutStepNum3 (
        short pVal );
    double GetStairWidthFour ( );
    void PutStairWidthFour (
        double pVal );
    short GetStepNum4 ( );
    void PutStepNum4 (
        short pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    short GetStepNum1 ( );
    void PutStepNum1 (
        short pVal );
    short GetStepNum2 ( );
    void PutStepNum2 (
        short pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailDistToSide ( );
    void PutRailDistToSide (
        double pVal );
    _bstr_t GetHasRailConnect ( );
    void PutHasRailConnect (
        _bstr_t pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    _bstr_t GetHasOutRail ( );
    void PutHasOutRail (
        _bstr_t pVal );
    _bstr_t GetHasOutsideHandrail ( );
    void PutHasOutsideHandrail (
        _bstr_t pVal );
    double GetRailOutDist ( );
    void PutRailOutDist (
        double pVal );
    double GetRailOutDistDown ( );
    void PutRailOutDistDown (
        double pVal );
    _bstr_t GetHasSlab ( );
    void PutHasSlab (
        _bstr_t pVal );
    double GetSlabWidthOne ( );
    void PutSlabWidthOne (
        double pVal );
    double GetSlabSizeOne ( );
    void PutSlabSizeOne (
        double pVal );
    double GetSlabWidthTwo ( );
    void PutSlabWidthTwo (
        double pVal );
    double GetSlabSizeTwo ( );
    void PutSlabSizeTwo (
        double pVal );
    double GetSlabWidthThree ( );
    void PutSlabWidthThree (
        double pVal );
    double GetSlabSizeThree ( );
    void PutSlabSizeThree (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    _bstr_t GetLeftBeam ( );
    void PutLeftBeam (
        _bstr_t pVal );
    _bstr_t GetRightBeam ( );
    void PutRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidthOne (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidthOne (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidthTwo (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidthTwo (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IsSmmetry (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsSmmetry (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairNum (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairNum (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidthThree (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidthThree (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum3 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum3 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidthFour (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidthFour (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum4 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum4 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum1 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum1 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum2 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum2 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailDistToSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDistToSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasRailConnect (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRailConnect (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutsideHandrail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutsideHandrail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailOutDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailOutDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailOutDistDown (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailOutDistDown (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabWidthOne (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabWidthOne (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabSizeOne (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabSizeOne (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabWidthTwo (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabWidthTwo (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabSizeTwo (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabSizeTwo (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabWidthThree (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabWidthThree (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabSizeThree (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabSizeThree (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("41205729-d7f3-40b2-a4de-7368ee636cf3"))
IComAutoStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetPlatLength,put=PutPlatLength))
    double PlatLength;
    __declspec(property(get=GetSlopeAngle,put=PutSlopeAngle))
    double SlopeAngle;
    __declspec(property(get=GetSingleStair,put=PutSingleStair))
    _bstr_t SingleStair;
    __declspec(property(get=GetSpaceWidth,put=PutSpaceWidth))
    double SpaceWidth;
    __declspec(property(get=GetSignArrow,put=PutSignArrow))
    _bstr_t SignArrow;
    __declspec(property(get=GetSameDirection,put=PutSameDirection))
    _bstr_t SameDirection;
    __declspec(property(get=GetCrossAppose,put=PutCrossAppose))
    _bstr_t CrossAppose;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetStairFlagTwo,put=PutStairFlagTwo))
    _bstr_t StairFlagTwo;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetStairWidth,put=PutStairWidth))
    double StairWidth;
    __declspec(property(get=GetAutoStairTotalLen,put=PutAutoStairTotalLen))
    double AutoStairTotalLen;
    __declspec(property(get=GetAutoStairTotalWidth,put=PutAutoStairTotalWidth))
    double AutoStairTotalWidth;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetStepDist,put=PutStepDist))
    double StepDist;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetAutoStairTotalLen ( );
    void PutAutoStairTotalLen (
        double pVal );
    double GetAutoStairTotalWidth ( );
    void PutAutoStairTotalWidth (
        double pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetStepDist ( );
    void PutStepDist (
        double pVal );
    double GetPlatLength ( );
    void PutPlatLength (
        double pVal );
    double GetSlopeAngle ( );
    void PutSlopeAngle (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    _bstr_t GetSingleStair ( );
    void PutSingleStair (
        _bstr_t pVal );
    double GetStairWidth ( );
    void PutStairWidth (
        double pVal );
    double GetSpaceWidth ( );
    void PutSpaceWidth (
        double pVal );
    _bstr_t GetCrossAppose ( );
    void PutCrossAppose (
        _bstr_t pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetStairFlagTwo ( );
    void PutStairFlagTwo (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    _bstr_t GetSignArrow ( );
    void PutSignArrow (
        _bstr_t pVal );
    _bstr_t GetSameDirection ( );
    void PutSameDirection (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_AutoStairTotalLen (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoStairTotalLen (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AutoStairTotalWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoStairTotalWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PlatLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PlatLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlopeAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlopeAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SingleStair (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SingleStair (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpaceWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CrossAppose (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CrossAppose (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlagTwo (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlagTwo (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SignArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SignArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SameDirection (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SameDirection (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("4a50cd49-8bfd-4282-ba61-c36695daeb03"))
IComApron : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElev,put=PutElev))
    double Elev;
    __declspec(property(get=GetPathLength))
    _bstr_t PathLength;
    __declspec(property(get=GetSideArea))
    _bstr_t SideArea;
    __declspec(property(get=GetCloseFlag,put=PutCloseFlag))
    _bstr_t CloseFlag;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetVertex,put=PutVertex))
    _variant_t Vertex;
    __declspec(property(get=GetInHeight,put=PutInHeight))
    double InHeight;
    __declspec(property(get=GetOutHeight,put=PutOutHeight))
    double OutHeight;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetDists,put=PutDists))
    _bstr_t Dists;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetInHeight ( );
    void PutInHeight (
        double pVal );
    double GetOutHeight ( );
    void PutOutHeight (
        double pVal );
    double GetElev ( );
    void PutElev (
        double pVal );
    _bstr_t GetPathLength ( );
    _bstr_t GetDists ( );
    void PutDists (
        _bstr_t pVal );
    _bstr_t GetSideArea ( );
    _bstr_t GetVolume ( );
    _bstr_t GetCloseFlag ( );
    void PutCloseFlag (
        _bstr_t pVal );
    _variant_t GetVertex ( );
    void PutVertex (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_InHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OutHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OutHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PathLength (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Dists (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Dists (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SideArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CloseFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CloseFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Vertex (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Vertex (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("4fadcfc0-7078-4cbe-bf66-990fb5c4f0af"))
IComMountRoof : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElev,put=PutElev))
    double Elev;
    __declspec(property(get=GetSlopeAng,put=PutSlopeAng))
    _bstr_t SlopeAng;
    __declspec(property(get=GetRoofHeight,put=PutRoofHeight))
    double RoofHeight;
    __declspec(property(get=GetMountHeight,put=PutMountHeight))
    double MountHeight;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetEavesLength,put=PutEavesLength))
    double EavesLength;
    __declspec(property(get=GetMountLength,put=PutMountLength))
    double MountLength;
    __declspec(property(get=GetTopLength,put=PutTopLength))
    double TopLength;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetSlabThick,put=PutSlabThick))
    double SlabThick;
    __declspec(property(get=GetRoofType))
    _bstr_t RoofType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetRoofType ( );
    double GetElev ( );
    void PutElev (
        double pVal );
    _bstr_t GetSlopeAng ( );
    void PutSlopeAng (
        _bstr_t pVal );
    double GetRoofHeight ( );
    void PutRoofHeight (
        double pVal );
    double GetMountHeight ( );
    void PutMountHeight (
        double pVal );
    double GetLength ( );
    void PutLength (
        double pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetEavesLength ( );
    void PutEavesLength (
        double pVal );
    double GetMountLength ( );
    void PutMountLength (
        double pVal );
    double GetTopLength ( );
    void PutTopLength (
        double pVal );
    double GetSlabThick ( );
    void PutSlabThick (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RoofType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Elev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlopeAng (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SlopeAng (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RoofHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RoofHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MountHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MountHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EavesLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EavesLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MountLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MountLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TopLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TopLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThick (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("4d9241bd-ddc7-4ac0-ba46-6dfa85217dda"))
IComFloorRect : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetProjectName))
    _bstr_t ProjectName;
    __declspec(property(get=GetFloorName))
    _bstr_t FloorName;
    __declspec(property(get=GetFloorHeight))
    _bstr_t FloorHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetCrossLen,put=PutCrossLen))
    _bstr_t CrossLen;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetProjectName ( );
    _bstr_t GetFloorName ( );
    _bstr_t GetFloorHeight ( );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetCrossLen ( );
    void PutCrossLen (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ProjectName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FloorName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FloorHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_CrossLen (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CrossLen (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("06d560f7-af2e-42ab-a60e-bb6964e7d588"))
ISectionEntity : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder,put=PutBorder))
    _bstr_t Border;
    __declspec(property(get=GetLineType,put=PutLineType))
    _bstr_t LineType;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetHideLine,put=PutHideLine))
    _bstr_t HideLine;
    __declspec(property(get=GetShowFill,put=PutShowFill))
    _bstr_t ShowFill;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetBorder ( );
    void PutBorder (
        _bstr_t pStr );
    _bstr_t GetLineType ( );
    void PutLineType (
        _bstr_t pStr );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pStr );
    _bstr_t GetHideLine ( );
    void PutHideLine (
        _bstr_t pStr );
    _bstr_t GetShowFill ( );
    void PutShowFill (
        _bstr_t pStr );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ BSTR * pStr ) = 0;
      virtual HRESULT __stdcall put_Border (
        /*[in]*/ BSTR pStr ) = 0;
      virtual HRESULT __stdcall get_LineType (
        /*[out,retval]*/ BSTR * pStr ) = 0;
      virtual HRESULT __stdcall put_LineType (
        /*[in]*/ BSTR pStr ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pStr ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pStr ) = 0;
      virtual HRESULT __stdcall get_HideLine (
        /*[out,retval]*/ BSTR * pStr ) = 0;
      virtual HRESULT __stdcall put_HideLine (
        /*[in]*/ BSTR pStr ) = 0;
      virtual HRESULT __stdcall get_ShowFill (
        /*[out,retval]*/ BSTR * pStr ) = 0;
      virtual HRESULT __stdcall put_ShowFill (
        /*[in]*/ BSTR pStr ) = 0;
};

struct __declspec(uuid("a8cc5cb5-5540-4b62-b263-d0081e1b6253"))
IComSymbModi : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetEditText,put=PutEditText))
    _bstr_t EditText;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextContent,put=PutTextContent))
    _bstr_t TextContent;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetEditText ( );
    void PutEditText (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetTextContent ( );
    void PutTextContent (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EditText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EditText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextContent (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextContent (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
};

struct __declspec(uuid("9474d266-f375-490f-959d-91b7faf9e047"))
IComStruBeam : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamShape,put=PutBeamShape))
    _bstr_t BeamShape;
    __declspec(property(get=GetBeamWidth,put=PutBeamWidth))
    double BeamWidth;
    __declspec(property(get=GetBeamUpHeight,put=PutBeamUpHeight))
    double BeamUpHeight;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetBeamUpWidth,put=PutBeamUpWidth))
    double BeamUpWidth;
    __declspec(property(get=GetBeamDownHeight,put=PutBeamDownHeight))
    double BeamDownHeight;
    __declspec(property(get=GetBeamTotalHeight,put=PutBeamTotalHeight))
    double BeamTotalHeight;
    __declspec(property(get=GetBeamTotalWidth,put=PutBeamTotalWidth))
    double BeamTotalWidth;
    __declspec(property(get=GetBeamDownWidth,put=PutBeamDownWidth))
    double BeamDownWidth;
    __declspec(property(get=GetBeamIsArc))
    _bstr_t BeamIsArc;
    __declspec(property(get=GetBeamTopHeight1,put=PutBeamTopHeight1))
    double BeamTopHeight1;
    __declspec(property(get=GetBeamTopHeight2,put=PutBeamTopHeight2))
    double BeamTopHeight2;
    __declspec(property(get=GetBeamCorner,put=PutBeamCorner))
    double BeamCorner;
    __declspec(property(get=GetBeamMaterial,put=PutBeamMaterial))
    _bstr_t BeamMaterial;
    __declspec(property(get=GetBeamNumber,put=PutBeamNumber))
    _bstr_t BeamNumber;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetHideLabel,put=PutHideLabel))
    _bstr_t HideLabel;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetBeamShape ( );
    void PutBeamShape (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamWidth ( );
    void PutBeamWidth (
        double pVal );
    double GetBeamTotalWidth ( );
    void PutBeamTotalWidth (
        double pVal );
    double GetBeamTotalHeight ( );
    void PutBeamTotalHeight (
        double pVal );
    double GetBeamUpHeight ( );
    void PutBeamUpHeight (
        double pVal );
    double GetBeamUpWidth ( );
    void PutBeamUpWidth (
        double pVal );
    double GetBeamDownHeight ( );
    void PutBeamDownHeight (
        double pVal );
    double GetBeamDownWidth ( );
    void PutBeamDownWidth (
        double pVal );
    double GetBeamTopHeight1 ( );
    void PutBeamTopHeight1 (
        double pVal );
    double GetBeamTopHeight2 ( );
    void PutBeamTopHeight2 (
        double pVal );
    double GetBeamCorner ( );
    void PutBeamCorner (
        double pVal );
    _bstr_t GetBeamNumber ( );
    void PutBeamNumber (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetHideLabel ( );
    void PutHideLabel (
        _bstr_t pVal );
    _bstr_t GetBeamIsArc ( );
    _bstr_t GetBeamMaterial ( );
    void PutBeamMaterial (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamShape (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamShape (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamTotalWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamTotalWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamTotalHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamTotalHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamUpHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamUpHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamUpWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamUpWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamDownHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamDownHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamDownWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamDownWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamTopHeight1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamTopHeight1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamTopHeight2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamTopHeight2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamCorner (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamCorner (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamNumber (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HideLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HideLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamIsArc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BeamMaterial (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamMaterial (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("e212fe54-1ce6-41c2-8064-cbe4c0237bbd"))
IComStruFloorSlab : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetFloorSlabThick,put=PutFloorSlabThick))
    double FloorSlabThick;
    __declspec(property(get=GetFloorSlabType))
    _bstr_t FloorSlabType;
    __declspec(property(get=GetFloorSlabHeight,put=PutFloorSlabHeight))
    double FloorSlabHeight;
    __declspec(property(get=GetFloorSlabNumber,put=PutFloorSlabNumber))
    _bstr_t FloorSlabNumber;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetFloorCLTextHeight,put=PutFloorCLTextHeight))
    _bstr_t FloorCLTextHeight;
    __declspec(property(get=GetFloorCLTextStyle,put=PutFloorCLTextStyle))
    _bstr_t FloorCLTextStyle;
    __declspec(property(get=GetFloorCLHideLabel,put=PutFloorCLHideLabel))
    _bstr_t FloorCLHideLabel;
    __declspec(property(get=GetFloorSlabShape))
    _bstr_t FloorSlabShape;
    __declspec(property(get=GetFloorSlabMaterial,put=PutFloorSlabMaterial))
    _bstr_t FloorSlabMaterial;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetFloorSlabType ( );
    double GetFloorSlabThick ( );
    void PutFloorSlabThick (
        double pVal );
    double GetFloorSlabHeight ( );
    void PutFloorSlabHeight (
        double pVal );
    _bstr_t GetFloorSlabNumber ( );
    void PutFloorSlabNumber (
        _bstr_t pVal );
    _bstr_t GetFloorCLTextHeight ( );
    void PutFloorCLTextHeight (
        _bstr_t pVal );
    _bstr_t GetFloorCLTextStyle ( );
    void PutFloorCLTextStyle (
        _bstr_t pVal );
    _bstr_t GetFloorCLHideLabel ( );
    void PutFloorCLHideLabel (
        _bstr_t pVal );
    _bstr_t GetFloorSlabShape ( );
    _bstr_t GetFloorSlabMaterial ( );
    void PutFloorSlabMaterial (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FloorSlabType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FloorSlabThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorSlabThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FloorSlabHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorSlabHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FloorSlabNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorSlabNumber (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FloorCLTextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorCLTextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FloorCLTextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorCLTextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FloorCLHideLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorCLHideLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FloorSlabShape (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FloorSlabMaterial (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorSlabMaterial (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("6c05e8af-e574-4b93-b283-200c2900ce42"))
IComStruSlabHole : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetSlabHoleType))
    _bstr_t SlabHoleType;
    __declspec(property(get=GetSlabHoleWidth,put=PutSlabHoleWidth))
    double SlabHoleWidth;
    __declspec(property(get=GetSlabHoleHeight,put=PutSlabHoleHeight))
    double SlabHoleHeight;
    __declspec(property(get=GetSlabHoleAngle,put=PutSlabHoleAngle))
    double SlabHoleAngle;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetSlabHoleDiam,put=PutSlabHoleDiam))
    double SlabHoleDiam;
    __declspec(property(get=GetSlabHoleElevation,put=PutSlabHoleElevation))
    double SlabHoleElevation;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetHideLabel,put=PutHideLabel))
    _bstr_t HideLabel;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetSlabHoleType ( );
    double GetSlabHoleWidth ( );
    void PutSlabHoleWidth (
        double pVal );
    double GetSlabHoleHeight ( );
    void PutSlabHoleHeight (
        double pVal );
    double GetSlabHoleAngle ( );
    void PutSlabHoleAngle (
        double pVal );
    double GetSlabHoleDiam ( );
    void PutSlabHoleDiam (
        double pVal );
    double GetSlabHoleElevation ( );
    void PutSlabHoleElevation (
        double pVal );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetHideLabel ( );
    void PutHideLabel (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabHoleType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SlabHoleWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabHoleWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabHoleHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabHoleHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabHoleAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabHoleAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabHoleDiam (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabHoleDiam (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabHoleElevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabHoleElevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HideLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HideLabel (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("64d9a4a9-5316-4403-8d00-b672a8bb392f"))
IComStruNodePoint : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetNodeNumber,put=PutNodeNumber))
    _bstr_t NodeNumber;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetNodeNumber ( );
    void PutNodeNumber (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NodeNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NodeNumber (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("3dd2e08b-c9ed-4d94-bae3-a6e84afb4139"))
IComStruBarBase : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetBaseNumber,put=PutBaseNumber))
    _bstr_t BaseNumber;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetBaseWidth,put=PutBaseWidth))
    double BaseWidth;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetBaseNumber ( );
    void PutBaseNumber (
        _bstr_t pVal );
    double GetBaseWidth ( );
    void PutBaseWidth (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BaseNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BaseNumber (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BaseWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BaseWidth (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("8e33d371-f242-46e4-bc03-5e5307d47d9a"))
IComStruSelfBase : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetBaseNumber,put=PutBaseNumber))
    _bstr_t BaseNumber;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetBaseWidth,put=PutBaseWidth))
    double BaseWidth;
    __declspec(property(get=GetBaseHeight,put=PutBaseHeight))
    double BaseHeight;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetBaseNumber ( );
    void PutBaseNumber (
        _bstr_t pVal );
    double GetBaseWidth ( );
    void PutBaseWidth (
        double pVal );
    double GetBaseHeight ( );
    void PutBaseHeight (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BaseNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BaseNumber (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BaseWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BaseWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BaseHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BaseHeight (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("fc1e625a-b95d-4709-8a80-e2e8823fb6de"))
IComStruReinBar : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetBarType))
    _bstr_t BarType;
    __declspec(property(get=GetBarTypeStart,put=PutBarTypeStart))
    _bstr_t BarTypeStart;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetBarTypeEnd,put=PutBarTypeEnd))
    _bstr_t BarTypeEnd;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetLengthS,put=PutLengthS))
    double LengthS;
    __declspec(property(get=GetLengthO,put=PutLengthO))
    double LengthO;
    __declspec(property(get=GetLengthB,put=PutLengthB))
    double LengthB;
    __declspec(property(get=GetDiaB,put=PutDiaB))
    double DiaB;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetBarType ( );
    _bstr_t GetBarTypeStart ( );
    void PutBarTypeStart (
        _bstr_t pVal );
    _bstr_t GetBarTypeEnd ( );
    void PutBarTypeEnd (
        _bstr_t pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetLengthS ( );
    void PutLengthS (
        double pVal );
    double GetLengthO ( );
    void PutLengthO (
        double pVal );
    double GetLengthB ( );
    void PutLengthB (
        double pVal );
    double GetDiaB ( );
    void PutDiaB (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BarType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BarTypeStart (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BarTypeStart (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BarTypeEnd (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BarTypeEnd (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LengthS (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LengthS (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LengthO (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LengthO (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LengthB (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LengthB (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DiaB (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DiaB (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("e112126c-8b84-42e1-a0f6-60c9bc2b0400"))
IComStruSymbFocus : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetAlign,put=PutAlign))
    _bstr_t Align;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetRowSpaceCoe,put=PutRowSpaceCoe))
    double RowSpaceCoe;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetTxtColor,put=PutTxtColor))
    ACAD_COLOR TxtColor;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetTxtHeight,put=PutTxtHeight))
    _bstr_t TxtHeight;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetTxtHeight ( );
    void PutTxtHeight (
        _bstr_t pVal );
    _bstr_t GetAlign ( );
    void PutAlign (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    double GetRowSpaceCoe ( );
    void PutRowSpaceCoe (
        double pVal );
    ACAD_COLOR GetTxtColor ( );
    void PutTxtColor (
        ACAD_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Align (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Align (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RowSpaceCoe (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RowSpaceCoe (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TxtColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
};

struct __declspec(uuid("d320d923-2311-4646-b3ea-3f0e75c0babd"))
IComStruSymbInsitu : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetAlign,put=PutAlign))
    _bstr_t Align;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetContent,put=PutContent))
    _bstr_t Content;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetTxtColor,put=PutTxtColor))
    ACAD_COLOR TxtColor;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetTxtHeight,put=PutTxtHeight))
    _bstr_t TxtHeight;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetTxtHeight ( );
    void PutTxtHeight (
        _bstr_t pVal );
    _bstr_t GetAlign ( );
    void PutAlign (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetContent ( );
    void PutContent (
        _bstr_t pVal );
    ACAD_COLOR GetTxtColor ( );
    void PutTxtColor (
        ACAD_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Align (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Align (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Content (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Content (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
};

struct __declspec(uuid("214238e8-4e99-4032-99a1-74dc5f9a8db7"))
IComStruHanger : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTxtHeight,put=PutTxtHeight))
    _bstr_t TxtHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTxtColor,put=PutTxtColor))
    ACAD_COLOR TxtColor;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetTxtHeight ( );
    void PutTxtHeight (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    ACAD_COLOR GetTxtColor ( );
    void PutTxtColor (
        ACAD_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
};

struct __declspec(uuid("5b3b29f5-a47e-4ddc-818e-30de3096d748"))
IComStruStirrup : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTxtHeight,put=PutTxtHeight))
    _bstr_t TxtHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTxtColor,put=PutTxtColor))
    ACAD_COLOR TxtColor;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetTxtHeight ( );
    void PutTxtHeight (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    ACAD_COLOR GetTxtColor ( );
    void PutTxtColor (
        ACAD_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
};

struct __declspec(uuid("6ea24a7d-2215-42ac-934d-9b9711aa524c"))
IComStruPlainNumber : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTxtHeight,put=PutTxtHeight))
    _bstr_t TxtHeight;
    __declspec(property(get=GetCorner,put=PutCorner))
    double Corner;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTxtColor,put=PutTxtColor))
    ACAD_COLOR TxtColor;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetTxtHeight ( );
    void PutTxtHeight (
        _bstr_t pVal );
    double GetCorner ( );
    void PutCorner (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    ACAD_COLOR GetTxtColor ( );
    void PutTxtColor (
        ACAD_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Corner (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Corner (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
};

struct __declspec(uuid("3ec94d22-4583-4ba7-94a2-f5af674c2692"))
IComStruSectStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetSectNumber,put=PutSectNumber))
    _bstr_t SectNumber;
    __declspec(property(get=GetLeftHeight,put=PutLeftHeight))
    _bstr_t LeftHeight;
    __declspec(property(get=GetRightHeight,put=PutRightHeight))
    _bstr_t RightHeight;
    __declspec(property(get=GetStepNum,put=PutStepNum))
    int StepNum;
    __declspec(property(get=GetSlabShadowLen,put=PutSlabShadowLen))
    double SlabShadowLen;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetB1Width,put=PutB1Width))
    double B1Width;
    __declspec(property(get=GetC1Height,put=PutC1Height))
    double C1Height;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetD1Width,put=PutD1Width))
    double D1Width;
    __declspec(property(get=GetT1Tickness,put=PutT1Tickness))
    double T1Tickness;
    __declspec(property(get=GetL2Length,put=PutL2Length))
    double L2Length;
    __declspec(property(get=GetB2Width,put=PutB2Width))
    double B2Width;
    __declspec(property(get=GetC2Height,put=PutC2Height))
    double C2Height;
    __declspec(property(get=GetD2Width,put=PutD2Width))
    double D2Width;
    __declspec(property(get=GetT2Tickness,put=PutT2Tickness))
    double T2Tickness;
    __declspec(property(get=GetL3Length,put=PutL3Length))
    double L3Length;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetSectNumber ( );
    void PutSectNumber (
        _bstr_t pVal );
    _bstr_t GetLeftHeight ( );
    void PutLeftHeight (
        _bstr_t pVal );
    _bstr_t GetRightHeight ( );
    void PutRightHeight (
        _bstr_t pVal );
    int GetStepNum ( );
    void PutStepNum (
        int pVal );
    double GetSlabShadowLen ( );
    void PutSlabShadowLen (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    double GetB1Width ( );
    void PutB1Width (
        double pVal );
    double GetC1Height ( );
    void PutC1Height (
        double pVal );
    double GetD1Width ( );
    void PutD1Width (
        double pVal );
    double GetT1Tickness ( );
    void PutT1Tickness (
        double pVal );
    double GetB2Width ( );
    void PutB2Width (
        double pVal );
    double GetC2Height ( );
    void PutC2Height (
        double pVal );
    double GetD2Width ( );
    void PutD2Width (
        double pVal );
    double GetT2Tickness ( );
    void PutT2Tickness (
        double pVal );
    double GetL2Length ( );
    void PutL2Length (
        double pVal );
    double GetL3Length ( );
    void PutL3Length (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SectNumber (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LeftHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_SlabShadowLen (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabShadowLen (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_B1Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_B1Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C1Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C1Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_D1Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_D1Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_T1Tickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_T1Tickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_B2Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_B2Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C2Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C2Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_D2Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_D2Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_T2Tickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_T2Tickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_L2Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_L2Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_L3Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_L3Length (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b5a26919-f4c4-43d4-9422-0e86205263f8"))
IComReinIndexDim : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetReinCLAB,put=PutReinCLAB))
    _bstr_t ReinCLAB;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetInTextStyle,put=PutInTextStyle))
    _bstr_t InTextStyle;
    __declspec(property(get=GetInTextHeight,put=PutInTextHeight))
    double InTextHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetTxtColor,put=PutTxtColor))
    ACAD_COLOR TxtColor;
    __declspec(property(get=GetTxt,put=PutTxt))
    _bstr_t Txt;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetReinCLAB ( );
    void PutReinCLAB (
        _bstr_t pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    _bstr_t GetInTextStyle ( );
    void PutInTextStyle (
        _bstr_t pVal );
    double GetInTextHeight ( );
    void PutInTextHeight (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetTxt ( );
    void PutTxt (
        _bstr_t pVal );
    ACAD_COLOR GetTxtColor ( );
    void PutTxtColor (
        ACAD_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ReinCLAB (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReinCLAB (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InTextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InTextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_InTextHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_InTextHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Txt (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Txt (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
};

struct __declspec(uuid("b798e834-d71c-4fbf-9e3e-2e58b573a34c"))
IComStruWColuSect : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTxtHeight,put=PutTxtHeight))
    _bstr_t TxtHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetHatchLayer,put=PutHatchLayer))
    ACAD_LAYER HatchLayer;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetTxtHeight ( );
    void PutTxtHeight (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    ACAD_LAYER GetHatchLayer ( );
    void PutHatchLayer (
        ACAD_LAYER pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
};

struct __declspec(uuid("1bf8fe48-2478-4dc8-9f6f-38e7ca265d53"))
IComEvacPath : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetShowText,put=PutShowText))
    _bstr_t ShowText;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetPolyWidth,put=PutPolyWidth))
    double PolyWidth;
    __declspec(property(get=GetStandardRange,put=PutStandardRange))
    _bstr_t StandardRange;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetShowText ( );
    void PutShowText (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    double GetPolyWidth ( );
    void PutPolyWidth (
        double pVal );
    _bstr_t GetStandardRange ( );
    void PutStandardRange (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ShowText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PolyWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PolyWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StandardRange (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StandardRange (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("35a690f3-1b5e-4140-bfdb-fd9a256fab9a"))
ComBalcony;
    // [ default ] interface IComBalcony
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("5faae4f7-7f65-4548-89e8-3012ed45cb6d"))
ComStair;
    // [ default ] interface IComStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7296615b-690d-4d6c-9c46-c010704cb69c"))
ComArcStair;
    // [ default ] interface IComArcStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("36e2bdd8-e34a-488b-b2ab-9c62151e4a78"))
ComAscent;
    // [ default ] interface IComAscent
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("cdf3ad73-b922-4e92-903b-c6458e44ff04"))
ComCamera;
    // [ default ] interface IComCamera
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("58f86fbc-a071-4372-b0a6-ccf1998dc680"))
ComColumn;
    // [ default ] interface IComColumn
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("addb6979-ea5d-49ce-8585-781b755ea49b"))
ComCurveMesh;
    // [ default ] interface IComCurveMesh
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("b60530e0-1f8b-4a39-8408-dbaa272544a8"))
ComCurveStair;
    // [ default ] interface IComCurveStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("bd2f14b6-4fab-414c-a368-61cccc477c5f"))
ComHandRail;
    // [ default ] interface IComHandRail
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7180adec-8023-4a12-8c80-324051b0fec5"))
ComLineStair;
    // [ default ] interface IComLineStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("53d5ffe9-30d3-4368-844b-3119c7a16fae"))
ComOpening;
    // [ default ] interface IComOpening
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("590d7894-7eb8-442a-b08f-dced42f334c9"))
ComRail;
    // [ default ] interface IComRail
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("4a4085c7-3655-4f39-8f53-bd515052cd14"))
ComRectStair;
    // [ default ] interface IComRectStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("99f0d174-d565-40f7-aa4d-f8c80b6e57f4"))
ComSlab;
    // [ default ] interface IComSlab
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("d23b1d46-c106-47c3-b6f7-29612377d8e0"))
ComSlopeRoof;
    // [ default ] interface IComSlopeRoof
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("bb921f1c-507a-40d9-94c8-92fff17630da"))
ComSpace;
    // [ default ] interface IComSpace
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("979339e8-08ce-4b97-b2ad-357ec2ef99bd"))
ComStep;
    // [ default ] interface IComStep
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("91682e97-8826-4325-b491-6be38248ab87"))
ComVertSlab;
    // [ default ] interface IComVertSlab
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("675b056d-c6f4-4602-a143-9601c0585eb8"))
ComWall;
    // [ default ] interface IComWall
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("d2705920-3abc-4ae2-b32c-fadea93213fa"))
ComWallPatch;
    // [ default ] interface IComWallPatch
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("9191a829-2d4a-4946-a808-44a28a281f48"))
ComLineText;
    // [ default ] interface IComLineText
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("f855bc76-c34c-4779-af48-241f41de20c2"))
ComMutiText;
    // [ default ] interface IComMutiText
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("e8c82c9b-577f-4a98-956a-eef68b5e4a90"))
ComSymbComposing;
    // [ default ] interface IComSymbComposing
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("6e96b2fe-179a-4410-b0d1-908234ebedc4"))
ComSymbArrow;
    // [ default ] interface IComSymbArrow
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7dfd165c-22f5-4e82-b821-cd0d97c9e4af"))
ComSymbDrawingIndex;
    // [ default ] interface IComSymbDrawingIndex
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("ae1b5ecd-80a2-47ba-b06f-904111e09fbd"))
ComSymbInSight;
    // [ default ] interface IComSymbInSight
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7cc7a93f-e8c8-44cd-a1ec-d71c74f44745"))
ComSymbMultiLeader;
    // [ default ] interface IComSymbMultiLeader
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("e64f5c5c-e8f4-4308-a9b7-0f93f988bf9a"))
ComSymbElev;
    // [ default ] interface IComSymbElev
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("51d0df8f-6a85-4834-9946-4c9d402613c2"))
ComSymbIndex;
    // [ default ] interface IComSymbIndex
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("045d5d90-ed33-459c-88e6-596b77d071c4"))
ComSymbSection;
    // [ default ] interface IComSymbSection
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("155f7cc5-0af9-4e24-bea8-5725d9822167"))
ComSymbNorthThumb;
    // [ default ] interface IComSymbNorthThumb
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("f563391b-006d-402b-9292-1487e6f2f163"))
ComDimension;
    // [ default ] interface IComDimension
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("08de235e-a771-4e66-8457-5e69fa034b17"))
ComRadiusDim;
    // [ default ] interface IComRadiusDim
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("00d67438-cdad-4442-9b72-76991ea7270b"))
ComAxisLabel;
    // [ default ] interface IComAxisLabel
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("1a4f3773-1f94-47ef-8b16-3b1e829a6604"))
ComSymbRupture;
    // [ default ] interface IComSymbRupture

struct __declspec(uuid("38364069-30db-4e60-90d8-397fc8f530ea"))
ComSymbCoord;
    // [ default ] interface IComSymbCoord

struct __declspec(uuid("1fc32ef8-7543-4a9e-ae17-e8d2fc6cf88a"))
ComSheet;
    // [ default ] interface IComSheet

struct __declspec(uuid("d2736c13-c4c0-4322-aff1-9e2a6b2a7d3a"))
ComCurtainWall;
    // [ default ] interface IComCurtainWall
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("1879e03d-e8d2-49d7-a786-75af7225cbda"))
ComMultiStair;
    // [ default ] interface IComMultiStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("a4145a88-794c-47dd-9f86-7caf57f5f344"))
ComCornerWin;
    // [ default ] interface IComCornerWin
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("e9d399ac-8de0-41a4-8867-091b3ddc0f14"))
ComRect;
    // [ default ] interface IComRect
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("6d4575a9-1639-475c-bfd7-5ff58738b0aa"))
ComSlope;
    // [ default ] interface IComSlope
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("043c3d93-f438-4442-b020-c18e1d488e6c"))
ComPolyMesh;
    // [ default ] interface IComPolyMesh
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("abc2fad8-82bc-4ebc-96fe-9085784b72dd"))
ComOpeningSlot;
    // [ default ] interface IComOpeningSlot
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("04bf9bff-eb35-4e78-891f-bfef22c8cf87"))
ComDormer;
    // [ default ] interface IComDormer
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("fa07375e-a3f3-4198-af9d-5055e7814c43"))
ComNetShelf;
    // [ default ] interface IComNetShelf
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("b50f51df-ccc2-4c05-b4fc-e962d6a34da3"))
ComMultiViewInsert;
    // [ default ] interface IComMultiViewInsert
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("2a4fe2bb-6931-4724-8a07-909d3d723dac"))
ComPromptMark;
    // [ default ] interface IComPromptMark
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("f3941bcf-211e-4b5f-9cf0-3ec136f9918b"))
ComDrawingName;
    // [ default ] interface IComDrawingName
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("dd19d803-e6ea-4f84-a442-2d2efc4cfa23"))
ComCurveMesh2;
    // [ default ] interface IComCurveMesh2
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("1755cc8f-3a53-45a1-8b74-077a07f680fd"))
ComPolyMesh2;
    // [ default ] interface IComPolyMesh2
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("618aca65-6455-45e3-9af4-7ddd14a377de"))
ComCuspRoof;
    // [ default ] interface IComCuspRoof
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("669b1786-5eba-4d24-a296-ae113f57c43c"))
ComDualSlopeRoof;
    // [ default ] interface IComDualSlopeRoof
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("98b2b2b9-2e86-4981-9143-197749e47f20"))
ComSymbCut;
    // [ default ] interface IComSymbCut
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("1ef2369e-e50d-45f4-a6a5-12c3fe5d63f4"))
ComPolyPathArray;
    // [ default ] interface IComPolyPathArray
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7bea9e97-4728-434a-873d-03aebca15494"))
ComCrossStair;
    // [ default ] interface IComCrossStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("b901b03e-902a-402e-a886-41e11802f0c9"))
ComParallelStair;
    // [ default ] interface IComParallelStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("dd4f3e73-db6c-4573-9d02-693e2bc4cb29"))
ComScissorsStair;
    // [ default ] interface IComScissorsStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("c5ce7c3b-79fa-4e64-879c-ccdb76483e1e"))
ComCornerStair;
    // [ default ] interface IComCornerStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("95267ba6-04cc-4925-9a4c-86302b819710"))
ComDoubleMulStair;
    // [ default ] interface IComDoubleMulStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("bf7b90f1-cd89-437f-8cb0-29f3fa086340"))
ComTriangleStair;
    // [ default ] interface IComTriangleStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("465a1ddf-1f2a-4dff-9c00-566909d72a3a"))
ComRectCornerStair;
    // [ default ] interface IComRectCornerStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("0d8d489b-73d5-4267-a3ba-bb851170bc70"))
ComAutoStair;
    // [ default ] interface IComAutoStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("3dc42305-2102-486a-ae3b-27f403d46fe1"))
ComApron;
    // [ default ] interface IComApron

struct __declspec(uuid("529cd261-897d-420f-bfc8-95f17620bef5"))
ComMountRoof;
    // [ default ] interface IComMountRoof
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("16f9132f-cbde-46a4-ac81-8d23c6a30cfe"))
ComFloorRect;
    // [ default ] interface IComFloorRect

struct __declspec(uuid("f940e9de-de8e-4cc8-9990-85fae82b9b62"))
SectionEntity;
    // [ default ] interface ISectionEntity

struct __declspec(uuid("c17cf49e-408d-46cf-93e6-19705db788b7"))
ComSymbModi;
    // [ default ] interface IComSymbModi

struct __declspec(uuid("e4635d83-547d-4cf2-985c-d829fbf209b4"))
ComStruBeam;
    // [ default ] interface IComStruBeam
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("5413b400-49fd-49fa-8dc1-ccc72a5048db"))
ComStruFloorSlab;
    // [ default ] interface IComStruFloorSlab
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("20054e80-9cb7-4f1b-ac5b-aa02294eac96"))
ComStruSlabHole;
    // [ default ] interface IComStruSlabHole
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("afea3784-46f7-4132-bce2-0583de2802a4"))
ComStruNodePoint;
    // [ default ] interface IComStruNodePoint
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("8fdb1edd-94b8-4b5d-8c58-6b9106d435d2"))
ComStruBarBase;
    // [ default ] interface IComStruBarBase
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("b662916f-f0cc-4dac-885d-ea7591bcbaf6"))
ComStruSelfBase;
    // [ default ] interface IComStruSelfBase
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("171c9961-7d67-4c11-8491-30adf69afb60"))
ComStruReinBar;
    // [ default ] interface IComStruReinBar
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("b849ba35-7dd6-462b-9d03-b19fed1341c4"))
ComStruSymbFocus;
    // [ default ] interface IComStruSymbFocus
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("9c7e1f1d-88b3-4286-894c-8a00f29ad271"))
ComStruSymbInsitu;
    // [ default ] interface IComStruSymbInsitu
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("4e2ffb54-96d6-4049-88c2-843679d13a6d"))
ComStruHanger;
    // [ default ] interface IComStruHanger
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("1956f793-eaa1-4bcb-aea4-b74b50e070ed"))
ComStruStirrup;
    // [ default ] interface IComStruStirrup
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("05f1e223-8cb3-4e1c-b7c5-c085a7a12569"))
ComStruPlainNumber;
    // [ default ] interface IComStruPlainNumber
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("ea143822-5d19-4178-b9e6-0b2efaace531"))
ComStruSectStair;
    // [ default ] interface IComStruSectStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("9cfb7714-b0cf-4486-8c03-a8e69b7fd268"))
ComReinIndexDim;
    // [ default ] interface IComReinIndexDim
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("0302a613-047b-4ab2-9f56-97344eb0ee09"))
ComStruWColuSect;
    // [ default ] interface IComStruWColuSect
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("ae83cbae-939a-43a8-8b82-dff52f741faf"))
ComFireZone;
    // [ default ] interface IComFireZone
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("b661cb1d-ba5f-4538-9693-dbed15436ff0"))
ComEvacPath;
    // [ default ] interface IComEvacPath
    // [ default, source ] interface IAcadObjectEvents

//
// Wrapper method implementations
//

#include "T20V5X64_tch10_com21.tli"

} // namespace COMKERNALLib

#pragma pack(pop)
