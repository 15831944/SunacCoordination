// Created by Microsoft (R) C/C++ Compiler Version 10.00.30319.01 (dd0593ba).
//
// d:\temp\asdksquarewrapper_dg\square\x64\debug\tch10_com19.tlh
//
// C++ source equivalent of Win32 type library C:\Tangent\TArchT20V5\SYS19x64\Tch10_Com19.dll
// compiler-generated file created 03/18/20 at 17:58:27 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//  #import "C:\Program Files\Autodesk\Autodesk Sync\RealDwg\axdb19enu.tlb"
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace COMKERNALLib {

//
// Forward references and typedefs
//

struct __declspec(uuid("62d64041-adaa-4e25-b985-906354340c31"))
/* LIBID */ __COMKERNALLib;
struct __declspec(uuid("3ed1af23-b068-4004-aa2f-42236911220e"))
/* dual interface */ IComBalcony;
struct __declspec(uuid("cf2b7fd0-c48f-493a-91f6-cfe395a31dfe"))
/* dual interface */ IComStair;
struct __declspec(uuid("8581a529-5312-4b99-90fb-cb78bfe83e57"))
/* dual interface */ IComArcStair;
struct __declspec(uuid("6a457524-ed78-4358-9db5-f794ade8f46a"))
/* dual interface */ IComAscent;
struct __declspec(uuid("a8788f5b-d58b-4735-b3f4-5bccf44d3848"))
/* dual interface */ IComCamera;
struct __declspec(uuid("b3004554-4d0d-4da6-8653-d0bb254e0a00"))
/* dual interface */ IComColumn;
struct __declspec(uuid("70dced9e-b896-45de-b2e1-9ec53f9f339c"))
/* dual interface */ IComCurveMesh;
struct __declspec(uuid("d613ecbc-442b-4025-b8e6-83b666d200c6"))
/* dual interface */ IComCurveStair;
struct __declspec(uuid("86cb0c04-dbee-4dbe-97f3-f1d3c3ebc843"))
/* dual interface */ IComHandRail;
struct __declspec(uuid("f1a5182c-4c0e-407d-80f2-89b21a9670ff"))
/* dual interface */ IComLineStair;
struct __declspec(uuid("1b20a587-2e7f-490b-b212-d5b91aecb7d8"))
/* dual interface */ IComOpening;
struct __declspec(uuid("6ed20fd4-f3ff-4e1c-a027-e673a58f7711"))
/* dual interface */ IComRail;
struct __declspec(uuid("86835a93-3a25-4ca4-9d2b-3d9c05a237fb"))
/* dual interface */ IComRectStair;
struct __declspec(uuid("673efc21-d002-48bd-96ce-443e7e014e57"))
/* dual interface */ IComSlab;
struct __declspec(uuid("ccd63ffe-7b85-42e3-b7e2-3bc119350875"))
/* dual interface */ IComSlopeRoof;
struct __declspec(uuid("8ab8a5b5-98e4-4dfd-8f60-bb8de4be201c"))
/* dual interface */ IComSpace;
struct __declspec(uuid("f7f00b0a-c0fc-416b-8bed-8a1324f99b54"))
/* dual interface */ IComFireZone;
struct __declspec(uuid("b50d5349-54f7-4bd1-b4ca-7145fe537d94"))
/* dual interface */ IComStep;
struct __declspec(uuid("34e3eac4-310e-48db-a970-e1058274f9d1"))
/* dual interface */ IComVertSlab;
struct __declspec(uuid("77a339bf-9c6a-4448-b6eb-aa1546f68e48"))
/* dual interface */ IComWall;
struct __declspec(uuid("a4b9b237-beb0-42a6-8624-fb75355f9447"))
/* dual interface */ IComWallPatch;
struct __declspec(uuid("3d6eef57-8bd3-46a3-9ea3-f826516418d7"))
/* dual interface */ IComLineText;
struct __declspec(uuid("d2062bd5-4ec2-483c-95ca-55c799116b73"))
/* dual interface */ IComMutiText;
struct __declspec(uuid("cfbb18bc-0d07-42c8-8dd9-e24517d5ab32"))
/* dual interface */ IComSymbComposing;
struct __declspec(uuid("fe12f88d-bdd6-4edd-a71d-a80db49af3fd"))
/* dual interface */ IComSymbArrow;
struct __declspec(uuid("83ee843a-9d41-40e5-8a86-b663e0593968"))
/* dual interface */ IComSymbDrawingIndex;
struct __declspec(uuid("25b71fea-d33d-4820-a693-3865d3db95a5"))
/* dual interface */ IComSymbInSight;
struct __declspec(uuid("002adb32-754e-40cb-be5e-b1007b5a1165"))
/* dual interface */ IComSymbMultiLeader;
struct __declspec(uuid("15cafa98-68f1-4bfc-b1c7-c70f0baeb73d"))
/* dual interface */ IComSymbElev;
struct __declspec(uuid("093a4871-fd21-49ea-84f0-ef53cc07b436"))
/* dual interface */ IComSymbIndex;
struct __declspec(uuid("9bbb17f9-416d-4693-bbfc-d95ee442fb87"))
/* dual interface */ IComSymbSection;
struct __declspec(uuid("d1d890cf-7f16-4e62-a4e5-4a3d886770cb"))
/* dual interface */ IComSymbNorthThumb;
struct __declspec(uuid("8eb9ee4a-209f-4d83-a6b7-0ff7cb16fe7a"))
/* dual interface */ IComDimension;
struct __declspec(uuid("4769471b-2d93-4a0a-8544-120ea2486639"))
/* dual interface */ IComRadiusDim;
struct __declspec(uuid("7b8727e9-c4c1-497c-ae0c-1e6713bad8be"))
/* dual interface */ IComAxisLabel;
struct __declspec(uuid("04d6d56a-c520-4724-b072-682ed7b2ccf0"))
/* dual interface */ IComSymbRupture;
struct __declspec(uuid("9257d93e-ae48-46eb-b688-f0313b7b8b8d"))
/* dual interface */ IComSymbCoord;
struct __declspec(uuid("74e35b1f-fd4f-43af-955f-56b0aae53034"))
/* dual interface */ IComSheet;
struct __declspec(uuid("886e399d-d313-4abb-a279-1829060fadd1"))
/* dual interface */ IComCurtainWall;
struct __declspec(uuid("821234d3-dcf8-4a97-a903-9c36b0ab2369"))
/* dual interface */ IComMultiStair;
struct __declspec(uuid("29ae0924-65c9-4e65-a16e-50aa5ce56516"))
/* dual interface */ IComCornerWin;
struct __declspec(uuid("c56ec8ce-1684-4b5c-8b63-1b971dce7ab3"))
/* dual interface */ IComRect;
struct __declspec(uuid("01950805-7f41-4d9f-922c-9ad29a77e3ca"))
/* dual interface */ IComSlope;
struct __declspec(uuid("40a07245-c998-48bf-a505-9ae2342d2052"))
/* dual interface */ IComPolyMesh;
struct __declspec(uuid("62ba2829-cfce-4c88-b407-92a8c5b14ad3"))
/* dual interface */ IComOpeningSlot;
struct __declspec(uuid("a2bcd5e3-d6a9-4b98-b5b6-5bca83ed0d0b"))
/* dual interface */ IComDormer;
struct __declspec(uuid("e364c3ec-f193-40af-89da-6b03f23d7e4a"))
/* dual interface */ IComNetShelf;
struct __declspec(uuid("361fb678-fe35-4c13-9d78-aa2e36e4bf04"))
/* dual interface */ IComMultiViewInsert;
struct __declspec(uuid("2f281680-9e59-4b6c-af2a-3b6627a9c2e3"))
/* dual interface */ IComPromptMark;
struct __declspec(uuid("5f8f66a3-c1c7-4d60-b88d-3ffdab42c6c1"))
/* dual interface */ IComDrawingName;
struct __declspec(uuid("f3d67ec4-03a2-4d27-a2c6-395b5d8ae5f8"))
/* dual interface */ IComCurveMesh2;
struct __declspec(uuid("628c41c4-c7c3-4fca-8654-128e816aebe7"))
/* dual interface */ IComPolyMesh2;
struct __declspec(uuid("46788b45-748f-4121-963c-65b63bc6dcbc"))
/* dual interface */ IComCuspRoof;
struct __declspec(uuid("bb56a9b0-0930-4f6f-a3a2-c9e4421fb661"))
/* dual interface */ IComDualSlopeRoof;
struct __declspec(uuid("5fe00b87-1e21-412c-baf4-71c4dca10c50"))
/* dual interface */ IComSymbCut;
struct __declspec(uuid("210d9191-b54f-4b92-96fc-ddd28cdd1063"))
/* dual interface */ IComPolyPathArray;
struct __declspec(uuid("97280f90-a4a2-47a1-adba-04eed897c278"))
/* dual interface */ IComCrossStair;
struct __declspec(uuid("8fbe488c-2e08-4488-8bc3-2cf007d3a79d"))
/* dual interface */ IComParallelStair;
struct __declspec(uuid("dc4ec0de-159f-4be9-87c8-535d74b95727"))
/* dual interface */ IComScissorsStair;
struct __declspec(uuid("2b53a63a-b876-4853-9097-3729d177374f"))
/* dual interface */ IComCornerStair;
struct __declspec(uuid("c5685fd5-dc98-4b10-b941-0d7717443bd9"))
/* dual interface */ IComDoubleMulStair;
struct __declspec(uuid("2d1f9e13-c377-44c1-862f-5d0f69396c3d"))
/* dual interface */ IComTriangleStair;
struct __declspec(uuid("f9bcd5c3-cc5e-4347-88a0-659d9b6d44ca"))
/* dual interface */ IComRectCornerStair;
struct __declspec(uuid("ce06c17f-8708-41cc-9929-af992cfdb2cf"))
/* dual interface */ IComAutoStair;
struct __declspec(uuid("997d80ee-ad8c-49a7-b1bc-b74ebc9cb301"))
/* dual interface */ IComApron;
struct __declspec(uuid("a3006176-2854-4d81-8b3a-c270cc2e4481"))
/* dual interface */ IComMountRoof;
struct __declspec(uuid("4fc3ebe8-ab1a-46c6-9d25-b36c545fb523"))
/* dual interface */ IComFloorRect;
struct __declspec(uuid("3a6623d9-b45d-4321-932b-df6e152663c9"))
/* dual interface */ ISectionEntity;
struct __declspec(uuid("1d25cb1b-5d40-4082-9a7a-66f7405929b0"))
/* dual interface */ IComSymbModi;
struct __declspec(uuid("cf4ab7d2-6328-48b7-a343-a0c1096dbbe8"))
/* dual interface */ IComStruBeam;
struct __declspec(uuid("66695cc2-cc7a-43c7-a848-6860aeb5959f"))
/* dual interface */ IComStruFloorSlab;
struct __declspec(uuid("8963b76d-d5b6-4457-a82f-2b217fb860bc"))
/* dual interface */ IComStruSlabHole;
struct __declspec(uuid("78117ec9-7303-46b2-aaa6-0b70983fb669"))
/* dual interface */ IComStruNodePoint;
struct __declspec(uuid("ec4cb6f4-095e-45a7-a8ec-a15f4f97b026"))
/* dual interface */ IComStruBarBase;
struct __declspec(uuid("9a8403aa-5b3d-4ec9-ae66-2663877bd769"))
/* dual interface */ IComStruSelfBase;
struct __declspec(uuid("329c5d06-485d-40c3-8ae2-5c45de2051df"))
/* dual interface */ IComStruReinBar;
struct __declspec(uuid("67582dcc-8868-4530-90f6-b8aa6385a802"))
/* dual interface */ IComStruSymbFocus;
struct __declspec(uuid("0a7a9793-29b1-498e-aa9d-d0792ab6cdb9"))
/* dual interface */ IComStruSymbInsitu;
struct __declspec(uuid("1ec9b26f-4977-4d0e-a478-353e4fb0175a"))
/* dual interface */ IComStruHanger;
struct __declspec(uuid("35c62810-171f-449b-9ebd-548c7eae6cdd"))
/* dual interface */ IComStruStirrup;
struct __declspec(uuid("ae66e531-7e9f-435d-a8a2-579b9b787dcf"))
/* dual interface */ IComStruPlainNumber;
struct __declspec(uuid("1f6fed7b-89ca-41c7-8ae7-f399ffb36b7f"))
/* dual interface */ IComStruSectStair;
struct __declspec(uuid("ce971483-7bf9-41bf-ade0-292061cfa834"))
/* dual interface */ IComReinIndexDim;
struct __declspec(uuid("ebc3b66d-2c13-4a33-ab4d-aa02a4c984d4"))
/* dual interface */ IComStruWColuSect;
struct __declspec(uuid("b791686a-b67d-42d3-8265-1f4ec01ebb46"))
/* dual interface */ IComEvacPath;
struct /* coclass */ ComBalcony;
struct /* coclass */ ComStair;
struct /* coclass */ ComArcStair;
struct /* coclass */ ComAscent;
struct /* coclass */ ComCamera;
struct /* coclass */ ComColumn;
struct /* coclass */ ComCurveMesh;
struct /* coclass */ ComCurveStair;
struct /* coclass */ ComHandRail;
struct /* coclass */ ComLineStair;
struct /* coclass */ ComOpening;
struct /* coclass */ ComRail;
struct /* coclass */ ComRectStair;
struct /* coclass */ ComSlab;
struct /* coclass */ ComSlopeRoof;
struct /* coclass */ ComSpace;
struct /* coclass */ ComStep;
struct /* coclass */ ComVertSlab;
struct /* coclass */ ComWall;
struct /* coclass */ ComWallPatch;
struct /* coclass */ ComLineText;
struct /* coclass */ ComMutiText;
struct /* coclass */ ComSymbComposing;
struct /* coclass */ ComSymbArrow;
struct /* coclass */ ComSymbDrawingIndex;
struct /* coclass */ ComSymbInSight;
struct /* coclass */ ComSymbMultiLeader;
struct /* coclass */ ComSymbElev;
struct /* coclass */ ComSymbIndex;
struct /* coclass */ ComSymbSection;
struct /* coclass */ ComSymbNorthThumb;
struct /* coclass */ ComDimension;
struct /* coclass */ ComRadiusDim;
struct /* coclass */ ComAxisLabel;
struct /* coclass */ ComSymbRupture;
struct /* coclass */ ComSymbCoord;
struct /* coclass */ ComSheet;
struct /* coclass */ ComCurtainWall;
struct /* coclass */ ComMultiStair;
struct /* coclass */ ComCornerWin;
struct /* coclass */ ComRect;
struct /* coclass */ ComSlope;
struct /* coclass */ ComPolyMesh;
struct /* coclass */ ComOpeningSlot;
struct /* coclass */ ComDormer;
struct /* coclass */ ComNetShelf;
struct /* coclass */ ComMultiViewInsert;
struct /* coclass */ ComPromptMark;
struct /* coclass */ ComDrawingName;
struct /* coclass */ ComCurveMesh2;
struct /* coclass */ ComPolyMesh2;
struct /* coclass */ ComCuspRoof;
struct /* coclass */ ComDualSlopeRoof;
struct /* coclass */ ComSymbCut;
struct /* coclass */ ComPolyPathArray;
struct /* coclass */ ComCrossStair;
struct /* coclass */ ComParallelStair;
struct /* coclass */ ComScissorsStair;
struct /* coclass */ ComCornerStair;
struct /* coclass */ ComDoubleMulStair;
struct /* coclass */ ComTriangleStair;
struct /* coclass */ ComRectCornerStair;
struct /* coclass */ ComAutoStair;
struct /* coclass */ ComApron;
struct /* coclass */ ComMountRoof;
struct /* coclass */ ComFloorRect;
struct /* coclass */ SectionEntity;
struct /* coclass */ ComSymbModi;
struct /* coclass */ ComStruBeam;
struct /* coclass */ ComStruFloorSlab;
struct /* coclass */ ComStruSlabHole;
struct /* coclass */ ComStruNodePoint;
struct /* coclass */ ComStruBarBase;
struct /* coclass */ ComStruSelfBase;
struct /* coclass */ ComStruReinBar;
struct /* coclass */ ComStruSymbFocus;
struct /* coclass */ ComStruSymbInsitu;
struct /* coclass */ ComStruHanger;
struct /* coclass */ ComStruStirrup;
struct /* coclass */ ComStruPlainNumber;
struct /* coclass */ ComStruSectStair;
struct /* coclass */ ComReinIndexDim;
struct /* coclass */ ComStruWColuSect;
struct /* coclass */ ComFireZone;
struct /* coclass */ ComEvacPath;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IComBalcony, __uuidof(IComBalcony));
_COM_SMARTPTR_TYPEDEF(IComStair, __uuidof(IComStair));
_COM_SMARTPTR_TYPEDEF(IComArcStair, __uuidof(IComArcStair));
_COM_SMARTPTR_TYPEDEF(IComAscent, __uuidof(IComAscent));
_COM_SMARTPTR_TYPEDEF(IComCamera, __uuidof(IComCamera));
_COM_SMARTPTR_TYPEDEF(IComColumn, __uuidof(IComColumn));
_COM_SMARTPTR_TYPEDEF(IComCurveMesh, __uuidof(IComCurveMesh));
_COM_SMARTPTR_TYPEDEF(IComCurveStair, __uuidof(IComCurveStair));
_COM_SMARTPTR_TYPEDEF(IComHandRail, __uuidof(IComHandRail));
_COM_SMARTPTR_TYPEDEF(IComLineStair, __uuidof(IComLineStair));
_COM_SMARTPTR_TYPEDEF(IComOpening, __uuidof(IComOpening));
_COM_SMARTPTR_TYPEDEF(IComRail, __uuidof(IComRail));
_COM_SMARTPTR_TYPEDEF(IComRectStair, __uuidof(IComRectStair));
_COM_SMARTPTR_TYPEDEF(IComSlab, __uuidof(IComSlab));
_COM_SMARTPTR_TYPEDEF(IComSlopeRoof, __uuidof(IComSlopeRoof));
_COM_SMARTPTR_TYPEDEF(IComSpace, __uuidof(IComSpace));
_COM_SMARTPTR_TYPEDEF(IComFireZone, __uuidof(IComFireZone));
_COM_SMARTPTR_TYPEDEF(IComStep, __uuidof(IComStep));
_COM_SMARTPTR_TYPEDEF(IComVertSlab, __uuidof(IComVertSlab));
_COM_SMARTPTR_TYPEDEF(IComWall, __uuidof(IComWall));
_COM_SMARTPTR_TYPEDEF(IComWallPatch, __uuidof(IComWallPatch));
_COM_SMARTPTR_TYPEDEF(IComLineText, __uuidof(IComLineText));
_COM_SMARTPTR_TYPEDEF(IComMutiText, __uuidof(IComMutiText));
_COM_SMARTPTR_TYPEDEF(IComSymbComposing, __uuidof(IComSymbComposing));
_COM_SMARTPTR_TYPEDEF(IComSymbArrow, __uuidof(IComSymbArrow));
_COM_SMARTPTR_TYPEDEF(IComSymbDrawingIndex, __uuidof(IComSymbDrawingIndex));
_COM_SMARTPTR_TYPEDEF(IComSymbInSight, __uuidof(IComSymbInSight));
_COM_SMARTPTR_TYPEDEF(IComSymbMultiLeader, __uuidof(IComSymbMultiLeader));
_COM_SMARTPTR_TYPEDEF(IComSymbElev, __uuidof(IComSymbElev));
_COM_SMARTPTR_TYPEDEF(IComSymbIndex, __uuidof(IComSymbIndex));
_COM_SMARTPTR_TYPEDEF(IComSymbSection, __uuidof(IComSymbSection));
_COM_SMARTPTR_TYPEDEF(IComSymbNorthThumb, __uuidof(IComSymbNorthThumb));
_COM_SMARTPTR_TYPEDEF(IComDimension, __uuidof(IComDimension));
_COM_SMARTPTR_TYPEDEF(IComRadiusDim, __uuidof(IComRadiusDim));
_COM_SMARTPTR_TYPEDEF(IComAxisLabel, __uuidof(IComAxisLabel));
_COM_SMARTPTR_TYPEDEF(IComSymbRupture, __uuidof(IComSymbRupture));
_COM_SMARTPTR_TYPEDEF(IComSymbCoord, __uuidof(IComSymbCoord));
_COM_SMARTPTR_TYPEDEF(IComSheet, __uuidof(IComSheet));
_COM_SMARTPTR_TYPEDEF(IComCurtainWall, __uuidof(IComCurtainWall));
_COM_SMARTPTR_TYPEDEF(IComMultiStair, __uuidof(IComMultiStair));
_COM_SMARTPTR_TYPEDEF(IComCornerWin, __uuidof(IComCornerWin));
_COM_SMARTPTR_TYPEDEF(IComRect, __uuidof(IComRect));
_COM_SMARTPTR_TYPEDEF(IComSlope, __uuidof(IComSlope));
_COM_SMARTPTR_TYPEDEF(IComPolyMesh, __uuidof(IComPolyMesh));
_COM_SMARTPTR_TYPEDEF(IComOpeningSlot, __uuidof(IComOpeningSlot));
_COM_SMARTPTR_TYPEDEF(IComDormer, __uuidof(IComDormer));
_COM_SMARTPTR_TYPEDEF(IComNetShelf, __uuidof(IComNetShelf));
_COM_SMARTPTR_TYPEDEF(IComMultiViewInsert, __uuidof(IComMultiViewInsert));
_COM_SMARTPTR_TYPEDEF(IComPromptMark, __uuidof(IComPromptMark));
_COM_SMARTPTR_TYPEDEF(IComDrawingName, __uuidof(IComDrawingName));
_COM_SMARTPTR_TYPEDEF(IComCurveMesh2, __uuidof(IComCurveMesh2));
_COM_SMARTPTR_TYPEDEF(IComPolyMesh2, __uuidof(IComPolyMesh2));
_COM_SMARTPTR_TYPEDEF(IComCuspRoof, __uuidof(IComCuspRoof));
_COM_SMARTPTR_TYPEDEF(IComDualSlopeRoof, __uuidof(IComDualSlopeRoof));
_COM_SMARTPTR_TYPEDEF(IComSymbCut, __uuidof(IComSymbCut));
_COM_SMARTPTR_TYPEDEF(IComPolyPathArray, __uuidof(IComPolyPathArray));
_COM_SMARTPTR_TYPEDEF(IComCrossStair, __uuidof(IComCrossStair));
_COM_SMARTPTR_TYPEDEF(IComParallelStair, __uuidof(IComParallelStair));
_COM_SMARTPTR_TYPEDEF(IComScissorsStair, __uuidof(IComScissorsStair));
_COM_SMARTPTR_TYPEDEF(IComCornerStair, __uuidof(IComCornerStair));
_COM_SMARTPTR_TYPEDEF(IComDoubleMulStair, __uuidof(IComDoubleMulStair));
_COM_SMARTPTR_TYPEDEF(IComTriangleStair, __uuidof(IComTriangleStair));
_COM_SMARTPTR_TYPEDEF(IComRectCornerStair, __uuidof(IComRectCornerStair));
_COM_SMARTPTR_TYPEDEF(IComAutoStair, __uuidof(IComAutoStair));
_COM_SMARTPTR_TYPEDEF(IComApron, __uuidof(IComApron));
_COM_SMARTPTR_TYPEDEF(IComMountRoof, __uuidof(IComMountRoof));
_COM_SMARTPTR_TYPEDEF(IComFloorRect, __uuidof(IComFloorRect));
_COM_SMARTPTR_TYPEDEF(ISectionEntity, __uuidof(ISectionEntity));
_COM_SMARTPTR_TYPEDEF(IComSymbModi, __uuidof(IComSymbModi));
_COM_SMARTPTR_TYPEDEF(IComStruBeam, __uuidof(IComStruBeam));
_COM_SMARTPTR_TYPEDEF(IComStruFloorSlab, __uuidof(IComStruFloorSlab));
_COM_SMARTPTR_TYPEDEF(IComStruSlabHole, __uuidof(IComStruSlabHole));
_COM_SMARTPTR_TYPEDEF(IComStruNodePoint, __uuidof(IComStruNodePoint));
_COM_SMARTPTR_TYPEDEF(IComStruBarBase, __uuidof(IComStruBarBase));
_COM_SMARTPTR_TYPEDEF(IComStruSelfBase, __uuidof(IComStruSelfBase));
_COM_SMARTPTR_TYPEDEF(IComStruReinBar, __uuidof(IComStruReinBar));
_COM_SMARTPTR_TYPEDEF(IComStruSymbFocus, __uuidof(IComStruSymbFocus));
_COM_SMARTPTR_TYPEDEF(IComStruSymbInsitu, __uuidof(IComStruSymbInsitu));
_COM_SMARTPTR_TYPEDEF(IComStruHanger, __uuidof(IComStruHanger));
_COM_SMARTPTR_TYPEDEF(IComStruStirrup, __uuidof(IComStruStirrup));
_COM_SMARTPTR_TYPEDEF(IComStruPlainNumber, __uuidof(IComStruPlainNumber));
_COM_SMARTPTR_TYPEDEF(IComStruSectStair, __uuidof(IComStruSectStair));
_COM_SMARTPTR_TYPEDEF(IComReinIndexDim, __uuidof(IComReinIndexDim));
_COM_SMARTPTR_TYPEDEF(IComStruWColuSect, __uuidof(IComStruWColuSect));
_COM_SMARTPTR_TYPEDEF(IComEvacPath, __uuidof(IComEvacPath));

//
// Type library items
//

struct __declspec(uuid("3ed1af23-b068-4004-aa2f-42236911220e"))
IComBalcony : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailHeight,put=PutRailHeight))
    double RailHeight;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetGirderThickness,put=PutGirderThickness))
    double GirderThickness;
    __declspec(property(get=GetHasGirder,put=PutHasGirder))
    _bstr_t HasGirder;
    __declspec(property(get=GetGroundLayer,put=PutGroundLayer))
    ACAD_LAYER GroundLayer;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetRailClipInsu,put=PutRailClipInsu))
    _bstr_t RailClipInsu;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailHeight ( );
    void PutRailHeight (
        double pVal );
    _bstr_t GetRailClipInsu ( );
    void PutRailClipInsu (
        _bstr_t pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    double GetGirderThickness ( );
    void PutGirderThickness (
        double pVal );
    _bstr_t GetHasGirder ( );
    void PutHasGirder (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    ACAD_LAYER GetGroundLayer ( );
    void PutGroundLayer (
        ACAD_LAYER pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailClipInsu (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailClipInsu (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_GirderThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GirderThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasGirder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasGirder (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_GroundLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_GroundLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("cf2b7fd0-c48f-493a-91f6-cfe395a31dfe"))
IComStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("8581a529-5312-4b99-90fb-cb78bfe83e57"))
IComArcStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStepNum,put=PutStepNum))
    long StepNum;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetHasLBeam,put=PutHasLBeam))
    _bstr_t HasLBeam;
    __declspec(property(get=GetHasRBeam,put=PutHasRBeam))
    _bstr_t HasRBeam;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetPaoType,put=PutPaoType))
    _bstr_t PaoType;
    __declspec(property(get=GetRadiusIn,put=PutRadiusIn))
    double RadiusIn;
    __declspec(property(get=GetRadiusOut,put=PutRadiusOut))
    double RadiusOut;
    __declspec(property(get=GetElev,put=PutElev))
    double Elev;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    double StartAngle;
    __declspec(property(get=GetSweepAngle,put=PutSweepAngle))
    double SweepAngle;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetAsAscent,put=PutAsAscent))
    _bstr_t AsAscent;
    __declspec(property(get=GetHasAscentSlab,put=PutHasAscentSlab))
    _bstr_t HasAscentSlab;
    __declspec(property(get=GetOnGround,put=PutOnGround))
    _bstr_t OnGround;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetAlongWall,put=PutAlongWall))
    _bstr_t AlongWall;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    double GetElev ( );
    void PutElev (
        double pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetRadiusIn ( );
    void PutRadiusIn (
        double pVal );
    double GetRadiusOut ( );
    void PutRadiusOut (
        double pVal );
    double GetStartAngle ( );
    void PutStartAngle (
        double pVal );
    double GetSweepAngle ( );
    void PutSweepAngle (
        double pVal );
    long GetStepNum ( );
    void PutStepNum (
        long pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    _bstr_t GetHasLBeam ( );
    void PutHasLBeam (
        _bstr_t pVal );
    _bstr_t GetHasRBeam ( );
    void PutHasRBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetAsAscent ( );
    void PutAsAscent (
        _bstr_t pVal );
    _bstr_t GetHasAscentSlab ( );
    void PutHasAscentSlab (
        _bstr_t pVal );
    _bstr_t GetOnGround ( );
    void PutOnGround (
        _bstr_t pVal );
    _bstr_t GetPaoType ( );
    void PutPaoType (
        _bstr_t pVal );
    _bstr_t GetAlongWall ( );
    void PutAlongWall (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Elev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RadiusIn (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RadiusIn (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RadiusOut (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RadiusOut (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SweepAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SweepAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasLBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasLBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasRBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AsAscent (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AsAscent (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasAscentSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasAscentSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OnGround (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OnGround (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PaoType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PaoType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AlongWall (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlongWall (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("6a457524-ed78-4358-9db5-f794ade8f46a"))
IComAscent : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetHasSlant,put=PutHasSlant))
    _bstr_t HasSlant;
    __declspec(property(get=GetAlignment_Right,put=PutAlignment_Right))
    _bstr_t Alignment_Right;
    __declspec(property(get=GetAlignment_Left,put=PutAlignment_Left))
    _bstr_t Alignment_Left;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetIndent,put=PutIndent))
    double Indent;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    _bstr_t GetHasSlant ( );
    void PutHasSlant (
        _bstr_t pVal );
    _bstr_t GetAlignment_Right ( );
    void PutAlignment_Right (
        _bstr_t pVal );
    _bstr_t GetAlignment_Left ( );
    void PutAlignment_Left (
        _bstr_t pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    double GetLength ( );
    void PutLength (
        double pVal );
    double GetIndent ( );
    void PutIndent (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlant (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlant (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment_Right (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment_Right (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment_Left (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment_Left (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Indent (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Indent (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("a8788f5b-d58b-4735-b3f4-5bccf44d3848"))
IComCamera : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCameraElev,put=PutCameraElev))
    double CameraElev;
    __declspec(property(get=GetTargetElev,put=PutTargetElev))
    double TargetElev;
    __declspec(property(get=GetLens,put=PutLens))
    double Lens;
    __declspec(property(get=GetPerspective,put=PutPerspective))
    _bstr_t Perspective;
    __declspec(property(get=GetActive,put=PutActive))
    _bstr_t Active;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    double Longitude;
    __declspec(property(get=GetLatitude,put=PutLatitude))
    double Latitude;
    __declspec(property(get=GetFrontClipOn,put=PutFrontClipOn))
    _bstr_t FrontClipOn;
    __declspec(property(get=GetBackClipOn,put=PutBackClipOn))
    _bstr_t BackClipOn;
    __declspec(property(get=GetFrontClipAtEye,put=PutFrontClipAtEye))
    _bstr_t FrontClipAtEye;
    __declspec(property(get=GetFrontClipDist,put=PutFrontClipDist))
    double FrontClipDist;
    __declspec(property(get=GetBackClipDist,put=PutBackClipDist))
    double BackClipDist;
    __declspec(property(get=GetCameraType))
    _bstr_t CameraType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetCameraElev ( );
    void PutCameraElev (
        double pVal );
    double GetTargetElev ( );
    void PutTargetElev (
        double pVal );
    double GetLens ( );
    void PutLens (
        double pVal );
    _bstr_t GetPerspective ( );
    void PutPerspective (
        _bstr_t pVal );
    _bstr_t GetActive ( );
    void PutActive (
        _bstr_t pVal );
    double GetLongitude ( );
    void PutLongitude (
        double pVal );
    double GetLatitude ( );
    void PutLatitude (
        double pVal );
    _bstr_t GetFrontClipOn ( );
    void PutFrontClipOn (
        _bstr_t pVal );
    _bstr_t GetBackClipOn ( );
    void PutBackClipOn (
        _bstr_t pVal );
    _bstr_t GetFrontClipAtEye ( );
    void PutFrontClipAtEye (
        _bstr_t pVal );
    double GetFrontClipDist ( );
    void PutFrontClipDist (
        double pVal );
    double GetBackClipDist ( );
    void PutBackClipDist (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetCameraType ( );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CameraElev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CameraElev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TargetElev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TargetElev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lens (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lens (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Perspective (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FrontClipOn (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FrontClipOn (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BackClipOn (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BackClipOn (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FrontClipAtEye (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FrontClipAtEye (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FrontClipDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FrontClipDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BackClipDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BackClipDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CameraType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b3004554-4d0d-4da6-8653-d0bb254e0a00"))
IComColumn : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetType,put=PutType))
    _bstr_t Type;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetDeep,put=PutDeep))
    double Deep;
    __declspec(property(get=GetDiameter,put=PutDiameter))
    double Diameter;
    __declspec(property(get=GetSideLength,put=PutSideLength))
    double SideLength;
    __declspec(property(get=GetSectionArea))
    _bstr_t SectionArea;
    __declspec(property(get=GetSectionPerimeter))
    _bstr_t SectionPerimeter;
    __declspec(property(get=GetSideArea))
    _bstr_t SideArea;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetSectionShapeText,put=PutSectionShapeText))
    _bstr_t SectionShapeText;
    __declspec(property(get=GetStyle,put=PutStyle))
    _bstr_t Style;
    __declspec(property(get=GetTopFace,put=PutTopFace))
    _bstr_t TopFace;
    __declspec(property(get=GetBottomFace,put=PutBottomFace))
    _bstr_t BottomFace;
    __declspec(property(get=GetHatchLayer,put=PutHatchLayer))
    ACAD_LAYER HatchLayer;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetInsulate,put=PutInsulate))
    _bstr_t Insulate;
    __declspec(property(get=GetInsulateThick,put=PutInsulateThick))
    double InsulateThick;
    __declspec(property(get=GetInsulateLayer,put=PutInsulateLayer))
    ACAD_LAYER InsulateLayer;
    __declspec(property(get=GetColumnNumber,put=PutColumnNumber))
    _bstr_t ColumnNumber;
    __declspec(property(get=GetColumnIsHatch,put=PutColumnIsHatch))
    _bstr_t ColumnIsHatch;
    __declspec(property(get=GetColumnIsOverThick,put=PutColumnIsOverThick))
    _bstr_t ColumnIsOverThick;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetColumnWidthB,put=PutColumnWidthB))
    double ColumnWidthB;
    __declspec(property(get=GetColumnHeightH,put=PutColumnHeightH))
    double ColumnHeightH;
    __declspec(property(get=GetColumnThicknessB,put=PutColumnThicknessB))
    double ColumnThicknessB;
    __declspec(property(get=GetColumnSumH,put=PutColumnSumH))
    double ColumnSumH;
    __declspec(property(get=GetColumnWidthU,put=PutColumnWidthU))
    double ColumnWidthU;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetColumnThicknessT,put=PutColumnThicknessT))
    double ColumnThicknessT;
    __declspec(property(get=GetColumnWidthD,put=PutColumnWidthD))
    double ColumnWidthD;
    __declspec(property(get=GetColumnThicknessF,put=PutColumnThicknessF))
    double ColumnThicknessF;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetHideLabel,put=PutHideLabel))
    _bstr_t HideLabel;
    __declspec(property(get=GetStruElevation,put=PutStruElevation))
    double StruElevation;
    __declspec(property(get=GetStruHeight,put=PutStruHeight))
    double StruHeight;
    __declspec(property(get=GetStruDiameter,put=PutStruDiameter))
    double StruDiameter;
    __declspec(property(get=GetStruSectionShapeText,put=PutStruSectionShapeText))
    _bstr_t StruSectionShapeText;
    __declspec(property(get=GetStruStyle,put=PutStruStyle))
    _bstr_t StruStyle;
    __declspec(property(get=GetStruHatchLayer,put=PutStruHatchLayer))
    ACAD_LAYER StruHatchLayer;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    double GetRotation ( );
    void PutRotation (
        double pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetDeep ( );
    void PutDeep (
        double pVal );
    double GetDiameter ( );
    void PutDiameter (
        double pVal );
    double GetSideLength ( );
    void PutSideLength (
        double pVal );
    _bstr_t GetSectionArea ( );
    _bstr_t GetSectionPerimeter ( );
    _bstr_t GetSideArea ( );
    _bstr_t GetVolume ( );
    _bstr_t GetSectionShapeText ( );
    void PutSectionShapeText (
        _bstr_t pVal );
    _bstr_t GetStruSectionShapeText ( );
    void PutStruSectionShapeText (
        _bstr_t pVal );
    double GetStruDiameter ( );
    void PutStruDiameter (
        double pVal );
    _bstr_t GetTopFace ( );
    void PutTopFace (
        _bstr_t pVal );
    _bstr_t GetBottomFace ( );
    void PutBottomFace (
        _bstr_t pVal );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetHideLabel ( );
    void PutHideLabel (
        _bstr_t pVal );
    ACAD_LAYER GetHatchLayer ( );
    void PutHatchLayer (
        ACAD_LAYER pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetType ( );
    void PutType (
        _bstr_t pVal );
    _bstr_t GetStyle ( );
    void PutStyle (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetInsulate ( );
    void PutInsulate (
        _bstr_t pVal );
    double GetInsulateThick ( );
    void PutInsulateThick (
        double pVal );
    ACAD_LAYER GetInsulateLayer ( );
    void PutInsulateLayer (
        ACAD_LAYER pVal );
    _bstr_t GetColumnNumber ( );
    void PutColumnNumber (
        _bstr_t pVal );
    _bstr_t GetColumnIsHatch ( );
    void PutColumnIsHatch (
        _bstr_t pVal );
    _bstr_t GetColumnIsOverThick ( );
    void PutColumnIsOverThick (
        _bstr_t pVal );
    double GetColumnWidthB ( );
    void PutColumnWidthB (
        double pVal );
    double GetColumnHeightH ( );
    void PutColumnHeightH (
        double pVal );
    double GetColumnThicknessB ( );
    void PutColumnThicknessB (
        double pVal );
    double GetColumnSumH ( );
    void PutColumnSumH (
        double pVal );
    double GetColumnWidthU ( );
    void PutColumnWidthU (
        double pVal );
    double GetColumnThicknessT ( );
    void PutColumnThicknessT (
        double pVal );
    double GetColumnWidthD ( );
    void PutColumnWidthD (
        double pVal );
    double GetColumnThicknessF ( );
    void PutColumnThicknessF (
        double pVal );
    double GetStruElevation ( );
    void PutStruElevation (
        double pVal );
    double GetStruHeight ( );
    void PutStruHeight (
        double pVal );
    _bstr_t GetStruStyle ( );
    void PutStruStyle (
        _bstr_t pVal );
    ACAD_LAYER GetStruHatchLayer ( );
    void PutStruHatchLayer (
        ACAD_LAYER pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Deep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Deep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Diameter (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Diameter (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SideLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SideLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SectionArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SectionPerimeter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SideArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SectionShapeText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SectionShapeText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StruSectionShapeText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StruSectionShapeText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StruDiameter (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StruDiameter (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TopFace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TopFace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BottomFace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BottomFace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HideLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HideLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Insulate (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Insulate (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_InsulateThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_InsulateThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InsulateLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_InsulateLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnNumber (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnIsHatch (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnIsHatch (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnIsOverThick (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnIsOverThick (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnWidthB (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnWidthB (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnHeightH (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnHeightH (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnThicknessB (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnThicknessB (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnSumH (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnSumH (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnWidthU (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnWidthU (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnThicknessT (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnThicknessT (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnWidthD (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnWidthD (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnThicknessF (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnThicknessF (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StruElevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StruElevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StruHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StruHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StruStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StruStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StruHatchLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StruHatchLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
};

struct __declspec(uuid("70dced9e-b896-45de-b2e1-9ec53f9f339c"))
IComCurveMesh : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetShapeVisibility,put=PutShapeVisibility))
    _bstr_t ShapeVisibility;
    __declspec(property(get=GetPathLength))
    _bstr_t PathLength;
    __declspec(property(get=GetSideArea))
    _bstr_t SideArea;
    __declspec(property(get=GetShapePerimeter))
    _bstr_t ShapePerimeter;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetVertex,put=PutVertex))
    _variant_t Vertex;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    _bstr_t GetPathLength ( );
    _bstr_t GetSideArea ( );
    _bstr_t GetShapePerimeter ( );
    _bstr_t GetVolume ( );
    _variant_t GetVertex ( );
    void PutVertex (
        const _variant_t & pVal );
    _bstr_t GetShapeVisibility ( );
    void PutShapeVisibility (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PathLength (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SideArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ShapePerimeter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Vertex (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Vertex (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ShapeVisibility (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShapeVisibility (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("d613ecbc-442b-4025-b8e6-83b666d200c6"))
IComCurveStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStepNum,put=PutStepNum))
    long StepNum;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetHasLBeam,put=PutHasLBeam))
    _bstr_t HasLBeam;
    __declspec(property(get=GetHasRBeam,put=PutHasRBeam))
    _bstr_t HasRBeam;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetPaoType,put=PutPaoType))
    _bstr_t PaoType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetAsAscent,put=PutAsAscent))
    _bstr_t AsAscent;
    __declspec(property(get=GetHasAscentSlab,put=PutHasAscentSlab))
    _bstr_t HasAscentSlab;
    __declspec(property(get=GetOnGround,put=PutOnGround))
    _bstr_t OnGround;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetAlongWall,put=PutAlongWall))
    _bstr_t AlongWall;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    long GetStepNum ( );
    void PutStepNum (
        long pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    _bstr_t GetHasLBeam ( );
    void PutHasLBeam (
        _bstr_t pVal );
    _bstr_t GetHasRBeam ( );
    void PutHasRBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    _bstr_t GetPaoType ( );
    void PutPaoType (
        _bstr_t pVal );
    _bstr_t GetAsAscent ( );
    void PutAsAscent (
        _bstr_t pVal );
    _bstr_t GetHasAscentSlab ( );
    void PutHasAscentSlab (
        _bstr_t pVal );
    _bstr_t GetOnGround ( );
    void PutOnGround (
        _bstr_t pVal );
    _bstr_t GetAlongWall ( );
    void PutAlongWall (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasLBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasLBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasRBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_PaoType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PaoType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AsAscent (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AsAscent (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasAscentSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasAscentSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OnGround (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OnGround (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AlongWall (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlongWall (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("86cb0c04-dbee-4dbe-97f3-f1d3c3ebc843"))
IComHandRail : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetShape,put=PutShape))
    _bstr_t Shape;
    __declspec(property(get=GetThickness,put=PutThickness))
    _bstr_t Thickness;
    __declspec(property(get=GetVertex,put=PutVertex))
    _variant_t Vertex;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    _bstr_t GetThickness ( );
    void PutThickness (
        _bstr_t pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    _variant_t GetVertex ( );
    void PutVertex (
        const _variant_t & pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    _bstr_t GetShape ( );
    void PutShape (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Vertex (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Vertex (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Shape (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("f1a5182c-4c0e-407d-80f2-89b21a9670ff"))
IComLineStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetStepNum,put=PutStepNum))
    long StepNum;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetHasLBeam,put=PutHasLBeam))
    _bstr_t HasLBeam;
    __declspec(property(get=GetHasRBeam,put=PutHasRBeam))
    _bstr_t HasRBeam;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetPaoType,put=PutPaoType))
    _bstr_t PaoType;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetStairWidth,put=PutStairWidth))
    double StairWidth;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetAsAscent,put=PutAsAscent))
    _bstr_t AsAscent;
    __declspec(property(get=GetHasAscentSlab,put=PutHasAscentSlab))
    _bstr_t HasAscentSlab;
    __declspec(property(get=GetOnGround,put=PutOnGround))
    _bstr_t OnGround;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetAlongWall,put=PutAlongWall))
    _bstr_t AlongWall;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetRotation ( );
    void PutRotation (
        double pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetStairWidth ( );
    void PutStairWidth (
        double pVal );
    long GetStepNum ( );
    void PutStepNum (
        long pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    _bstr_t GetHasLBeam ( );
    void PutHasLBeam (
        _bstr_t pVal );
    _bstr_t GetHasRBeam ( );
    void PutHasRBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    _bstr_t GetAsAscent ( );
    void PutAsAscent (
        _bstr_t pVal );
    _bstr_t GetHasAscentSlab ( );
    void PutHasAscentSlab (
        _bstr_t pVal );
    _bstr_t GetOnGround ( );
    void PutOnGround (
        _bstr_t pVal );
    _bstr_t GetAlongWall ( );
    void PutAlongWall (
        _bstr_t pVal );
    _bstr_t GetPaoType ( );
    void PutPaoType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasLBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasLBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasRBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_AsAscent (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AsAscent (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasAscentSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasAscentSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OnGround (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OnGround (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AlongWall (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlongWall (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PaoType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PaoType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("1b20a587-2e7f-490b-b212-d5b91aecb7d8"))
IComOpening : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetWinSill,put=PutWinSill))
    double WinSill;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetGetKind))
    _bstr_t GetKind;
    __declspec(property(get=GetOutlineArea))
    _bstr_t OutlineArea;
    __declspec(property(get=GetOutlineLength))
    double OutlineLength;
    __declspec(property(get=GetDoorSill,put=PutDoorSill))
    double DoorSill;
    __declspec(property(get=GetSlot,put=PutSlot))
    _bstr_t Slot;
    __declspec(property(get=GetSlotExt,put=PutSlotExt))
    double SlotExt;
    __declspec(property(get=GetSlotWidth,put=PutSlotWidth))
    double SlotWidth;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetUpLevel,put=PutUpLevel))
    _bstr_t UpLevel;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    double TextHeight;
    __declspec(property(get=GetDoorLine,put=PutDoorLine))
    short DoorLine;
    __declspec(property(get=GetHoleType,put=PutHoleType))
    _bstr_t HoleType;
    __declspec(property(get=GetStructure,put=PutStructure))
    _bstr_t Structure;
    __declspec(property(get=GetExtShading,put=PutExtShading))
    _bstr_t ExtShading;
    __declspec(property(get=GetAreaRatio))
    double AreaRatio;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetGlassLayer,put=PutGlassLayer))
    ACAD_LAYER GlassLayer;
    __declspec(property(get=GetFrameLayer,put=PutFrameLayer))
    ACAD_LAYER FrameLayer;
    __declspec(property(get=GetSlabLayer,put=PutSlabLayer))
    ACAD_LAYER SlabLayer;
    __declspec(property(get=GetUFrame,put=PutUFrame))
    double UFrame;
    __declspec(property(get=GetVFrame,put=PutVFrame))
    double VFrame;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetHideLabel,put=PutHideLabel))
    _bstr_t HideLabel;
    __declspec(property(get=GetSlotMaterial,put=PutSlotMaterial))
    _bstr_t SlotMaterial;
    __declspec(property(get=GetProStyle,put=PutProStyle))
    _bstr_t ProStyle;
    __declspec(property(get=GetLeftSlab,put=PutLeftSlab))
    _bstr_t LeftSlab;
    __declspec(property(get=GetRightSlab,put=PutRightSlab))
    _bstr_t RightSlab;
    __declspec(property(get=GetProWinSlabWidth,put=PutProWinSlabWidth))
    double ProWinSlabWidth;
    __declspec(property(get=GetSlotInsuThick,put=PutSlotInsuThick))
    double SlotInsuThick;
    __declspec(property(get=GetSlotInsuCap,put=PutSlotInsuCap))
    _bstr_t SlotInsuCap;
    __declspec(property(get=GetEvacuationType,put=PutEvacuationType))
    _bstr_t EvacuationType;
    __declspec(property(get=GetLineOffsetDist,put=PutLineOffsetDist))
    double LineOffsetDist;
    __declspec(property(get=GetProWinSlabInsuThick,put=PutProWinSlabInsuThick))
    double ProWinSlabInsuThick;
    __declspec(property(get=GetGetSubKind,put=PutGetSubKind))
    _bstr_t GetSubKind;
    __declspec(property(get=GetBayThick,put=PutBayThick))
    double BayThick;
    __declspec(property(get=GetHoleStyle,put=PutHoleStyle))
    _bstr_t HoleStyle;
    __declspec(property(get=GetConductivity))
    double Conductivity;
    __declspec(property(get=GetUsage,put=PutUsage))
    _bstr_t Usage;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetIsHigh,put=PutIsHigh))
    _bstr_t IsHigh;
    __declspec(property(get=GetStruWinSill,put=PutStruWinSill))
    double StruWinSill;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetHoleType ( );
    void PutHoleType (
        _bstr_t pVal );
    double GetWinSill ( );
    void PutWinSill (
        double pVal );
    double GetDoorSill ( );
    void PutDoorSill (
        double pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetStruWinSill ( );
    void PutStruWinSill (
        double pVal );
    double GetBayThick ( );
    void PutBayThick (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    double GetUFrame ( );
    void PutUFrame (
        double pVal );
    double GetVFrame ( );
    void PutVFrame (
        double pVal );
    _bstr_t GetOutlineArea ( );
    double GetOutlineLength ( );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pVal );
    double GetTextHeight ( );
    void PutTextHeight (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetHideLabel ( );
    void PutHideLabel (
        _bstr_t pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetGlassLayer ( );
    void PutGlassLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetFrameLayer ( );
    void PutFrameLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetSlabLayer ( );
    void PutSlabLayer (
        ACAD_LAYER pVal );
    _bstr_t GetProStyle ( );
    void PutProStyle (
        _bstr_t pVal );
    _bstr_t GetLeftSlab ( );
    void PutLeftSlab (
        _bstr_t pVal );
    _bstr_t GetRightSlab ( );
    void PutRightSlab (
        _bstr_t pVal );
    double GetProWinSlabWidth ( );
    void PutProWinSlabWidth (
        double pVal );
    double GetProWinSlabInsuThick ( );
    void PutProWinSlabInsuThick (
        double pVal );
    _bstr_t GetSlot ( );
    void PutSlot (
        _bstr_t pVal );
    _bstr_t GetSlotMaterial ( );
    void PutSlotMaterial (
        _bstr_t pVal );
    double GetSlotExt ( );
    void PutSlotExt (
        double pVal );
    double GetSlotWidth ( );
    void PutSlotWidth (
        double pVal );
    double GetSlotInsuThick ( );
    void PutSlotInsuThick (
        double pVal );
    _bstr_t GetSlotInsuCap ( );
    void PutSlotInsuCap (
        _bstr_t pVal );
    _bstr_t GetGetKind ( );
    _bstr_t GetGetSubKind ( );
    void PutGetSubKind (
        _bstr_t pVal );
    _bstr_t GetHoleStyle ( );
    void PutHoleStyle (
        _bstr_t pVal );
    _bstr_t GetEvacuationType ( );
    void PutEvacuationType (
        _bstr_t pVal );
    _bstr_t GetUpLevel ( );
    void PutUpLevel (
        _bstr_t pVal );
    short GetDoorLine ( );
    void PutDoorLine (
        short pVal );
    double GetLineOffsetDist ( );
    void PutLineOffsetDist (
        double pVal );
    _bstr_t GetStructure ( );
    void PutStructure (
        _bstr_t pVal );
    _bstr_t GetExtShading ( );
    void PutExtShading (
        _bstr_t pVal );
    double GetAreaRatio ( );
    double GetConductivity ( );
    _bstr_t GetUsage ( );
    void PutUsage (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetIsHigh ( );
    void PutIsHigh (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HoleType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HoleType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_WinSill (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WinSill (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DoorSill (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DoorSill (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StruWinSill (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StruWinSill (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BayThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BayThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UFrame (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_UFrame (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_VFrame (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VFrame (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OutlineArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_OutlineLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HideLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HideLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_GlassLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_GlassLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_FrameLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_FrameLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_SlabLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ProStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ProStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LeftSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ProWinSlabWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ProWinSlabWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ProWinSlabInsuThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ProWinSlabInsuThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Slot (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Slot (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlotMaterial (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SlotMaterial (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlotExt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlotExt (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlotWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlotWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlotInsuThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlotInsuThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlotInsuCap (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SlotInsuCap (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GetKind (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GetSubKind (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_GetSubKind (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HoleStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HoleStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EvacuationType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EvacuationType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpLevel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UpLevel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DoorLine (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_DoorLine (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_LineOffsetDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LineOffsetDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Structure (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Structure (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ExtShading (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ExtShading (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AreaRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Conductivity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Usage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Usage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsHigh (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsHigh (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("6ed20fd4-f3ff-4e1c-a027-e673a58f7711"))
IComRail : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetUnitWidth,put=PutUnitWidth))
    double UnitWidth;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetAutoExpand,put=PutAutoExpand))
    _bstr_t AutoExpand;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    double GetUnitWidth ( );
    void PutUnitWidth (
        double pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    _bstr_t GetAutoExpand ( );
    void PutAutoExpand (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UnitWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_UnitWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AutoExpand (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoExpand (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("86835a93-3a25-4ca4-9d2b-3d9c05a237fb"))
IComRectStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStepNum1,put=PutStepNum1))
    short StepNum1;
    __declspec(property(get=GetStepNum2,put=PutStepNum2))
    short StepNum2;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetStairWidth,put=PutStairWidth))
    double StairWidth;
    __declspec(property(get=GetSpaceWidth,put=PutSpaceWidth))
    double SpaceWidth;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetStruTextHeight,put=PutStruTextHeight))
    _bstr_t StruTextHeight;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailDistToSide,put=PutRailDistToSide))
    double RailDistToSide;
    __declspec(property(get=GetHasSlab,put=PutHasSlab))
    _bstr_t HasSlab;
    __declspec(property(get=GetSlabSize,put=PutSlabSize))
    double SlabSize;
    __declspec(property(get=GetAsAcsent,put=PutAsAcsent))
    _bstr_t AsAcsent;
    __declspec(property(get=GetHasAcsentSlab,put=PutHasAcsentSlab))
    _bstr_t HasAcsentSlab;
    __declspec(property(get=GetOnGround,put=PutOnGround))
    _bstr_t OnGround;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetPlatType,put=PutPlatType))
    _bstr_t PlatType;
    __declspec(property(get=GetLeftBeam,put=PutLeftBeam))
    _bstr_t LeftBeam;
    __declspec(property(get=GetRightBeam,put=PutRightBeam))
    _bstr_t RightBeam;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetFirstRailDist,put=PutFirstRailDist))
    double FirstRailDist;
    __declspec(property(get=GetEndRailDist,put=PutEndRailDist))
    double EndRailDist;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetStepTotalNum,put=PutStepTotalNum))
    short StepTotalNum;
    __declspec(property(get=GetRailConnection,put=PutRailConnection))
    _bstr_t RailConnection;
    __declspec(property(get=GetHasOutRail,put=PutHasOutRail))
    _bstr_t HasOutRail;
    __declspec(property(get=GetHasOutHandRail,put=PutHasOutHandRail))
    _bstr_t HasOutHandRail;
    __declspec(property(get=GetSectHeight,put=PutSectHeight))
    double SectHeight;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetEvacuateDia,put=PutEvacuateDia))
    _bstr_t EvacuateDia;
    __declspec(property(get=GetEvacuateDiaPos,put=PutEvacuateDiaPos))
    _bstr_t EvacuateDiaPos;
    __declspec(property(get=GetEvacuateDiaColor,put=PutEvacuateDiaColor))
    _variant_t EvacuateDiaColor;
    __declspec(property(get=GetStruFontStyle,put=PutStruFontStyle))
    _bstr_t StruFontStyle;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetSlabThick,put=PutSlabThick))
    double SlabThick;
    __declspec(property(get=GetStairThick,put=PutStairThick))
    double StairThick;
    __declspec(property(get=GetUpSlabWidth,put=PutUpSlabWidth))
    double UpSlabWidth;
    __declspec(property(get=GetDownSlabWidth,put=PutDownSlabWidth))
    double DownSlabWidth;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetSpaceWidth ( );
    void PutSpaceWidth (
        double pVal );
    double GetStairWidth ( );
    void PutStairWidth (
        double pVal );
    double GetSlabThick ( );
    void PutSlabThick (
        double pVal );
    double GetStairThick ( );
    void PutStairThick (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetUpSlabWidth ( );
    void PutUpSlabWidth (
        double pVal );
    double GetDownSlabWidth ( );
    void PutDownSlabWidth (
        double pVal );
    short GetStepTotalNum ( );
    void PutStepTotalNum (
        short pVal );
    _bstr_t GetStruTextHeight ( );
    void PutStruTextHeight (
        _bstr_t pVal );
    _bstr_t GetStruFontStyle ( );
    void PutStruFontStyle (
        _bstr_t pVal );
    short GetStepNum1 ( );
    void PutStepNum1 (
        short pVal );
    short GetStepNum2 ( );
    void PutStepNum2 (
        short pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailDistToSide ( );
    void PutRailDistToSide (
        double pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    _bstr_t GetHasOutRail ( );
    void PutHasOutRail (
        _bstr_t pVal );
    _bstr_t GetHasOutHandRail ( );
    void PutHasOutHandRail (
        _bstr_t pVal );
    _bstr_t GetRailConnection ( );
    void PutRailConnection (
        _bstr_t pVal );
    _bstr_t GetPlatType ( );
    void PutPlatType (
        _bstr_t pVal );
    _bstr_t GetHasSlab ( );
    void PutHasSlab (
        _bstr_t pVal );
    double GetSlabSize ( );
    void PutSlabSize (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    _bstr_t GetLeftBeam ( );
    void PutLeftBeam (
        _bstr_t pVal );
    _bstr_t GetRightBeam ( );
    void PutRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetAsAcsent ( );
    void PutAsAcsent (
        _bstr_t pVal );
    _bstr_t GetHasAcsentSlab ( );
    void PutHasAcsentSlab (
        _bstr_t pVal );
    _bstr_t GetOnGround ( );
    void PutOnGround (
        _bstr_t pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    double GetFirstRailDist ( );
    void PutFirstRailDist (
        double pVal );
    double GetEndRailDist ( );
    void PutEndRailDist (
        double pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );
    double GetSectHeight ( );
    void PutSectHeight (
        double pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );
    _bstr_t GetEvacuateDia ( );
    void PutEvacuateDia (
        _bstr_t pVal );
    _bstr_t GetEvacuateDiaPos ( );
    void PutEvacuateDiaPos (
        _bstr_t pVal );
    _variant_t GetEvacuateDiaColor ( );
    void PutEvacuateDiaColor (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpaceWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UpSlabWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_UpSlabWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DownSlabWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DownSlabWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepTotalNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepTotalNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StruTextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StruTextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StruFontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StruFontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum1 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum1 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum2 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum2 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailDistToSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDistToSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutHandRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutHandRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailConnection (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailConnection (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PlatType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PlatType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_AsAcsent (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AsAcsent (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasAcsentSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasAcsentSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OnGround (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OnGround (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FirstRailDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstRailDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndRailDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndRailDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SectHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_EvacuateDia (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EvacuateDia (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EvacuateDiaPos (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EvacuateDiaPos (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EvacuateDiaColor (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_EvacuateDiaColor (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("673efc21-d002-48bd-96ce-443e7e014e57"))
IComSlab : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetThickness ( );
    void PutThickness (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("ccd63ffe-7b85-42e3-b7e2-3bc119350875"))
IComSlopeRoof : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetVertex,put=PutVertex))
    _variant_t Vertex;
    __declspec(property(get=GetSlopeAngle,put=PutSlopeAngle))
    double SlopeAngle;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    _variant_t GetVertex ( );
    void PutVertex (
        const _variant_t & pVal );
    double GetSlopeAngle ( );
    void PutSlopeAngle (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Vertex (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Vertex (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_SlopeAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlopeAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("8ab8a5b5-98e4-4dfd-8f60-bb8de4be201c"))
IComSpace : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetCode,put=PutCode))
    _bstr_t Code;
    __declspec(property(get=GetUseVolume))
    _bstr_t UseVolume;
    __declspec(property(get=GetUseArea))
    _bstr_t UseArea;
    __declspec(property(get=GetOccuArea))
    _bstr_t OccuArea;
    __declspec(property(get=GetWallSurfArea))
    _bstr_t WallSurfArea;
    __declspec(property(get=GetExtWallArea))
    _bstr_t ExtWallArea;
    __declspec(property(get=GetExtWinArea))
    _bstr_t ExtWinArea;
    __declspec(property(get=GetExtDoorArea))
    _bstr_t ExtDoorArea;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetPerimeter))
    double Perimeter;
    __declspec(property(get=GetKickboard))
    double Kickboard;
    __declspec(property(get=GetMaskFlag,put=PutMaskFlag))
    _bstr_t MaskFlag;
    __declspec(property(get=GetNameType,put=PutNameType))
    _bstr_t NameType;
    __declspec(property(get=GetName2,put=PutName2))
    _bstr_t Name2;
    __declspec(property(get=GetShowHatch,put=PutShowHatch))
    _bstr_t ShowHatch;
    __declspec(property(get=GetHatchStyle,put=PutHatchStyle))
    _bstr_t HatchStyle;
    __declspec(property(get=GetStructure,put=PutStructure))
    _bstr_t Structure;
    __declspec(property(get=GetStructure2,put=PutStructure2))
    _bstr_t Structure2;
    __declspec(property(get=GetFloorType,put=PutFloorType))
    _bstr_t FloorType;
    __declspec(property(get=GetFloor3D,put=PutFloor3D))
    _bstr_t Floor3D;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    double TextHeight;
    __declspec(property(get=GetTextRotation,put=PutTextRotation))
    double TextRotation;
    __declspec(property(get=GetFloorThickness,put=PutFloorThickness))
    double FloorThickness;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetStuccoThickness,put=PutStuccoThickness))
    double StuccoThickness;
    __declspec(property(get=GetShowCode,put=PutShowCode))
    _bstr_t ShowCode;
    __declspec(property(get=GetShowName,put=PutShowName))
    _bstr_t ShowName;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetConductivity))
    double Conductivity;
    __declspec(property(get=GetHasRoof,put=PutHasRoof))
    _bstr_t HasRoof;
    __declspec(property(get=GetConductivity2))
    double Conductivity2;
    __declspec(property(get=GetInertiaIndex2))
    double InertiaIndex2;
    __declspec(property(get=GetAreaComputeType,put=PutAreaComputeType))
    _bstr_t AreaComputeType;
    __declspec(property(get=GetHatchLayer,put=PutHatchLayer))
    ACAD_LAYER HatchLayer;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetShowArea,put=PutShowArea))
    _bstr_t ShowArea;
    __declspec(property(get=GetDispMode,put=PutDispMode))
    _bstr_t DispMode;
    __declspec(property(get=GetShowOutLine,put=PutShowOutLine))
    _bstr_t ShowOutLine;
    __declspec(property(get=GetAreaUnit,put=PutAreaUnit))
    _bstr_t AreaUnit;
    __declspec(property(get=GetHatchColor,put=PutHatchColor))
    _variant_t HatchColor;
    __declspec(property(get=GetHatchScale,put=PutHatchScale))
    _bstr_t HatchScale;
    __declspec(property(get=GetHatchAngle,put=PutHatchAngle))
    _bstr_t HatchAngle;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetDispMode ( );
    void PutDispMode (
        _bstr_t pVal );
    _bstr_t GetCode ( );
    void PutCode (
        _bstr_t pVal );
    _bstr_t GetShowCode ( );
    void PutShowCode (
        _bstr_t pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    double GetFloorThickness ( );
    void PutFloorThickness (
        double pVal );
    double GetStuccoThickness ( );
    void PutStuccoThickness (
        double pVal );
    double GetKickboard ( );
    double GetPerimeter ( );
    _bstr_t GetUseVolume ( );
    _bstr_t GetUseArea ( );
    _bstr_t GetOccuArea ( );
    _bstr_t GetWallSurfArea ( );
    _bstr_t GetExtWallArea ( );
    _bstr_t GetExtWinArea ( );
    _bstr_t GetExtDoorArea ( );
    _bstr_t GetAreaComputeType ( );
    void PutAreaComputeType (
        _bstr_t pVal );
    ACAD_LAYER GetHatchLayer ( );
    void PutHatchLayer (
        ACAD_LAYER pVal );
    _bstr_t GetMaskFlag ( );
    void PutMaskFlag (
        _bstr_t pVal );
    _bstr_t GetFloor3D ( );
    void PutFloor3D (
        _bstr_t pVal );
    _bstr_t GetNameType ( );
    void PutNameType (
        _bstr_t pVal );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetName2 ( );
    void PutName2 (
        _bstr_t pVal );
    _bstr_t GetShowName ( );
    void PutShowName (
        _bstr_t pVal );
    _bstr_t GetShowArea ( );
    void PutShowArea (
        _bstr_t pVal );
    _bstr_t GetAreaUnit ( );
    void PutAreaUnit (
        _bstr_t pVal );
    double GetTextHeight ( );
    void PutTextHeight (
        double pVal );
    double GetTextRotation ( );
    void PutTextRotation (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetFloorType ( );
    void PutFloorType (
        _bstr_t pVal );
    _bstr_t GetStructure ( );
    void PutStructure (
        _bstr_t pVal );
    double GetConductivity ( );
    _bstr_t GetHasRoof ( );
    void PutHasRoof (
        _bstr_t pVal );
    _bstr_t GetStructure2 ( );
    void PutStructure2 (
        _bstr_t pVal );
    double GetConductivity2 ( );
    double GetInertiaIndex2 ( );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetShowOutLine ( );
    void PutShowOutLine (
        _bstr_t pVal );
    _bstr_t GetShowHatch ( );
    void PutShowHatch (
        _bstr_t pVal );
    _bstr_t GetHatchStyle ( );
    void PutHatchStyle (
        _bstr_t pVal );
    _variant_t GetHatchColor ( );
    void PutHatchColor (
        const _variant_t & pVal );
    _bstr_t GetHatchScale ( );
    void PutHatchScale (
        _bstr_t pVal );
    _bstr_t GetHatchAngle ( );
    void PutHatchAngle (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DispMode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DispMode (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Code (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Code (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowCode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowCode (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FloorThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StuccoThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StuccoThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Kickboard (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Perimeter (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_UseVolume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UseArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_OccuArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_WallSurfArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ExtWallArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ExtWinArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ExtDoorArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_AreaComputeType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AreaComputeType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_MaskFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MaskFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Floor3D (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Floor3D (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NameType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NameType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Name2 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name2 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowArea (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AreaUnit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AreaUnit (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FloorType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Structure (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Structure (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Conductivity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_HasRoof (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRoof (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Structure2 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Structure2 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Conductivity2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_InertiaIndex2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowOutLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowOutLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowHatch (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowHatch (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchColor (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchColor (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_HatchScale (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchScale (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchAngle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchAngle (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("f7f00b0a-c0fc-416b-8bed-8a1324f99b54"))
IComFireZone : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetFireZoneName,put=PutFireZoneName))
    _bstr_t FireZoneName;
    __declspec(property(get=GetFireZoneSumArea,put=PutFireZoneSumArea))
    double FireZoneSumArea;
    __declspec(property(get=GetSubFireZoneName,put=PutSubFireZoneName))
    _bstr_t SubFireZoneName;
    __declspec(property(get=GetSubFireZoneArea,put=PutSubFireZoneArea))
    double SubFireZoneArea;
    __declspec(property(get=GetFireZoneFunction,put=PutFireZoneFunction))
    _bstr_t FireZoneFunction;
    __declspec(property(get=GetAutoExtinguishingSys,put=PutAutoExtinguishingSys))
    _bstr_t AutoExtinguishingSys;
    __declspec(property(get=GetLocalSprayArea,put=PutLocalSprayArea))
    double LocalSprayArea;
    __declspec(property(get=GetStandardRange,put=PutStandardRange))
    _bstr_t StandardRange;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    double TextHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetIsDimFireZoneName,put=PutIsDimFireZoneName))
    _bstr_t IsDimFireZoneName;
    __declspec(property(get=GetIsDimSumArea,put=PutIsDimSumArea))
    _bstr_t IsDimSumArea;
    __declspec(property(get=GetIsDimSubNameAndArea,put=PutIsDimSubNameAndArea))
    _bstr_t IsDimSubNameAndArea;
    __declspec(property(get=GetIsDimFunction,put=PutIsDimFunction))
    _bstr_t IsDimFunction;
    __declspec(property(get=GetIsDimAutoExtinguishingSys,put=PutIsDimAutoExtinguishingSys))
    _bstr_t IsDimAutoExtinguishingSys;
    __declspec(property(get=GetAreaAccuracy,put=PutAreaAccuracy))
    _bstr_t AreaAccuracy;
    __declspec(property(get=GetHatchLayer,put=PutHatchLayer))
    ACAD_LAYER HatchLayer;
    __declspec(property(get=GetIsDimTextFrame,put=PutIsDimTextFrame))
    _bstr_t IsDimTextFrame;
    __declspec(property(get=GetIsDimFireZoneMask,put=PutIsDimFireZoneMask))
    _bstr_t IsDimFireZoneMask;
    __declspec(property(get=GetOutLineWidth,put=PutOutLineWidth))
    double OutLineWidth;
    __declspec(property(get=GetHasHatch,put=PutHasHatch))
    _bstr_t HasHatch;
    __declspec(property(get=GetHatchStyle,put=PutHatchStyle))
    _bstr_t HatchStyle;
    __declspec(property(get=GetHatchColor,put=PutHatchColor))
    _variant_t HatchColor;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetHatchAngle,put=PutHatchAngle))
    _bstr_t HatchAngle;
    __declspec(property(get=GetHatchScale,put=PutHatchScale))
    _bstr_t HatchScale;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetHaveSubFireZone,put=PutHaveSubFireZone))
    _bstr_t HaveSubFireZone;
    __declspec(property(get=GetIsDimFireZoneUint,put=PutIsDimFireZoneUint))
    _bstr_t IsDimFireZoneUint;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetTextHeight ( );
    void PutTextHeight (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetIsDimFireZoneName ( );
    void PutIsDimFireZoneName (
        _bstr_t pVal );
    _bstr_t GetIsDimSumArea ( );
    void PutIsDimSumArea (
        _bstr_t pVal );
    _bstr_t GetIsDimSubNameAndArea ( );
    void PutIsDimSubNameAndArea (
        _bstr_t pVal );
    _bstr_t GetIsDimFunction ( );
    void PutIsDimFunction (
        _bstr_t pVal );
    _bstr_t GetIsDimAutoExtinguishingSys ( );
    void PutIsDimAutoExtinguishingSys (
        _bstr_t pVal );
    _bstr_t GetIsDimFireZoneUint ( );
    void PutIsDimFireZoneUint (
        _bstr_t pVal );
    _bstr_t GetAreaAccuracy ( );
    void PutAreaAccuracy (
        _bstr_t pVal );
    _bstr_t GetFireZoneName ( );
    void PutFireZoneName (
        _bstr_t pVal );
    double GetFireZoneSumArea ( );
    void PutFireZoneSumArea (
        double pVal );
    _bstr_t GetHaveSubFireZone ( );
    void PutHaveSubFireZone (
        _bstr_t pVal );
    _bstr_t GetSubFireZoneName ( );
    void PutSubFireZoneName (
        _bstr_t pVal );
    double GetSubFireZoneArea ( );
    void PutSubFireZoneArea (
        double pVal );
    _bstr_t GetFireZoneFunction ( );
    void PutFireZoneFunction (
        _bstr_t pVal );
    _bstr_t GetAutoExtinguishingSys ( );
    void PutAutoExtinguishingSys (
        _bstr_t pVal );
    double GetLocalSprayArea ( );
    void PutLocalSprayArea (
        double pVal );
    _bstr_t GetStandardRange ( );
    void PutStandardRange (
        _bstr_t pVal );
    ACAD_LAYER GetHatchLayer ( );
    void PutHatchLayer (
        ACAD_LAYER pVal );
    _bstr_t GetIsDimTextFrame ( );
    void PutIsDimTextFrame (
        _bstr_t pVal );
    _bstr_t GetIsDimFireZoneMask ( );
    void PutIsDimFireZoneMask (
        _bstr_t pVal );
    double GetOutLineWidth ( );
    void PutOutLineWidth (
        double pVal );
    _bstr_t GetHasHatch ( );
    void PutHasHatch (
        _bstr_t pVal );
    _bstr_t GetHatchStyle ( );
    void PutHatchStyle (
        _bstr_t pVal );
    _variant_t GetHatchColor ( );
    void PutHatchColor (
        const _variant_t & pVal );
    _bstr_t GetHatchScale ( );
    void PutHatchScale (
        _bstr_t pVal );
    _bstr_t GetHatchAngle ( );
    void PutHatchAngle (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_IsDimFireZoneName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDimFireZoneName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsDimSumArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDimSumArea (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsDimSubNameAndArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDimSubNameAndArea (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsDimFunction (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDimFunction (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsDimAutoExtinguishingSys (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDimAutoExtinguishingSys (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsDimFireZoneUint (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDimFireZoneUint (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AreaAccuracy (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AreaAccuracy (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FireZoneName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FireZoneName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FireZoneSumArea (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FireZoneSumArea (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HaveSubFireZone (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HaveSubFireZone (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SubFireZoneName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SubFireZoneName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SubFireZoneArea (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SubFireZoneArea (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FireZoneFunction (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FireZoneFunction (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AutoExtinguishingSys (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoExtinguishingSys (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LocalSprayArea (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LocalSprayArea (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StandardRange (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StandardRange (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_IsDimTextFrame (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDimTextFrame (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsDimFireZoneMask (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDimFireZoneMask (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OutLineWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OutLineWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasHatch (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasHatch (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchColor (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchColor (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_HatchScale (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchScale (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchAngle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchAngle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("b50d5349-54f7-4bd1-b4ca-7145fe537d94"))
IComStep : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStepNum,put=PutStepNum))
    long StepNum;
    __declspec(property(get=GetAllStepHeight))
    double AllStepHeight;
    __declspec(property(get=GetBaseFace,put=PutBaseFace))
    _bstr_t BaseFace;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetDownStep,put=PutDownStep))
    _bstr_t DownStep;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    long GetStepNum ( );
    void PutStepNum (
        long pVal );
    double GetAllStepHeight ( );
    _bstr_t GetBaseFace ( );
    void PutBaseFace (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetDownStep ( );
    void PutDownStep (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AllStepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_BaseFace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BaseFace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DownStep (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DownStep (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("34e3eac4-310e-48db-a970-e1058274f9d1"))
IComVertSlab : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStartPoint,put=PutStartPoint))
    double StartPoint;
    __declspec(property(get=GetEndPoint,put=PutEndPoint))
    double EndPoint;
    __declspec(property(get=GetHeightS,put=PutHeightS))
    double HeightS;
    __declspec(property(get=GetHeightE,put=PutHeightE))
    double HeightE;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    double GetStartPoint ( );
    void PutStartPoint (
        double pVal );
    double GetEndPoint ( );
    void PutEndPoint (
        double pVal );
    double GetHeightS ( );
    void PutHeightS (
        double pVal );
    double GetHeightE ( );
    void PutHeightE (
        double pVal );
    double GetThickness ( );
    void PutThickness (
        double pVal );
    _bstr_t GetVolume ( );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StartPoint (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartPoint (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndPoint (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndPoint (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HeightS (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HeightS (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HeightE (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HeightE (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("77a339bf-9c6a-4448-b6eb-aa1546f68e48"))
IComWall : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetLeftWidth,put=PutLeftWidth))
    double LeftWidth;
    __declspec(property(get=GetRightWidth,put=PutRightWidth))
    double RightWidth;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetLSurfaceArea))
    _bstr_t LSurfaceArea;
    __declspec(property(get=GetRSurfaceArea))
    _bstr_t RSurfaceArea;
    __declspec(property(get=GetHoleArea))
    _bstr_t HoleArea;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetHoleVolume))
    _bstr_t HoleVolume;
    __declspec(property(get=GetLeftLayer,put=PutLeftLayer))
    ACAD_LAYER LeftLayer;
    __declspec(property(get=GetIsArc))
    _bstr_t IsArc;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetIsExternal))
    _bstr_t IsExternal;
    __declspec(property(get=GetTopFace,put=PutTopFace))
    _bstr_t TopFace;
    __declspec(property(get=GetBottomFace,put=PutBottomFace))
    _bstr_t BottomFace;
    __declspec(property(get=GetEndClose,put=PutEndClose))
    _bstr_t EndClose;
    __declspec(property(get=GetStructure,put=PutStructure))
    _bstr_t Structure;
    __declspec(property(get=GetAreaRatio))
    double AreaRatio;
    __declspec(property(get=GetConductivity))
    double Conductivity;
    __declspec(property(get=GetUsage,put=PutUsage))
    _bstr_t Usage;
    __declspec(property(get=GetStyle,put=PutStyle))
    _bstr_t Style;
    __declspec(property(get=GetRightLayer,put=PutRightLayer))
    ACAD_LAYER RightLayer;
    __declspec(property(get=GetHatchLayer,put=PutHatchLayer))
    ACAD_LAYER HatchLayer;
    __declspec(property(get=GetSurfLayer,put=PutSurfLayer))
    ACAD_LAYER SurfLayer;
    __declspec(property(get=GetLeftSpace))
    _bstr_t LeftSpace;
    __declspec(property(get=GetRightSpace))
    _bstr_t RightSpace;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetInertiaIndex))
    double InertiaIndex;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetTotalWidth))
    double TotalWidth;
    __declspec(property(get=GetInsulate,put=PutInsulate))
    _bstr_t Insulate;
    __declspec(property(get=GetInsuThick,put=PutInsuThick))
    double InsuThick;
    __declspec(property(get=GetEnUsage,put=PutEnUsage))
    _bstr_t EnUsage;
    __declspec(property(get=GetIOFeature,put=PutIOFeature))
    _bstr_t IOFeature;
    __declspec(property(get=GetStruIsArc))
    _bstr_t StruIsArc;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetLeftInsuThick,put=PutLeftInsuThick))
    double LeftInsuThick;
    __declspec(property(get=GetRightInsuThick,put=PutRightInsuThick))
    double RightInsuThick;
    __declspec(property(get=GetStruHeight,put=PutStruHeight))
    double StruHeight;
    __declspec(property(get=GetStemInsulate,put=PutStemInsulate))
    _bstr_t StemInsulate;
    __declspec(property(get=GetStemInsulateThick,put=PutStemInsulateThick))
    double StemInsulateThick;
    __declspec(property(get=GetInsulateClose,put=PutInsulateClose))
    _bstr_t InsulateClose;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetHideLabel,put=PutHideLabel))
    _bstr_t HideLabel;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetLeftWidth ( );
    void PutLeftWidth (
        double pVal );
    double GetRightWidth ( );
    void PutRightWidth (
        double pVal );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetHideLabel ( );
    void PutHideLabel (
        _bstr_t pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    _bstr_t GetIsArc ( );
    _bstr_t GetStruIsArc ( );
    _bstr_t GetLSurfaceArea ( );
    _bstr_t GetRSurfaceArea ( );
    _bstr_t GetHoleArea ( );
    _bstr_t GetVolume ( );
    _bstr_t GetHoleVolume ( );
    ACAD_LAYER GetLeftLayer ( );
    void PutLeftLayer (
        ACAD_LAYER pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    _bstr_t GetIsExternal ( );
    _bstr_t GetTopFace ( );
    void PutTopFace (
        _bstr_t pVal );
    _bstr_t GetBottomFace ( );
    void PutBottomFace (
        _bstr_t pVal );
    _bstr_t GetEndClose ( );
    void PutEndClose (
        _bstr_t pVal );
    _bstr_t GetUsage ( );
    void PutUsage (
        _bstr_t pVal );
    _bstr_t GetStyle ( );
    void PutStyle (
        _bstr_t pVal );
    ACAD_LAYER GetRightLayer ( );
    void PutRightLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHatchLayer ( );
    void PutHatchLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetSurfLayer ( );
    void PutSurfLayer (
        ACAD_LAYER pVal );
    _bstr_t GetLeftSpace ( );
    _bstr_t GetRightSpace ( );
    _bstr_t GetEnUsage ( );
    void PutEnUsage (
        _bstr_t pVal );
    _bstr_t GetIOFeature ( );
    void PutIOFeature (
        _bstr_t pVal );
    _bstr_t GetStructure ( );
    void PutStructure (
        _bstr_t pVal );
    double GetAreaRatio ( );
    double GetConductivity ( );
    double GetInertiaIndex ( );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    double GetTotalWidth ( );
    _bstr_t GetInsulate ( );
    void PutInsulate (
        _bstr_t pVal );
    double GetInsuThick ( );
    void PutInsuThick (
        double pVal );
    double GetStruHeight ( );
    void PutStruHeight (
        double pVal );
    double GetLeftInsuThick ( );
    void PutLeftInsuThick (
        double pVal );
    double GetRightInsuThick ( );
    void PutRightInsuThick (
        double pVal );
    _bstr_t GetStemInsulate ( );
    void PutStemInsulate (
        _bstr_t pVal );
    double GetStemInsulateThick ( );
    void PutStemInsulateThick (
        double pVal );
    _bstr_t GetInsulateClose ( );
    void PutInsulateClose (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RightWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RightWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HideLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HideLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IsArc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_StruIsArc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LSurfaceArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RSurfaceArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_HoleArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_HoleVolume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LeftLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IsExternal (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_TopFace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TopFace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BottomFace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BottomFace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EndClose (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EndClose (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Usage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Usage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RightLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HatchLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_SurfLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_SurfLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_LeftSpace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RightSpace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_EnUsage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EnUsage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IOFeature (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IOFeature (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Structure (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Structure (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AreaRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Conductivity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_InertiaIndex (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TotalWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Insulate (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Insulate (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_InsuThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_InsuThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StruHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StruHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftInsuThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftInsuThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RightInsuThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RightInsuThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StemInsulate (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StemInsulate (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StemInsulateThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StemInsulateThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InsulateClose (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InsulateClose (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("a4b9b237-beb0-42a6-8624-fb75355f9447"))
IComWallPatch : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetArea))
    _bstr_t Area;
    __declspec(property(get=GetLayerHatch,put=PutLayerHatch))
    ACAD_LAYER LayerHatch;
    __declspec(property(get=GetSurfLayer,put=PutSurfLayer))
    ACAD_LAYER SurfLayer;
    __declspec(property(get=GetInsulate,put=PutInsulate))
    _bstr_t Insulate;
    __declspec(property(get=GetInsuThick,put=PutInsuThick))
    double InsuThick;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    _bstr_t GetVolume ( );
    _bstr_t GetArea ( );
    ACAD_LAYER GetLayerHatch ( );
    void PutLayerHatch (
        ACAD_LAYER pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    ACAD_LAYER GetSurfLayer ( );
    void PutSurfLayer (
        ACAD_LAYER pVal );
    _bstr_t GetInsulate ( );
    void PutInsulate (
        _bstr_t pVal );
    double GetInsuThick ( );
    void PutInsuThick (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LayerHatch (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_LayerHatch (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SurfLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_SurfLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_Insulate (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Insulate (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_InsuThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_InsuThick (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("3d6eef57-8bd3-46a3-9ea3-f826516418d7"))
IComLineText : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    _bstr_t Height;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHeight ( );
    void PutHeight (
        _bstr_t pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    double GetRotation ( );
    void PutRotation (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("d2062bd5-4ec2-483c-95ca-55c799116b73"))
IComMutiText : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    _bstr_t Height;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetPageWidth,put=PutPageWidth))
    _bstr_t PageWidth;
    __declspec(property(get=GetLineSpace,put=PutLineSpace))
    _bstr_t LineSpace;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHeight ( );
    void PutHeight (
        _bstr_t pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    double GetRotation ( );
    void PutRotation (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetPageWidth ( );
    void PutPageWidth (
        _bstr_t pVal );
    _bstr_t GetLineSpace ( );
    void PutLineSpace (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PageWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PageWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LineSpace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LineSpace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("cfbb18bc-0d07-42c8-8dd9-e24517d5ab32"))
IComSymbComposing : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    _bstr_t Height;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTextSide,put=PutTextSide))
    _bstr_t TextSide;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetParagraphSpace,put=PutParagraphSpace))
    _bstr_t ParagraphSpace;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetLineSpace,put=PutLineSpace))
    _bstr_t LineSpace;
    __declspec(property(get=GetTextType,put=PutTextType))
    _bstr_t TextType;
    __declspec(property(get=GetPageWidth,put=PutPageWidth))
    _bstr_t PageWidth;
    __declspec(property(get=GetText2BaseRatio,put=PutText2BaseRatio))
    _bstr_t Text2BaseRatio;
    __declspec(property(get=GetTextBaseLen,put=PutTextBaseLen))
    _bstr_t TextBaseLen;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetSpace,put=PutSpace))
    _bstr_t Space;
    __declspec(property(get=GetDist2Line,put=PutDist2Line))
    _bstr_t Dist2Line;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetCirPointSize,put=PutCirPointSize))
    _bstr_t CirPointSize;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHeight ( );
    void PutHeight (
        _bstr_t pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetTextSide ( );
    void PutTextSide (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetParagraphSpace ( );
    void PutParagraphSpace (
        _bstr_t pVal );
    _bstr_t GetLineSpace ( );
    void PutLineSpace (
        _bstr_t pVal );
    _bstr_t GetText2BaseRatio ( );
    void PutText2BaseRatio (
        _bstr_t pVal );
    _bstr_t GetTextType ( );
    void PutTextType (
        _bstr_t pVal );
    _bstr_t GetTextBaseLen ( );
    void PutTextBaseLen (
        _bstr_t pVal );
    _bstr_t GetDist2Line ( );
    void PutDist2Line (
        _bstr_t pVal );
    _bstr_t GetPageWidth ( );
    void PutPageWidth (
        _bstr_t pVal );
    _bstr_t GetSpace ( );
    void PutSpace (
        _bstr_t pVal );
    _bstr_t GetCirPointSize ( );
    void PutCirPointSize (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ParagraphSpace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ParagraphSpace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LineSpace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LineSpace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text2BaseRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text2BaseRatio (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextBaseLen (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextBaseLen (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Dist2Line (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Dist2Line (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PageWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PageWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Space (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Space (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CirPointSize (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CirPointSize (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("fe12f88d-bdd6-4edd-a71d-a80db49af3fd"))
IComSymbArrow : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    _bstr_t Height;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetArrowSize,put=PutArrowSize))
    _bstr_t ArrowSize;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetText2BaseRatio,put=PutText2BaseRatio))
    _bstr_t Text2BaseRatio;
    __declspec(property(get=GetText2,put=PutText2))
    _bstr_t Text2;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHeight ( );
    void PutHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetText2 ( );
    void PutText2 (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetArrowSize ( );
    void PutArrowSize (
        _bstr_t pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetText2BaseRatio ( );
    void PutText2BaseRatio (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text2 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text2 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowSize (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowSize (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Text2BaseRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text2BaseRatio (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("83ee843a-9d41-40e5-8a86-b663e0593968"))
IComSymbDrawingIndex : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetDrawingLabel,put=PutDrawingLabel))
    _bstr_t DrawingLabel;
    __declspec(property(get=GetIndexLabel,put=PutIndexLabel))
    _bstr_t IndexLabel;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetDiameter,put=PutDiameter))
    _bstr_t Diameter;
    __declspec(property(get=GetLineWeight,put=PutLineWeight))
    _bstr_t LineWeight;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetShowScale,put=PutShowScale))
    _bstr_t ShowScale;
    __declspec(property(get=GetScaleText,put=PutScaleText))
    _bstr_t ScaleText;
    __declspec(property(get=GetScaleStyle,put=PutScaleStyle))
    _bstr_t ScaleStyle;
    __declspec(property(get=GetScaleHeight,put=PutScaleHeight))
    _bstr_t ScaleHeight;
    __declspec(property(get=GetTextRatio,put=PutTextRatio))
    _bstr_t TextRatio;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetOldStyle,put=PutOldStyle))
    _bstr_t OldStyle;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetDrawingLabel ( );
    void PutDrawingLabel (
        _bstr_t pVal );
    _bstr_t GetIndexLabel ( );
    void PutIndexLabel (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetDiameter ( );
    void PutDiameter (
        _bstr_t pVal );
    _bstr_t GetLineWeight ( );
    void PutLineWeight (
        _bstr_t pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetShowScale ( );
    void PutShowScale (
        _bstr_t pVal );
    _bstr_t GetScaleText ( );
    void PutScaleText (
        _bstr_t pVal );
    _bstr_t GetScaleStyle ( );
    void PutScaleStyle (
        _bstr_t pVal );
    _bstr_t GetScaleHeight ( );
    void PutScaleHeight (
        _bstr_t pVal );
    _bstr_t GetOldStyle ( );
    void PutOldStyle (
        _bstr_t pVal );
    _bstr_t GetTextRatio ( );
    void PutTextRatio (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawingLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawingLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IndexLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IndexLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Diameter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Diameter (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowScale (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowScale (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OldStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OldStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextRatio (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("25b71fea-d33d-4820-a693-3865d3db95a5"))
IComSymbInSight : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetDrawingLabel,put=PutDrawingLabel))
    _bstr_t DrawingLabel;
    __declspec(property(get=GetIndexLabel,put=PutIndexLabel))
    _bstr_t IndexLabel;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetDiameter,put=PutDiameter))
    _bstr_t Diameter;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetTextRatio,put=PutTextRatio))
    _bstr_t TextRatio;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetIndexLabel ( );
    void PutIndexLabel (
        _bstr_t pVal );
    _bstr_t GetDrawingLabel ( );
    void PutDrawingLabel (
        _bstr_t pVal );
    _bstr_t GetDiameter ( );
    void PutDiameter (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetTextRatio ( );
    void PutTextRatio (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IndexLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IndexLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawingLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawingLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Diameter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Diameter (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_TextRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextRatio (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("002adb32-754e-40cb-be5e-b1007b5a1165"))
IComSymbMultiLeader : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    _bstr_t Height;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetArrowStyle,put=PutArrowStyle))
    _bstr_t ArrowStyle;
    __declspec(property(get=GetUpText,put=PutUpText))
    _bstr_t UpText;
    __declspec(property(get=GetDownText,put=PutDownText))
    _bstr_t DownText;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetText2BaseRatio,put=PutText2BaseRatio))
    _bstr_t Text2BaseRatio;
    __declspec(property(get=GetAlignType,put=PutAlignType))
    _bstr_t AlignType;
    __declspec(property(get=GetUpTextType,put=PutUpTextType))
    _bstr_t UpTextType;
    __declspec(property(get=GetDownTextType,put=PutDownTextType))
    _bstr_t DownTextType;
    __declspec(property(get=GetUpPageWidth,put=PutUpPageWidth))
    _bstr_t UpPageWidth;
    __declspec(property(get=GetDownPageWidth,put=PutDownPageWidth))
    _bstr_t DownPageWidth;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHeight ( );
    void PutHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetArrowStyle ( );
    void PutArrowStyle (
        _bstr_t pVal );
    _bstr_t GetUpText ( );
    void PutUpText (
        _bstr_t pVal );
    _bstr_t GetDownText ( );
    void PutDownText (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetText2BaseRatio ( );
    void PutText2BaseRatio (
        _bstr_t pVal );
    _bstr_t GetAlignType ( );
    void PutAlignType (
        _bstr_t pVal );
    _bstr_t GetUpTextType ( );
    void PutUpTextType (
        _bstr_t pVal );
    _bstr_t GetUpPageWidth ( );
    void PutUpPageWidth (
        _bstr_t pVal );
    _bstr_t GetDownTextType ( );
    void PutDownTextType (
        _bstr_t pVal );
    _bstr_t GetDownPageWidth ( );
    void PutDownPageWidth (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UpText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DownText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DownText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Text2BaseRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text2BaseRatio (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AlignType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlignType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpTextType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UpTextType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpPageWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UpPageWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DownTextType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DownTextType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DownPageWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DownPageWidth (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("15cafa98-68f1-4bfc-b1c7-c70f0baeb73d"))
IComSymbElev : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetHasBaseLine,put=PutHasBaseLine))
    _bstr_t HasBaseLine;
    __declspec(property(get=GetHasLeader,put=PutHasLeader))
    _bstr_t HasLeader;
    __declspec(property(get=GetPrecision,put=PutPrecision))
    _bstr_t Precision;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetFillMode,put=PutFillMode))
    _bstr_t FillMode;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetText2BaseRatio,put=PutText2BaseRatio))
    _bstr_t Text2BaseRatio;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetFloorsOnLeftSide,put=PutFloorsOnLeftSide))
    _bstr_t FloorsOnLeftSide;
    __declspec(property(get=GetSitePlanElevMode,put=PutSitePlanElevMode))
    _bstr_t SitePlanElevMode;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetText2BaseRatio ( );
    void PutText2BaseRatio (
        _bstr_t pVal );
    _bstr_t GetFloorsOnLeftSide ( );
    void PutFloorsOnLeftSide (
        _bstr_t pVal );
    _bstr_t GetHasBaseLine ( );
    void PutHasBaseLine (
        _bstr_t pVal );
    _bstr_t GetHasLeader ( );
    void PutHasLeader (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetPrecision ( );
    void PutPrecision (
        _bstr_t pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetFillMode ( );
    void PutFillMode (
        _bstr_t pVal );
    _bstr_t GetSitePlanElevMode ( );
    void PutSitePlanElevMode (
        _bstr_t pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text2BaseRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text2BaseRatio (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FloorsOnLeftSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorsOnLeftSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasBaseLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasBaseLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasLeader (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasLeader (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Precision (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Precision (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FillMode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FillMode (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SitePlanElevMode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SitePlanElevMode (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
};

struct __declspec(uuid("093a4871-fd21-49ea-84f0-ef53cc07b436"))
IComSymbIndex : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    _bstr_t Height;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetDrawingLabel,put=PutDrawingLabel))
    _bstr_t DrawingLabel;
    __declspec(property(get=GetIndexLabel,put=PutIndexLabel))
    _bstr_t IndexLabel;
    __declspec(property(get=GetUpText,put=PutUpText))
    _bstr_t UpText;
    __declspec(property(get=GetDownText,put=PutDownText))
    _bstr_t DownText;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetDiameter,put=PutDiameter))
    _bstr_t Diameter;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetText2BaseRatio,put=PutText2BaseRatio))
    _bstr_t Text2BaseRatio;
    __declspec(property(get=GetAlignType,put=PutAlignType))
    _bstr_t AlignType;
    __declspec(property(get=GetTextRatio,put=PutTextRatio))
    _bstr_t TextRatio;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetOldStyle,put=PutOldStyle))
    _bstr_t OldStyle;
    __declspec(property(get=GetUpTextType,put=PutUpTextType))
    _bstr_t UpTextType;
    __declspec(property(get=GetUpPageWidth,put=PutUpPageWidth))
    _bstr_t UpPageWidth;
    __declspec(property(get=GetDownTextType,put=PutDownTextType))
    _bstr_t DownTextType;
    __declspec(property(get=GetDownPageWidth,put=PutDownPageWidth))
    _bstr_t DownPageWidth;
    __declspec(property(get=GetDimStyle,put=PutDimStyle))
    _bstr_t DimStyle;
    __declspec(property(get=GetExtendLine,put=PutExtendLine))
    _bstr_t ExtendLine;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetHeight ( );
    void PutHeight (
        _bstr_t pVal );
    _bstr_t GetDimStyle ( );
    void PutDimStyle (
        _bstr_t pVal );
    _bstr_t GetUpText ( );
    void PutUpText (
        _bstr_t pVal );
    _bstr_t GetDownText ( );
    void PutDownText (
        _bstr_t pVal );
    _bstr_t GetUpTextType ( );
    void PutUpTextType (
        _bstr_t pVal );
    _bstr_t GetUpPageWidth ( );
    void PutUpPageWidth (
        _bstr_t pVal );
    _bstr_t GetDownTextType ( );
    void PutDownTextType (
        _bstr_t pVal );
    _bstr_t GetDownPageWidth ( );
    void PutDownPageWidth (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetDrawingLabel ( );
    void PutDrawingLabel (
        _bstr_t pVal );
    _bstr_t GetIndexLabel ( );
    void PutIndexLabel (
        _bstr_t pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetOldStyle ( );
    void PutOldStyle (
        _bstr_t pVal );
    _bstr_t GetDiameter ( );
    void PutDiameter (
        _bstr_t pVal );
    _bstr_t GetTextRatio ( );
    void PutTextRatio (
        _bstr_t pVal );
    _bstr_t GetText2BaseRatio ( );
    void PutText2BaseRatio (
        _bstr_t pVal );
    _bstr_t GetAlignType ( );
    void PutAlignType (
        _bstr_t pVal );
    _bstr_t GetExtendLine ( );
    void PutExtendLine (
        _bstr_t pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DimStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DimStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UpText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DownText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DownText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpTextType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UpTextType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpPageWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UpPageWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DownTextType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DownTextType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DownPageWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DownPageWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawingLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawingLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IndexLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IndexLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_OldStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OldStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Diameter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Diameter (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextRatio (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text2BaseRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text2BaseRatio (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AlignType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlignType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ExtendLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ExtendLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
};

struct __declspec(uuid("9bbb17f9-416d-4693-bbfc-d95ee442fb87"))
IComSymbSection : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    _bstr_t Height;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetSectionType,put=PutSectionType))
    short SectionType;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetDrawHeight,put=PutDrawHeight))
    _bstr_t DrawHeight;
    __declspec(property(get=GetDrawStyle,put=PutDrawStyle))
    _bstr_t DrawStyle;
    __declspec(property(get=GetDrawText,put=PutDrawText))
    _bstr_t DrawText;
    __declspec(property(get=GetDrawLocal,put=PutDrawLocal))
    _bstr_t DrawLocal;
    __declspec(property(get=GetDrawDirect,put=PutDrawDirect))
    _bstr_t DrawDirect;
    __declspec(property(get=GetDrawModulus,put=PutDrawModulus))
    _bstr_t DrawModulus;
    __declspec(property(get=GetIsShowIndex,put=PutIsShowIndex))
    _bstr_t IsShowIndex;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHeight ( );
    void PutHeight (
        _bstr_t pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetIsShowIndex ( );
    void PutIsShowIndex (
        _bstr_t pVal );
    _bstr_t GetDrawHeight ( );
    void PutDrawHeight (
        _bstr_t pVal );
    _bstr_t GetDrawText ( );
    void PutDrawText (
        _bstr_t pVal );
    _bstr_t GetDrawStyle ( );
    void PutDrawStyle (
        _bstr_t pVal );
    _bstr_t GetDrawLocal ( );
    void PutDrawLocal (
        _bstr_t pVal );
    _bstr_t GetDrawDirect ( );
    void PutDrawDirect (
        _bstr_t pVal );
    _bstr_t GetDrawModulus ( );
    void PutDrawModulus (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    short GetSectionType ( );
    void PutSectionType (
        short pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsShowIndex (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsShowIndex (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawLocal (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawLocal (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawDirect (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawDirect (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawModulus (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawModulus (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_SectionType (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectionType (
        /*[in]*/ short pVal ) = 0;
};

struct __declspec(uuid("d1d890cf-7f16-4e62-a4e5-4a3d886770cb"))
IComSymbNorthThumb : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetRotation,put=PutRotation))
    _bstr_t Rotation;
    __declspec(property(get=GetRadius,put=PutRadius))
    _bstr_t Radius;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetHeight,put=PutHeight))
    _bstr_t Height;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetHeight ( );
    void PutHeight (
        _bstr_t pVal );
    _bstr_t GetRotation ( );
    void PutRotation (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetRadius ( );
    void PutRadius (
        _bstr_t pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("8eb9ee4a-209f-4d83-a6b7-0ff7cb16fe7a"))
IComDimension : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetDimStyle,put=PutDimStyle))
    _bstr_t DimStyle;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetAssociate,put=PutAssociate))
    _bstr_t Associate;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDimStyle ( );
    void PutDimStyle (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetAssociate ( );
    void PutAssociate (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DimStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DimStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Associate (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Associate (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("4769471b-2d93-4a0a-8544-120ea2486639"))
IComRadiusDim : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetDimStyle,put=PutDimStyle))
    _bstr_t DimStyle;
    __declspec(property(get=GetText))
    _bstr_t Text;
    __declspec(property(get=GetDesText,put=PutDesText))
    _bstr_t DesText;
    __declspec(property(get=GetRadiusType,put=PutRadiusType))
    _bstr_t RadiusType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDimStyle ( );
    void PutDimStyle (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetDesText ( );
    void PutDesText (
        _bstr_t pVal );
    _bstr_t GetText ( );
    _bstr_t GetRadiusType ( );
    void PutRadiusType (
        _bstr_t pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DimStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DimStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DesText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DesText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RadiusType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RadiusType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("7b8727e9-c4c1-497c-ae0c-1e6713bad8be"))
IComAxisLabel : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetRadius,put=PutRadius))
    _bstr_t Radius;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetLeaderLen1,put=PutLeaderLen1))
    double LeaderLen1;
    __declspec(property(get=GetLeaderLen2,put=PutLeaderLen2))
    double LeaderLen2;
    __declspec(property(get=GetCircleTextStyle,put=PutCircleTextStyle))
    _bstr_t CircleTextStyle;
    __declspec(property(get=GetTextRatio,put=PutTextRatio))
    _bstr_t TextRatio;
    __declspec(property(get=GetHideAxisText,put=PutHideAxisText))
    _bstr_t HideAxisText;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetRadius ( );
    void PutRadius (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetLeaderLen1 ( );
    void PutLeaderLen1 (
        double pVal );
    double GetLeaderLen2 ( );
    void PutLeaderLen2 (
        double pVal );
    _bstr_t GetCircleTextStyle ( );
    void PutCircleTextStyle (
        _bstr_t pVal );
    _bstr_t GetTextRatio ( );
    void PutTextRatio (
        _bstr_t pVal );
    _bstr_t GetHideAxisText ( );
    void PutHideAxisText (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeaderLen1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeaderLen1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeaderLen2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeaderLen2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CircleTextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CircleTextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextRatio (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HideAxisText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HideAxisText (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("04d6d56a-c520-4724-b072-682ed7b2ccf0"))
IComSymbRupture : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetRuptureNum,put=PutRuptureNum))
    short RuptureNum;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    short GetRuptureNum ( );
    void PutRuptureNum (
        short pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RuptureNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_RuptureNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("9257d93e-ae48-46eb-b688-f0313b7b8b8d"))
IComSymbCoord : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetStyle,put=PutStyle))
    _bstr_t Style;
    __declspec(property(get=GetLocation,put=PutLocation))
    _variant_t Location;
    __declspec(property(get=GetXValue,put=PutXValue))
    double XValue;
    __declspec(property(get=GetYValue,put=PutYValue))
    double YValue;
    __declspec(property(get=GetPrecision,put=PutPrecision))
    _bstr_t Precision;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetText2BaseRatio,put=PutText2BaseRatio))
    _bstr_t Text2BaseRatio;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetCoordShowMode,put=PutCoordShowMode))
    _bstr_t CoordShowMode;
    __declspec(property(get=GetLabelNumber,put=PutLabelNumber))
    _bstr_t LabelNumber;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetXValue ( );
    void PutXValue (double pVal );
	//double GetYValue();
    void PutYValue (
        double pVal );
    _variant_t GetLocation ( );
    void PutLocation (
        const _variant_t & pVal );
    _bstr_t GetStyle ( );
    void PutStyle (
        _bstr_t pVal );
    _bstr_t GetPrecision ( );
    void PutPrecision (
        _bstr_t pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetText2BaseRatio ( );
    void PutText2BaseRatio (
        _bstr_t pVal );
    _bstr_t GetCoordShowMode ( );
    void PutCoordShowMode (
        _bstr_t pVal );
    _bstr_t GetLabelNumber ( );
    void PutLabelNumber (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_XValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_XValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_YValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_YValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Location (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Precision (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Precision (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Text2BaseRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text2BaseRatio (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CoordShowMode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordShowMode (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LabelNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelNumber (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("74e35b1f-fd4f-43af-955f-56b0aae53034"))
IComSheet : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetAllTextStyle,put=PutAllTextStyle))
    _bstr_t AllTextStyle;
    __declspec(property(get=GetAllTextSize,put=PutAllTextSize))
    _bstr_t AllTextSize;
    __declspec(property(get=GetAllTextColor,put=PutAllTextColor))
    ACAD_COLOR AllTextColor;
    __declspec(property(get=GetAllSpaceFactor,put=PutAllSpaceFactor))
    _bstr_t AllSpaceFactor;
    __declspec(property(get=GetAllHAlign,put=PutAllHAlign))
    _bstr_t AllHAlign;
    __declspec(property(get=GetAllVAlign,put=PutAllVAlign))
    _bstr_t AllVAlign;
    __declspec(property(get=GetAllAutoLine,put=PutAllAutoLine))
    _bstr_t AllAutoLine;
    __declspec(property(get=GetAllInherit,put=PutAllInherit))
    _bstr_t AllInherit;
    __declspec(property(get=GetHasHLine,put=PutHasHLine))
    _bstr_t HasHLine;
    __declspec(property(get=GetHLineColor,put=PutHLineColor))
    ACAD_COLOR HLineColor;
    __declspec(property(get=GetHLineStyle,put=PutHLineStyle))
    _bstr_t HLineStyle;
    __declspec(property(get=GetHLineWidth,put=PutHLineWidth))
    _bstr_t HLineWidth;
    __declspec(property(get=GetAllRowHeight,put=PutAllRowHeight))
    _bstr_t AllRowHeight;
    __declspec(property(get=GetAllRowHeightProperty,put=PutAllRowHeightProperty))
    _bstr_t AllRowHeightProperty;
    __declspec(property(get=GetAllHLineInherit,put=PutAllHLineInherit))
    _bstr_t AllHLineInherit;
    __declspec(property(get=GetRangeRowMax))
    short RangeRowMax[][];
    __declspec(property(get=GetRangeColumnMax))
    short RangeColumnMax[][];
    __declspec(property(get=GetRangeRow))
    short RangeRow[][];
    __declspec(property(get=GetHasVLine,put=PutHasVLine))
    _bstr_t HasVLine;
    __declspec(property(get=GetVLineColor,put=PutVLineColor))
    ACAD_COLOR VLineColor;
    __declspec(property(get=GetVLineStyle,put=PutVLineStyle))
    _bstr_t VLineStyle;
    __declspec(property(get=GetVLineWidth,put=PutVLineWidth))
    _bstr_t VLineWidth;
    __declspec(property(get=GetAllVLineInherit,put=PutAllVLineInherit))
    _bstr_t AllVLineInherit;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetHasBorder,put=PutHasBorder))
    _bstr_t HasBorder;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    ACAD_COLOR BorderColor;
    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    _bstr_t BorderStyle;
    __declspec(property(get=GetBorderWidth,put=PutBorderWidth))
    _bstr_t BorderWidth;
    __declspec(property(get=GetRangeColumn))
    short RangeColumn[][];
    __declspec(property(get=GetIsRange))
    long IsRange[][];
    __declspec(property(get=GetText))
    _bstr_t Text[][];
    __declspec(property(get=GetColumnNum))
    short ColumnNum;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetTitleTextStyle,put=PutTitleTextStyle))
    _bstr_t TitleTextStyle;
    __declspec(property(get=GetTitleTextSize,put=PutTitleTextSize))
    _bstr_t TitleTextSize;
    __declspec(property(get=GetTitleTextColor,put=PutTitleTextColor))
    ACAD_COLOR TitleTextColor;
    __declspec(property(get=GetTitleSpaceFactor,put=PutTitleSpaceFactor))
    _bstr_t TitleSpaceFactor;
    __declspec(property(get=GetTitleHAlign,put=PutTitleHAlign))
    _bstr_t TitleHAlign;
    __declspec(property(get=GetTitleVAlign,put=PutTitleVAlign))
    _bstr_t TitleVAlign;
    __declspec(property(get=GetTitleBaseLineColor,put=PutTitleBaseLineColor))
    ACAD_COLOR TitleBaseLineColor;
    __declspec(property(get=GetTitleBaseLineStyle,put=PutTitleBaseLineStyle))
    _bstr_t TitleBaseLineStyle;
    __declspec(property(get=GetTitleBaseLineWidth,put=PutTitleBaseLineWidth))
    _bstr_t TitleBaseLineWidth;
    __declspec(property(get=GetTitleHeight,put=PutTitleHeight))
    _bstr_t TitleHeight;
    __declspec(property(get=GetTitleOutside,put=PutTitleOutside))
    _bstr_t TitleOutside;
    __declspec(property(get=GetTitleHide,put=PutTitleHide))
    _bstr_t TitleHide;
    __declspec(property(get=GetCellRowIndex,put=PutCellRowIndex))
    long CellRowIndex;
    __declspec(property(get=GetCellColIndex,put=PutCellColIndex))
    long CellColIndex;
    __declspec(property(get=GetCellText,put=PutCellText))
    _bstr_t CellText;
    __declspec(property(get=GetCellTextStyle,put=PutCellTextStyle))
    _bstr_t CellTextStyle;
    __declspec(property(get=GetCellTextSize,put=PutCellTextSize))
    _bstr_t CellTextSize;
    __declspec(property(get=GetCellTextColor,put=PutCellTextColor))
    ACAD_COLOR CellTextColor;
    __declspec(property(get=GetCellSpaceFactor,put=PutCellSpaceFactor))
    _bstr_t CellSpaceFactor;
    __declspec(property(get=GetCellHAlign,put=PutCellHAlign))
    _bstr_t CellHAlign;
    __declspec(property(get=GetCellVAlign,put=PutCellVAlign))
    _bstr_t CellVAlign;
    __declspec(property(get=GetCellLinePropertyInherit,put=PutCellLinePropertyInherit))
    _bstr_t CellLinePropertyInherit;
    __declspec(property(get=GetCellLineWrap,put=PutCellLineWrap))
    _bstr_t CellLineWrap;
    __declspec(property(get=GetRowNum))
    short RowNum;
    __declspec(property(get=GetRowIndex,put=PutRowIndex))
    long RowIndex;
    __declspec(property(get=GetRowHeight,put=PutRowHeight))
    _bstr_t RowHeight;
    __declspec(property(get=GetRowHeightProperty,put=PutRowHeightProperty))
    _bstr_t RowHeightProperty;
    __declspec(property(get=GetRowInheritSheet,put=PutRowInheritSheet))
    _bstr_t RowInheritSheet;
    __declspec(property(get=GetRowHasBaseLine,put=PutRowHasBaseLine))
    _bstr_t RowHasBaseLine;
    __declspec(property(get=GetRowHLineColor,put=PutRowHLineColor))
    ACAD_COLOR RowHLineColor;
    __declspec(property(get=GetRowHLineStyle,put=PutRowHLineStyle))
    _bstr_t RowHLineStyle;
    __declspec(property(get=GetRowHLineWidth,put=PutRowHLineWidth))
    _bstr_t RowHLineWidth;
    __declspec(property(get=GetAllRowCellInherit,put=PutAllRowCellInherit))
    _bstr_t AllRowCellInherit;
    __declspec(property(get=GetColNum))
    long ColNum;
    __declspec(property(get=GetColIndex,put=PutColIndex))
    long ColIndex;
    __declspec(property(get=GetColWidth,put=PutColWidth))
    _bstr_t ColWidth;
    __declspec(property(get=GetColTextStyle,put=PutColTextStyle))
    _bstr_t ColTextStyle;
    __declspec(property(get=GetColTextSize,put=PutColTextSize))
    _bstr_t ColTextSize;
    __declspec(property(get=GetColTextColor,put=PutColTextColor))
    ACAD_COLOR ColTextColor;
    __declspec(property(get=GetColSpaceFactor,put=PutColSpaceFactor))
    _bstr_t ColSpaceFactor;
    __declspec(property(get=GetColHAlign,put=PutColHAlign))
    _bstr_t ColHAlign;
    __declspec(property(get=GetColLinePropertyInherit,put=PutColLinePropertyInherit))
    _bstr_t ColLinePropertyInherit;
    __declspec(property(get=GetColLineWrap,put=PutColLineWrap))
    _bstr_t ColLineWrap;
    __declspec(property(get=GetColAllowDrag,put=PutColAllowDrag))
    _bstr_t ColAllowDrag;
    __declspec(property(get=GetColInheritSheet,put=PutColInheritSheet))
    _bstr_t ColInheritSheet;
    __declspec(property(get=GetColHasRightLine,put=PutColHasRightLine))
    _bstr_t ColHasRightLine;
    __declspec(property(get=GetColRLineColor,put=PutColRLineColor))
    ACAD_COLOR ColRLineColor;
    __declspec(property(get=GetColRLineStyle,put=PutColRLineStyle))
    _bstr_t ColRLineStyle;
    __declspec(property(get=GetColRLineWidth,put=PutColRLineWidth))
    _bstr_t ColRLineWidth;
    __declspec(property(get=GetAllColCellInherit,put=PutAllColCellInherit))
    _bstr_t AllColCellInherit;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetAllTextStyle ( );
    void PutAllTextStyle (
        _bstr_t pVal );
    _bstr_t GetAllTextSize ( );
    void PutAllTextSize (
        _bstr_t pVal );
    ACAD_COLOR GetAllTextColor ( );
    void PutAllTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetAllSpaceFactor ( );
    void PutAllSpaceFactor (
        _bstr_t pVal );
    _bstr_t GetAllHAlign ( );
    void PutAllHAlign (
        _bstr_t pVal );
    _bstr_t GetAllVAlign ( );
    void PutAllVAlign (
        _bstr_t pVal );
    _bstr_t GetAllAutoLine ( );
    void PutAllAutoLine (
        _bstr_t pVal );
    _bstr_t GetAllInherit ( );
    void PutAllInherit (
        _bstr_t pVal );
    _bstr_t GetHasHLine ( );
    void PutHasHLine (
        _bstr_t pVal );
    ACAD_COLOR GetHLineColor ( );
    void PutHLineColor (
        ACAD_COLOR pVal );
    _bstr_t GetHLineStyle ( );
    void PutHLineStyle (
        _bstr_t pVal );
    _bstr_t GetHLineWidth ( );
    void PutHLineWidth (
        _bstr_t pVal );
    _bstr_t GetAllRowHeight ( );
    void PutAllRowHeight (
        _bstr_t pVal );
    _bstr_t GetAllRowHeightProperty ( );
    void PutAllRowHeightProperty (
        _bstr_t pVal );
    _bstr_t GetAllHLineInherit ( );
    void PutAllHLineInherit (
        _bstr_t pVal );
    _bstr_t GetHasVLine ( );
    void PutHasVLine (
        _bstr_t pVal );
    ACAD_COLOR GetVLineColor ( );
    void PutVLineColor (
        ACAD_COLOR pVal );
    _bstr_t GetVLineStyle ( );
    void PutVLineStyle (
        _bstr_t pVal );
    _bstr_t GetVLineWidth ( );
    void PutVLineWidth (
        _bstr_t pVal );
    _bstr_t GetAllVLineInherit ( );
    void PutAllVLineInherit (
        _bstr_t pVal );
    _bstr_t GetHasBorder ( );
    void PutHasBorder (
        _bstr_t pVal );
    ACAD_COLOR GetBorderColor ( );
    void PutBorderColor (
        ACAD_COLOR pVal );
    _bstr_t GetBorderStyle ( );
    void PutBorderStyle (
        _bstr_t pVal );
    _bstr_t GetBorderWidth ( );
    void PutBorderWidth (
        _bstr_t pVal );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t pVal );
    _bstr_t GetTitleTextStyle ( );
    void PutTitleTextStyle (
        _bstr_t pVal );
    _bstr_t GetTitleTextSize ( );
    void PutTitleTextSize (
        _bstr_t pVal );
    ACAD_COLOR GetTitleTextColor ( );
    void PutTitleTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetTitleSpaceFactor ( );
    void PutTitleSpaceFactor (
        _bstr_t pVal );
    _bstr_t GetTitleHAlign ( );
    void PutTitleHAlign (
        _bstr_t pVal );
    _bstr_t GetTitleVAlign ( );
    void PutTitleVAlign (
        _bstr_t pVal );
    ACAD_COLOR GetTitleBaseLineColor ( );
    void PutTitleBaseLineColor (
        ACAD_COLOR pVal );
    _bstr_t GetTitleBaseLineStyle ( );
    void PutTitleBaseLineStyle (
        _bstr_t pVal );
    _bstr_t GetTitleBaseLineWidth ( );
    void PutTitleBaseLineWidth (
        _bstr_t pVal );
    _bstr_t GetTitleHeight ( );
    void PutTitleHeight (
        _bstr_t pVal );
    _bstr_t GetTitleOutside ( );
    void PutTitleOutside (
        _bstr_t pVal );
    _bstr_t GetTitleHide ( );
    void PutTitleHide (
        _bstr_t pVal );
    long GetCellRowIndex ( );
    void PutCellRowIndex (
        long pVal );
    long GetCellColIndex ( );
    void PutCellColIndex (
        long pVal );
    _bstr_t GetCellText ( );
    void PutCellText (
        _bstr_t pVal );
    _bstr_t GetCellTextStyle ( );
    void PutCellTextStyle (
        _bstr_t pVal );
    _bstr_t GetCellTextSize ( );
    void PutCellTextSize (
        _bstr_t pVal );
    ACAD_COLOR GetCellTextColor ( );
    void PutCellTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetCellSpaceFactor ( );
    void PutCellSpaceFactor (
        _bstr_t pVal );
    _bstr_t GetCellHAlign ( );
    void PutCellHAlign (
        _bstr_t pVal );
    _bstr_t GetCellVAlign ( );
    void PutCellVAlign (
        _bstr_t pVal );
    _bstr_t GetCellLinePropertyInherit ( );
    void PutCellLinePropertyInherit (
        _bstr_t pVal );
    _bstr_t GetCellLineWrap ( );
    void PutCellLineWrap (
        _bstr_t pVal );
    short GetRowNum ( );
    long GetRowIndex ( );
    void PutRowIndex (
        long pVal );
    _bstr_t GetRowHeight ( );
    void PutRowHeight (
        _bstr_t pVal );
    _bstr_t GetRowHeightProperty ( );
    void PutRowHeightProperty (
        _bstr_t pVal );
    _bstr_t GetRowInheritSheet ( );
    void PutRowInheritSheet (
        _bstr_t pVal );
    _bstr_t GetRowHasBaseLine ( );
    void PutRowHasBaseLine (
        _bstr_t pVal );
    ACAD_COLOR GetRowHLineColor ( );
    void PutRowHLineColor (
        ACAD_COLOR pVal );
    _bstr_t GetRowHLineStyle ( );
    void PutRowHLineStyle (
        _bstr_t pVal );
    _bstr_t GetRowHLineWidth ( );
    void PutRowHLineWidth (
        _bstr_t pVal );
    _bstr_t GetAllRowCellInherit ( );
    void PutAllRowCellInherit (
        _bstr_t pVal );
    long GetColNum ( );
    long GetColIndex ( );
    void PutColIndex (
        long pVal );
    _bstr_t GetColWidth ( );
    void PutColWidth (
        _bstr_t pVal );
    _bstr_t GetColTextStyle ( );
    void PutColTextStyle (
        _bstr_t pVal );
    _bstr_t GetColTextSize ( );
    void PutColTextSize (
        _bstr_t pVal );
    ACAD_COLOR GetColTextColor ( );
    void PutColTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetColSpaceFactor ( );
    void PutColSpaceFactor (
        _bstr_t pVal );
    _bstr_t GetColHAlign ( );
    void PutColHAlign (
        _bstr_t pVal );
    _bstr_t GetColLinePropertyInherit ( );
    void PutColLinePropertyInherit (
        _bstr_t pVal );
    _bstr_t GetColLineWrap ( );
    void PutColLineWrap (
        _bstr_t pVal );
    _bstr_t GetColAllowDrag ( );
    void PutColAllowDrag (
        _bstr_t pVal );
    _bstr_t GetColInheritSheet ( );
    void PutColInheritSheet (
        _bstr_t pVal );
    _bstr_t GetColHasRightLine ( );
    void PutColHasRightLine (
        _bstr_t pVal );
    ACAD_COLOR GetColRLineColor ( );
    void PutColRLineColor (
        ACAD_COLOR pVal );
    _bstr_t GetColRLineStyle ( );
    void PutColRLineStyle (
        _bstr_t pVal );
    _bstr_t GetColRLineWidth ( );
    void PutColRLineWidth (
        _bstr_t pVal );
    _bstr_t GetAllColCellInherit ( );
    void PutAllColCellInherit (
        _bstr_t pVal );
    HRESULT Create (
        short nRowNum,
        short nColNum );
    HRESULT SetCellText (
        short Row,
        short Col,
        _bstr_t Text );
    HRESULT Merge (
        short StartRow,
        short StartColumn,
        short NumRow,
        short NumColumn );
    HRESULT ExplodeCell (
        short Row,
        short Col );
    short GetRangeRowMax (
        short Row,
        short Column );
    short GetRangeColumnMax (
        short Row,
        short Column );
    short GetRangeRow (
        short Row,
        short Column );
    short GetRangeColumn (
        short Row,
        short Column );
    long GetIsRange (
        short Row,
        short Column );
    _bstr_t GetText (
        short Row,
        short Column );
    short GetColumnNum ( );
    long GetTextColor (
        short Row,
        short Col );
    void PutTextColor (
        short Row,
        short Col,
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AllTextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllTextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllTextSize (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllTextSize (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllTextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllTextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_AllSpaceFactor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllSpaceFactor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllHAlign (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllHAlign (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllVAlign (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllVAlign (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllAutoLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllAutoLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllInherit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllInherit (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasHLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasHLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HLineColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_HLineColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_HLineStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HLineStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HLineWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HLineWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllRowHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllRowHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllRowHeightProperty (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllRowHeightProperty (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllHLineInherit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllHLineInherit (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasVLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasVLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VLineColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_VLineColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_VLineStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VLineStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VLineWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VLineWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllVLineInherit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllVLineInherit (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasBorder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasBorder (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BorderWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BorderWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleTextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleTextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleTextSize (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleTextSize (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleTextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleTextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleSpaceFactor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleSpaceFactor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleHAlign (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleHAlign (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleVAlign (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleVAlign (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleBaseLineColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleBaseLineColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleBaseLineStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleBaseLineStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleBaseLineWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleBaseLineWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleOutside (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleOutside (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleHide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleHide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CellRowIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CellRowIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CellColIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CellColIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CellText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CellTextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellTextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CellTextSize (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellTextSize (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CellTextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellTextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_CellSpaceFactor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellSpaceFactor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CellHAlign (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellHAlign (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CellVAlign (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellVAlign (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CellLinePropertyInherit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellLinePropertyInherit (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CellLineWrap (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellLineWrap (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RowNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall get_RowIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RowIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RowHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RowHeightProperty (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowHeightProperty (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RowInheritSheet (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowInheritSheet (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RowHasBaseLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowHasBaseLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RowHLineColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowHLineColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_RowHLineStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowHLineStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RowHLineWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowHLineWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllRowCellInherit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllRowCellInherit (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ColIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ColIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ColWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColTextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColTextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColTextSize (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColTextSize (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColTextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColTextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ColSpaceFactor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColSpaceFactor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColHAlign (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColHAlign (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColLinePropertyInherit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColLinePropertyInherit (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColLineWrap (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColLineWrap (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColAllowDrag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColAllowDrag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColInheritSheet (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColInheritSheet (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColHasRightLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColHasRightLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColRLineColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColRLineColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ColRLineStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColRLineStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColRLineWidth (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColRLineWidth (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllColCellInherit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AllColCellInherit (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ short nRowNum,
        /*[in]*/ short nColNum ) = 0;
      virtual HRESULT __stdcall raw_SetCellText (
        short Row,
        short Col,
        BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_Merge (
        short StartRow,
        short StartColumn,
        short NumRow,
        short NumColumn ) = 0;
      virtual HRESULT __stdcall raw_ExplodeCell (
        short Row,
        short Col ) = 0;
      virtual HRESULT __stdcall get_RangeRowMax (
        /*[in]*/ short Row,
        /*[in]*/ short Column,
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall get_RangeColumnMax (
        /*[in]*/ short Row,
        /*[in]*/ short Column,
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall get_RangeRow (
        /*[in]*/ short Row,
        /*[in]*/ short Column,
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall get_RangeColumn (
        /*[in]*/ short Row,
        /*[in]*/ short Column,
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall get_IsRange (
        /*[in]*/ short Row,
        /*[in]*/ short Column,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[in]*/ short Row,
        /*[in]*/ short Column,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        short Row,
        short Col,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        short Row,
        short Col,
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("886e399d-d313-4abb-a279-1829060fadd1"))
IComCurtainWall : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetGlassLayer,put=PutGlassLayer))
    ACAD_LAYER GlassLayer;
    __declspec(property(get=GetRowLayer,put=PutRowLayer))
    ACAD_LAYER RowLayer;
    __declspec(property(get=GetColLayer,put=PutColLayer))
    ACAD_LAYER ColLayer;
    __declspec(property(get=GetRowNum))
    long RowNum;
    __declspec(property(get=GetColNum))
    long ColNum;
    __declspec(property(get=GetTopFrame,put=PutTopFrame))
    _bstr_t TopFrame;
    __declspec(property(get=GetBotFrame,put=PutBotFrame))
    _bstr_t BotFrame;
    __declspec(property(get=GetColAverage,put=PutColAverage))
    _bstr_t ColAverage;
    __declspec(property(get=GetURow,put=PutURow))
    double URow;
    __declspec(property(get=GetVRow,put=PutVRow))
    double VRow;
    __declspec(property(get=GetUCol,put=PutUCol))
    double UCol;
    __declspec(property(get=GetVCol,put=PutVCol))
    double VCol;
    __declspec(property(get=GetBasePos,put=PutBasePos))
    _bstr_t BasePos;
    __declspec(property(get=GetRowHide,put=PutRowHide))
    _bstr_t RowHide;
    __declspec(property(get=GetColHide,put=PutColHide))
    _bstr_t ColHide;
    __declspec(property(get=GetGlassDist,put=PutGlassDist))
    double GlassDist;
    __declspec(property(get=GetFrameDist,put=PutFrameDist))
    double FrameDist;
    __declspec(property(get=GetRowAverage,put=PutRowAverage))
    _bstr_t RowAverage;
    __declspec(property(get=GetRowHeight,put=PutRowHeight))
    _variant_t RowHeight;
    __declspec(property(get=GetColWidth,put=PutColWidth))
    _variant_t ColWidth;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetIsArc))
    _bstr_t IsArc;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetStructure,put=PutStructure))
    _bstr_t Structure;
    __declspec(property(get=GetAreaRatio))
    double AreaRatio;
    __declspec(property(get=GetConductivity))
    double Conductivity;
    __declspec(property(get=GetInertiaIndex))
    double InertiaIndex;
    __declspec(property(get=GetEnUsage,put=PutEnUsage))
    _bstr_t EnUsage;
    __declspec(property(get=GetIOFeature,put=PutIOFeature))
    _bstr_t IOFeature;
    __declspec(property(get=GetLeftWidth,put=PutLeftWidth))
    double LeftWidth;
    __declspec(property(get=GetRightWidth,put=PutRightWidth))
    double RightWidth;
    __declspec(property(get=GetPlaneDisplay,put=PutPlaneDisplay))
    _bstr_t PlaneDisplay;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetLeftWidth ( );
    void PutLeftWidth (
        double pVal );
    double GetRightWidth ( );
    void PutRightWidth (
        double pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    double GetLength ( );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    long GetRowNum ( );
    long GetColNum ( );
    _bstr_t GetRowAverage ( );
    void PutRowAverage (
        _bstr_t pVal );
    _bstr_t GetColAverage ( );
    void PutColAverage (
        _bstr_t pVal );
    _variant_t GetRowHeight ( );
    void PutRowHeight (
        const _variant_t & pVal );
    _variant_t GetColWidth ( );
    void PutColWidth (
        const _variant_t & pVal );
    double GetURow ( );
    void PutURow (
        double pVal );
    double GetVRow ( );
    void PutVRow (
        double pVal );
    double GetUCol ( );
    void PutUCol (
        double pVal );
    double GetVCol ( );
    void PutVCol (
        double pVal );
    _bstr_t GetRowHide ( );
    void PutRowHide (
        _bstr_t pVal );
    _bstr_t GetColHide ( );
    void PutColHide (
        _bstr_t pVal );
    _bstr_t GetBasePos ( );
    void PutBasePos (
        _bstr_t pVal );
    double GetGlassDist ( );
    void PutGlassDist (
        double pVal );
    double GetFrameDist ( );
    void PutFrameDist (
        double pVal );
    _bstr_t GetPlaneDisplay ( );
    void PutPlaneDisplay (
        _bstr_t pVal );
    _bstr_t GetIsArc ( );
    _bstr_t GetTopFrame ( );
    void PutTopFrame (
        _bstr_t pVal );
    _bstr_t GetBotFrame ( );
    void PutBotFrame (
        _bstr_t pVal );
    ACAD_LAYER GetGlassLayer ( );
    void PutGlassLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRowLayer ( );
    void PutRowLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetColLayer ( );
    void PutColLayer (
        ACAD_LAYER pVal );
    _bstr_t GetEnUsage ( );
    void PutEnUsage (
        _bstr_t pVal );
    _bstr_t GetIOFeature ( );
    void PutIOFeature (
        _bstr_t pVal );
    _bstr_t GetStructure ( );
    void PutStructure (
        _bstr_t pVal );
    double GetAreaRatio ( );
    double GetConductivity ( );
    double GetInertiaIndex ( );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RightWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RightWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RowNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ColNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_RowAverage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowAverage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColAverage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColAverage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RowHeight (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_RowHeight (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ColWidth (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ColWidth (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_URow (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_URow (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_VRow (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VRow (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UCol (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_UCol (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_VCol (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VCol (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RowHide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowHide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColHide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColHide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BasePos (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BasePos (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GlassDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GlassDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FrameDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FrameDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PlaneDisplay (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PlaneDisplay (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsArc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_TopFrame (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TopFrame (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BotFrame (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BotFrame (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GlassLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_GlassLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ColLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ColLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_EnUsage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EnUsage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IOFeature (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IOFeature (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Structure (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Structure (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AreaRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Conductivity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_InertiaIndex (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("821234d3-dcf8-4a97-a903-9c36b0ab2369"))
IComMultiStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetStairWidth,put=PutStairWidth))
    double StairWidth;
    __declspec(property(get=GetStepNum,put=PutStepNum))
    long StepNum;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetHasLeftBeam,put=PutHasLeftBeam))
    _bstr_t HasLeftBeam;
    __declspec(property(get=GetHasRightBeam,put=PutHasRightBeam))
    _bstr_t HasRightBeam;
    __declspec(property(get=GetHasLeftHandRail,put=PutHasLeftHandRail))
    _bstr_t HasLeftHandRail;
    __declspec(property(get=GetHasRightHandRail,put=PutHasRightHandRail))
    _bstr_t HasRightHandRail;
    __declspec(property(get=GetAsAscent,put=PutAsAscent))
    _bstr_t AsAscent;
    __declspec(property(get=GetHasSlant,put=PutHasSlant))
    _bstr_t HasSlant;
    __declspec(property(get=GetOnGround,put=PutOnGround))
    _bstr_t OnGround;
    __declspec(property(get=GetBasePos,put=PutBasePos))
    _bstr_t BasePos;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailDist,put=PutRailDist))
    double RailDist;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailHeight,put=PutRailHeight))
    double RailHeight;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetLayerType,put=PutLayerType))
    _bstr_t LayerType;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetAlongWall,put=PutAlongWall))
    _bstr_t AlongWall;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetElev,put=PutElev))
    double Elev;
    __declspec(property(get=GetFirstRailDist,put=PutFirstRailDist))
    double FirstRailDist;
    __declspec(property(get=GetEndRailDist,put=PutEndRailDist))
    double EndRailDist;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetSectHeight,put=PutSectHeight))
    double SectHeight;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetStairWidth ( );
    void PutStairWidth (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    double GetElev ( );
    void PutElev (
        double pVal );
    long GetStepNum ( );
    void PutStepNum (
        long pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetHasLeftHandRail ( );
    void PutHasLeftHandRail (
        _bstr_t pVal );
    _bstr_t GetHasRightHandRail ( );
    void PutHasRightHandRail (
        _bstr_t pVal );
    double GetRailDist ( );
    void PutRailDist (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailHeight ( );
    void PutRailHeight (
        double pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    _bstr_t GetHasLeftBeam ( );
    void PutHasLeftBeam (
        _bstr_t pVal );
    _bstr_t GetHasRightBeam ( );
    void PutHasRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    _bstr_t GetAsAscent ( );
    void PutAsAscent (
        _bstr_t pVal );
    _bstr_t GetHasSlant ( );
    void PutHasSlant (
        _bstr_t pVal );
    _bstr_t GetOnGround ( );
    void PutOnGround (
        _bstr_t pVal );
    _bstr_t GetBasePos ( );
    void PutBasePos (
        _bstr_t pVal );
    _bstr_t GetAlongWall ( );
    void PutAlongWall (
        _bstr_t pVal );
    _bstr_t GetLayerType ( );
    void PutLayerType (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    double GetFirstRailDist ( );
    void PutFirstRailDist (
        double pVal );
    double GetEndRailDist ( );
    void PutEndRailDist (
        double pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );
    double GetSectHeight ( );
    void PutSectHeight (
        double pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HasLeftHandRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasLeftHandRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasRightHandRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRightHandRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasLeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasLeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasRightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AsAscent (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AsAscent (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlant (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlant (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OnGround (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OnGround (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BasePos (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BasePos (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AlongWall (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlongWall (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LayerType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LayerType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FirstRailDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstRailDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndRailDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndRailDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SectHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
};

struct __declspec(uuid("29ae0924-65c9-4e65-a16e-50aa5ce56516"))
IComCornerWin : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetGlassLayer,put=PutGlassLayer))
    ACAD_LAYER GlassLayer;
    __declspec(property(get=GetFrameLayer,put=PutFrameLayer))
    ACAD_LAYER FrameLayer;
    __declspec(property(get=GetSlabLayer,put=PutSlabLayer))
    ACAD_LAYER SlabLayer;
    __declspec(property(get=GetFrameHeight,put=PutFrameHeight))
    double FrameHeight;
    __declspec(property(get=GetFrameThickness,put=PutFrameThickness))
    double FrameThickness;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetSillHeight,put=PutSillHeight))
    double SillHeight;
    __declspec(property(get=GetOnGround,put=PutOnGround))
    _bstr_t OnGround;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetIsProtrudeWin,put=PutIsProtrudeWin))
    _bstr_t IsProtrudeWin;
    __declspec(property(get=GetFrontDist,put=PutFrontDist))
    double FrontDist;
    __declspec(property(get=GetDist1,put=PutDist1))
    double Dist1;
    __declspec(property(get=GetDist2,put=PutDist2))
    double Dist2;
    __declspec(property(get=GetGlassDist,put=PutGlassDist))
    double GlassDist;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetKind))
    _bstr_t Kind;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    double TextHeight;
    __declspec(property(get=GetWidth1,put=PutWidth1))
    double Width1;
    __declspec(property(get=GetWidth2,put=PutWidth2))
    double Width2;
    __declspec(property(get=GetIsHole,put=PutIsHole))
    _bstr_t IsHole;
    __declspec(property(get=GetTextAngle,put=PutTextAngle))
    double TextAngle;
    __declspec(property(get=GetHasSlab1,put=PutHasSlab1))
    _bstr_t HasSlab1;
    __declspec(property(get=GetHasSlab2,put=PutHasSlab2))
    _bstr_t HasSlab2;
    __declspec(property(get=GetProWinSlabWidth,put=PutProWinSlabWidth))
    double ProWinSlabWidth;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetHideLabel,put=PutHideLabel))
    _bstr_t HideLabel;
    __declspec(property(get=GetProWinSlabInsuThick,put=PutProWinSlabInsuThick))
    double ProWinSlabInsuThick;
    __declspec(property(get=GetFrontDist2,put=PutFrontDist2))
    double FrontDist2;
    __declspec(property(get=GetStructure,put=PutStructure))
    _bstr_t Structure;
    __declspec(property(get=GetExtShading,put=PutExtShading))
    _bstr_t ExtShading;
    __declspec(property(get=GetConductivity))
    double Conductivity;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    double GetSillHeight ( );
    void PutSillHeight (
        double pVal );
    double GetWidth1 ( );
    void PutWidth1 (
        double pVal );
    double GetWidth2 ( );
    void PutWidth2 (
        double pVal );
    double GetFrameHeight ( );
    void PutFrameHeight (
        double pVal );
    double GetFrameThickness ( );
    void PutFrameThickness (
        double pVal );
    _bstr_t GetIsProtrudeWin ( );
    void PutIsProtrudeWin (
        _bstr_t pVal );
    double GetFrontDist ( );
    void PutFrontDist (
        double pVal );
    double GetFrontDist2 ( );
    void PutFrontDist2 (
        double pVal );
    _bstr_t GetOnGround ( );
    void PutOnGround (
        _bstr_t pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    double GetDist1 ( );
    void PutDist1 (
        double pVal );
    double GetDist2 ( );
    void PutDist2 (
        double pVal );
    double GetGlassDist ( );
    void PutGlassDist (
        double pVal );
    _bstr_t GetHasSlab1 ( );
    void PutHasSlab1 (
        _bstr_t pVal );
    _bstr_t GetHasSlab2 ( );
    void PutHasSlab2 (
        _bstr_t pVal );
    double GetProWinSlabWidth ( );
    void PutProWinSlabWidth (
        double pVal );
    double GetProWinSlabInsuThick ( );
    void PutProWinSlabInsuThick (
        double pVal );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pVal );
    double GetTextAngle ( );
    void PutTextAngle (
        double pVal );
    double GetTextHeight ( );
    void PutTextHeight (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetHideLabel ( );
    void PutHideLabel (
        _bstr_t pVal );
    ACAD_LAYER GetGlassLayer ( );
    void PutGlassLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetFrameLayer ( );
    void PutFrameLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetSlabLayer ( );
    void PutSlabLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    _bstr_t GetIsHole ( );
    void PutIsHole (
        _bstr_t pVal );
    _bstr_t GetKind ( );
    _bstr_t GetStructure ( );
    void PutStructure (
        _bstr_t pVal );
    _bstr_t GetExtShading ( );
    void PutExtShading (
        _bstr_t pVal );
    double GetConductivity ( );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SillHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SillHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FrameHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FrameHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FrameThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FrameThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IsProtrudeWin (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsProtrudeWin (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FrontDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FrontDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FrontDist2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FrontDist2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OnGround (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OnGround (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Dist1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Dist1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Dist2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Dist2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_GlassDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GlassDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlab1 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlab1 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlab2 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlab2 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ProWinSlabWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ProWinSlabWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ProWinSlabInsuThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ProWinSlabInsuThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HideLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HideLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GlassLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_GlassLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_FrameLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_FrameLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_SlabLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_IsHole (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsHole (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Structure (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Structure (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ExtShading (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ExtShading (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Conductivity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("c56ec8ce-1684-4b5c-8b63-1b971dce7ab3"))
IComRect : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetDiaLine,put=PutDiaLine))
    _bstr_t DiaLine;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetBaseType,put=PutBaseType))
    _bstr_t BaseType;
    __declspec(property(get=GetElev,put=PutElev))
    double Elev;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetHeight ( );
    void PutHeight (
        double pVal );
    _bstr_t GetDiaLine ( );
    void PutDiaLine (
        _bstr_t pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetLength ( );
    void PutLength (
        double pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    _bstr_t GetBaseType ( );
    void PutBaseType (
        _bstr_t pVal );
    double GetElev ( );
    void PutElev (
        double pVal );
    double GetRotation ( );
    void PutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DiaLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DiaLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BaseType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BaseType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Elev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("01950805-7f41-4d9f-922c-9ad29a77e3ca"))
IComSlope : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetVertexNum,put=PutVertexNum))
    long VertexNum;
    __declspec(property(get=GetShowMode,put=PutShowMode))
    _bstr_t ShowMode;
    __declspec(property(get=GetReactor,put=PutReactor))
    _bstr_t Reactor;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetTransform,put=PutTransform))
    _bstr_t Transform;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    long GetVertexNum ( );
    void PutVertexNum (
        long pVal );
    _bstr_t GetShowMode ( );
    void PutShowMode (
        _bstr_t pVal );
    _bstr_t GetReactor ( );
    void PutReactor (
        _bstr_t pVal );
    _bstr_t GetTransform ( );
    void PutTransform (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VertexNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_VertexNum (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ShowMode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowMode (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Reactor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Reactor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Transform (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Transform (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("40a07245-c998-48bf-a505-9ae2342d2052"))
IComPolyMesh : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetShapeVisibility,put=PutShapeVisibility))
    _bstr_t ShapeVisibility;
    __declspec(property(get=GetPathLength))
    _bstr_t PathLength;
    __declspec(property(get=GetSideArea))
    _bstr_t SideArea;
    __declspec(property(get=GetSectionNum))
    int SectionNum;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetVertex,put=PutVertex))
    _variant_t Vertex;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetSection,put=PutSection))
    _variant_t Section;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    _bstr_t GetPathLength ( );
    _bstr_t GetSideArea ( );
    int GetSectionNum ( );
    _bstr_t GetVolume ( );
    _variant_t GetVertex ( );
    void PutVertex (
        const _variant_t & pVal );
    _variant_t GetSection ( );
    void PutSection (
        const _variant_t & pVal );
    _bstr_t GetShapeVisibility ( );
    void PutShapeVisibility (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PathLength (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SideArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SectionNum (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Vertex (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Vertex (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Section (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Section (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ShapeVisibility (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShapeVisibility (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("62ba2829-cfce-4c88-b407-92a8c5b14ad3"))
IComOpeningSlot : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetShowShape,put=PutShowShape))
    _bstr_t ShowShape;
    __declspec(property(get=GetOutsideSlot,put=PutOutsideSlot))
    _bstr_t OutsideSlot;
    __declspec(property(get=GetInsideSlot,put=PutInsideSlot))
    _bstr_t InsideSlot;
    __declspec(property(get=GetWidth1,put=PutWidth1))
    double Width1;
    __declspec(property(get=GetWidth2,put=PutWidth2))
    double Width2;
    __declspec(property(get=GetA,put=PutA))
    double A;
    __declspec(property(get=GetT,put=PutT))
    double T;
    __declspec(property(get=GetStyle,put=PutStyle))
    _bstr_t Style;
    __declspec(property(get=GetBoardWidth,put=PutBoardWidth))
    double BoardWidth;
    __declspec(property(get=GetInsideBoard,put=PutInsideBoard))
    _bstr_t InsideBoard;
    __declspec(property(get=GetOutsideBoard,put=PutOutsideBoard))
    _bstr_t OutsideBoard;
    __declspec(property(get=GetInsideSill,put=PutInsideSill))
    _bstr_t InsideSill;
    __declspec(property(get=GetOutsideSill,put=PutOutsideSill))
    _bstr_t OutsideSill;
    __declspec(property(get=GetA1,put=PutA1))
    double A1;
    __declspec(property(get=GetA2,put=PutA2))
    double A2;
    __declspec(property(get=GetH1,put=PutH1))
    double H1;
    __declspec(property(get=GetH2,put=PutH2))
    double H2;
    __declspec(property(get=GetW1,put=PutW1))
    double W1;
    __declspec(property(get=GetW2,put=PutW2))
    double W2;
    __declspec(property(get=GetLayerBoard,put=PutLayerBoard))
    ACAD_LAYER LayerBoard;
    __declspec(property(get=GetLayerSill,put=PutLayerSill))
    ACAD_LAYER LayerSill;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    _bstr_t GetShowShape ( );
    void PutShowShape (
        _bstr_t pVal );
    _bstr_t GetOutsideSlot ( );
    void PutOutsideSlot (
        _bstr_t pVal );
    _bstr_t GetInsideSlot ( );
    void PutInsideSlot (
        _bstr_t pVal );
    double GetWidth1 ( );
    void PutWidth1 (
        double pVal );
    double GetWidth2 ( );
    void PutWidth2 (
        double pVal );
    double GetA ( );
    void PutA (
        double pVal );
    double GetT ( );
    void PutT (
        double pVal );
    _bstr_t GetStyle ( );
    void PutStyle (
        _bstr_t pVal );
    double GetBoardWidth ( );
    void PutBoardWidth (
        double pVal );
    _bstr_t GetInsideBoard ( );
    void PutInsideBoard (
        _bstr_t pVal );
    _bstr_t GetOutsideBoard ( );
    void PutOutsideBoard (
        _bstr_t pVal );
    _bstr_t GetInsideSill ( );
    void PutInsideSill (
        _bstr_t pVal );
    _bstr_t GetOutsideSill ( );
    void PutOutsideSill (
        _bstr_t pVal );
    double GetA1 ( );
    void PutA1 (
        double pVal );
    double GetA2 ( );
    void PutA2 (
        double pVal );
    double GetH1 ( );
    void PutH1 (
        double pVal );
    double GetH2 ( );
    void PutH2 (
        double pVal );
    double GetW1 ( );
    void PutW1 (
        double pVal );
    double GetW2 ( );
    void PutW2 (
        double pVal );
    ACAD_LAYER GetLayerBoard ( );
    void PutLayerBoard (
        ACAD_LAYER pVal );
    ACAD_LAYER GetLayerSill ( );
    void PutLayerSill (
        ACAD_LAYER pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowShape (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowShape (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OutsideSlot (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OutsideSlot (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_InsideSlot (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InsideSlot (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Width1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_T (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_T (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BoardWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BoardWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InsideBoard (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InsideBoard (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OutsideBoard (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OutsideBoard (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_InsideSill (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InsideSill (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OutsideSill (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OutsideSill (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_A1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_A1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_A2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_A2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_H1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_H1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_H2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_H2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_W1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_W1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_W2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_W2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayerBoard (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_LayerBoard (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_LayerSill (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_LayerSill (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("a2bcd5e3-d6a9-4b98-b5b6-5bca83ed0d0b"))
IComDormer : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetDormerType,put=PutDormerType))
    _bstr_t DormerType;
    __declspec(property(get=GetShowWindow,put=PutShowWindow))
    _bstr_t ShowWindow;
    __declspec(property(get=GetWallWidth,put=PutWallWidth))
    double WallWidth;
    __declspec(property(get=GetWallHeight,put=PutWallHeight))
    double WallHeight;
    __declspec(property(get=GetWallThickness,put=PutWallThickness))
    double WallThickness;
    __declspec(property(get=GetWinWidth,put=PutWinWidth))
    double WinWidth;
    __declspec(property(get=GetWinHeight,put=PutWinHeight))
    double WinHeight;
    __declspec(property(get=GetSlopeGrade,put=PutSlopeGrade))
    double SlopeGrade;
    __declspec(property(get=GetSlopeHeight,put=PutSlopeHeight))
    double SlopeHeight;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetExtendEaves,put=PutExtendEaves))
    double ExtendEaves;
    __declspec(property(get=GetExtendHill,put=PutExtendHill))
    double ExtendHill;
    __declspec(property(get=GetRoofLayer,put=PutRoofLayer))
    ACAD_LAYER RoofLayer;
    __declspec(property(get=GetCeilingLayer,put=PutCeilingLayer))
    ACAD_LAYER CeilingLayer;
    __declspec(property(get=GetSlabLayer,put=PutSlabLayer))
    ACAD_LAYER SlabLayer;
    __declspec(property(get=GetWallLayer,put=PutWallLayer))
    ACAD_LAYER WallLayer;
    __declspec(property(get=GetFrameLayer,put=PutFrameLayer))
    ACAD_LAYER FrameLayer;
    __declspec(property(get=GetGlassLayer,put=PutGlassLayer))
    ACAD_LAYER GlassLayer;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    double TextHeight;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetWallWidth ( );
    void PutWallWidth (
        double pVal );
    double GetWallHeight ( );
    void PutWallHeight (
        double pVal );
    double GetWallThickness ( );
    void PutWallThickness (
        double pVal );
    double GetWinWidth ( );
    void PutWinWidth (
        double pVal );
    double GetWinHeight ( );
    void PutWinHeight (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    double GetExtendEaves ( );
    void PutExtendEaves (
        double pVal );
    double GetExtendHill ( );
    void PutExtendHill (
        double pVal );
    double GetSlopeGrade ( );
    void PutSlopeGrade (
        double pVal );
    double GetSlopeHeight ( );
    void PutSlopeHeight (
        double pVal );
    _bstr_t GetDormerType ( );
    void PutDormerType (
        _bstr_t pVal );
    _bstr_t GetShowWindow ( );
    void PutShowWindow (
        _bstr_t pVal );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pVal );
    double GetTextHeight ( );
    void PutTextHeight (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    ACAD_LAYER GetRoofLayer ( );
    void PutRoofLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetCeilingLayer ( );
    void PutCeilingLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetSlabLayer ( );
    void PutSlabLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetWallLayer ( );
    void PutWallLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetFrameLayer ( );
    void PutFrameLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetGlassLayer ( );
    void PutGlassLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WallWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WallWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WallHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WallHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WallThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WallThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WinWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WinWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WinHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WinHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ExtendEaves (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ExtendEaves (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ExtendHill (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ExtendHill (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlopeGrade (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlopeGrade (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlopeHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlopeHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DormerType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DormerType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowWindow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowWindow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RoofLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RoofLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_CeilingLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_CeilingLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_SlabLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_WallLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_WallLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_FrameLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_FrameLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_GlassLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_GlassLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("e364c3ec-f193-40af-89da-6b03f23d7e4a"))
IComNetShelf : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetSphereLayer,put=PutSphereLayer))
    ACAD_LAYER SphereLayer;
    __declspec(property(get=GetMonoSphere,put=PutMonoSphere))
    _bstr_t MonoSphere;
    __declspec(property(get=GetSphereRadius,put=PutSphereRadius))
    double SphereRadius;
    __declspec(property(get=GetPoleRadius,put=PutPoleRadius))
    double PoleRadius;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    ACAD_LAYER GetSphereLayer ( );
    void PutSphereLayer (
        ACAD_LAYER pVal );
    _bstr_t GetMonoSphere ( );
    void PutMonoSphere (
        _bstr_t pVal );
    double GetSphereRadius ( );
    void PutSphereRadius (
        double pVal );
    double GetPoleRadius ( );
    void PutPoleRadius (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SphereLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_SphereLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_MonoSphere (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MonoSphere (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SphereRadius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SphereRadius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PoleRadius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PoleRadius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("361fb678-fe35-4c13-9d78-aa2e36e4bf04"))
IComMultiViewInsert : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetScaleX,put=PutScaleX))
    double ScaleX;
    __declspec(property(get=GetScaleY,put=PutScaleY))
    double ScaleY;
    __declspec(property(get=GetScaleZ,put=PutScaleZ))
    double ScaleZ;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetRotation ( );
    void PutRotation (
        double pVal );
    double GetScaleX ( );
    void PutScaleX (
        double pVal );
    double GetScaleY ( );
    void PutScaleY (
        double pVal );
    double GetScaleZ ( );
    void PutScaleZ (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleZ (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleZ (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("2f281680-9e59-4b6c-af2a-3b6627a9c2e3"))
IComPromptMark : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetShape,put=PutShape))
    _bstr_t Shape;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetLength ( );
    void PutLength (
        double pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetRotation ( );
    void PutRotation (
        double pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetShape ( );
    void PutShape (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Shape (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("5f8f66a3-c1c7-4d60-b88d-3ffdab42c6c1"))
IComDrawingName : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetNameText,put=PutNameText))
    _bstr_t NameText;
    __declspec(property(get=GetNameStyle,put=PutNameStyle))
    _bstr_t NameStyle;
    __declspec(property(get=GetNameHeight,put=PutNameHeight))
    _bstr_t NameHeight;
    __declspec(property(get=GetScaleText,put=PutScaleText))
    _bstr_t ScaleText;
    __declspec(property(get=GetScaleStyle,put=PutScaleStyle))
    _bstr_t ScaleStyle;
    __declspec(property(get=GetScaleHeight,put=PutScaleHeight))
    _bstr_t ScaleHeight;
    __declspec(property(get=GetSpaceCoef,put=PutSpaceCoef))
    _bstr_t SpaceCoef;
    __declspec(property(get=GetDimStyle,put=PutDimStyle))
    _bstr_t DimStyle;
    __declspec(property(get=GetShowScale,put=PutShowScale))
    _bstr_t ShowScale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetNameText ( );
    void PutNameText (
        _bstr_t pVal );
    _bstr_t GetNameStyle ( );
    void PutNameStyle (
        _bstr_t pVal );
    _bstr_t GetNameHeight ( );
    void PutNameHeight (
        _bstr_t pVal );
    _bstr_t GetScaleText ( );
    void PutScaleText (
        _bstr_t pVal );
    _bstr_t GetScaleStyle ( );
    void PutScaleStyle (
        _bstr_t pVal );
    _bstr_t GetScaleHeight ( );
    void PutScaleHeight (
        _bstr_t pVal );
    _bstr_t GetSpaceCoef ( );
    void PutSpaceCoef (
        _bstr_t pVal );
    _bstr_t GetDimStyle ( );
    void PutDimStyle (
        _bstr_t pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetShowScale ( );
    void PutShowScale (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NameText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NameText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NameStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NameStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NameHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NameHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceCoef (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SpaceCoef (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DimStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DimStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowScale (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowScale (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("f3d67ec4-03a2-4d27-a2c6-395b5d8ae5f8"))
IComCurveMesh2 : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetShapeVisibility,put=PutShapeVisibility))
    _bstr_t ShapeVisibility;
    __declspec(property(get=GetPathLength))
    _bstr_t PathLength;
    __declspec(property(get=GetSideArea))
    _bstr_t SideArea;
    __declspec(property(get=GetShapePerimeter))
    _bstr_t ShapePerimeter;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetVertex,put=PutVertex))
    _variant_t Vertex;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    _bstr_t GetPathLength ( );
    _bstr_t GetSideArea ( );
    _bstr_t GetShapePerimeter ( );
    _bstr_t GetVolume ( );
    _variant_t GetVertex ( );
    void PutVertex (
        const _variant_t & pVal );
    _bstr_t GetShapeVisibility ( );
    void PutShapeVisibility (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PathLength (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SideArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ShapePerimeter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Vertex (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Vertex (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ShapeVisibility (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShapeVisibility (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("628c41c4-c7c3-4fca-8654-128e816aebe7"))
IComPolyMesh2 : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetShapeVisibility,put=PutShapeVisibility))
    _bstr_t ShapeVisibility;
    __declspec(property(get=GetPathLength))
    _bstr_t PathLength;
    __declspec(property(get=GetSideArea))
    _bstr_t SideArea;
    __declspec(property(get=GetSectionNum))
    int SectionNum;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetVertex,put=PutVertex))
    _variant_t Vertex;
    __declspec(property(get=GetViewType,put=PutViewType))
    _bstr_t ViewType;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetSection,put=PutSection))
    _variant_t Section;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetViewType ( );
    void PutViewType (
        _bstr_t pVal );
    _bstr_t GetPathLength ( );
    _bstr_t GetSideArea ( );
    int GetSectionNum ( );
    _bstr_t GetVolume ( );
    _variant_t GetVertex ( );
    void PutVertex (
        const _variant_t & pVal );
    _variant_t GetSection ( );
    void PutSection (
        const _variant_t & pVal );
    _bstr_t GetShapeVisibility ( );
    void PutShapeVisibility (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PathLength (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SideArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SectionNum (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Vertex (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Vertex (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Section (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Section (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ShapeVisibility (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShapeVisibility (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("46788b45-748f-4121-963c-65b63bc6dcbc"))
IComCuspRoof : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetSlabThick,put=PutSlabThick))
    double SlabThick;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetElev,put=PutElev))
    double Elev;
    __declspec(property(get=GetSideNum,put=PutSideNum))
    int SideNum;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetRotate,put=PutRotate))
    double Rotate;
    __declspec(property(get=GetEavesLen,put=PutEavesLen))
    double EavesLen;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    double GetElev ( );
    void PutElev (
        double pVal );
    int GetSideNum ( );
    void PutSideNum (
        int pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    double GetRotate ( );
    void PutRotate (
        double pVal );
    double GetEavesLen ( );
    void PutEavesLen (
        double pVal );
    double GetSlabThick ( );
    void PutSlabThick (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Elev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SideNum (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_SideNum (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rotate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EavesLen (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EavesLen (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThick (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("bb56a9b0-0930-4f6f-a3a2-c9e4421fb661"))
IComDualSlopeRoof : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElev,put=PutElev))
    double Elev;
    __declspec(property(get=GetLeftSlopeAng,put=PutLeftSlopeAng))
    double LeftSlopeAng;
    __declspec(property(get=GetRightSlopeAng,put=PutRightSlopeAng))
    double RightSlopeAng;
    __declspec(property(get=GetSlabThick,put=PutSlabThick))
    double SlabThick;
    __declspec(property(get=GetRoofHeight,put=PutRoofHeight))
    double RoofHeight;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    double GetElev ( );
    void PutElev (
        double pVal );
    double GetLeftSlopeAng ( );
    void PutLeftSlopeAng (
        double pVal );
    double GetRightSlopeAng ( );
    void PutRightSlopeAng (
        double pVal );
    double GetSlabThick ( );
    void PutSlabThick (
        double pVal );
    double GetRoofHeight ( );
    void PutRoofHeight (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Elev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftSlopeAng (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftSlopeAng (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RightSlopeAng (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RightSlopeAng (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RoofHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RoofHeight (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("5fe00b87-1e21-412c-baf4-71c4dca10c50"))
IComSymbCut : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCutType,put=PutCutType))
    _bstr_t CutType;
    __declspec(property(get=GetIsHide,put=PutIsHide))
    _bstr_t IsHide;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetCutType ( );
    void PutCutType (
        _bstr_t pVal );
    _bstr_t GetIsHide ( );
    void PutIsHide (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CutType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CutType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsHide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsHide (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("210d9191-b54f-4b92-96fc-ddd28cdd1063"))
IComPolyPathArray : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetCellAlign,put=PutCellAlign))
    _bstr_t CellAlign;
    __declspec(property(get=GetBasePos,put=PutBasePos))
    _bstr_t BasePos;
    __declspec(property(get=GetPicWidth,put=PutPicWidth))
    double PicWidth;
    __declspec(property(get=GetPicRatio,put=PutPicRatio))
    _bstr_t PicRatio;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetCellAlign ( );
    void PutCellAlign (
        _bstr_t pVal );
    _bstr_t GetBasePos ( );
    void PutBasePos (
        _bstr_t pVal );
    double GetPicWidth ( );
    void PutPicWidth (
        double pVal );
    _bstr_t GetPicRatio ( );
    void PutPicRatio (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CellAlign (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CellAlign (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BasePos (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BasePos (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PicWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PicWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PicRatio (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PicRatio (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("97280f90-a4a2-47a1-adba-04eed897c278"))
IComCrossStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetStairWidth,put=PutStairWidth))
    double StairWidth;
    __declspec(property(get=GetSpaceWidth,put=PutSpaceWidth))
    double SpaceWidth;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStepSumNum,put=PutStepSumNum))
    short StepSumNum;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailDistToSide,put=PutRailDistToSide))
    double RailDistToSide;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetRailOutDist,put=PutRailOutDist))
    double RailOutDist;
    __declspec(property(get=GetRailOutSide,put=PutRailOutSide))
    _bstr_t RailOutSide;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetLeftBeam,put=PutLeftBeam))
    _bstr_t LeftBeam;
    __declspec(property(get=GetRightBeam,put=PutRightBeam))
    _bstr_t RightBeam;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetSlabLength1,put=PutSlabLength1))
    double SlabLength1;
    __declspec(property(get=GetSlabLength2,put=PutSlabLength2))
    double SlabLength2;
    __declspec(property(get=GetSlabLength3,put=PutSlabLength3))
    double SlabLength3;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetRailInside,put=PutRailInside))
    _bstr_t RailInside;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetEvacuateDia,put=PutEvacuateDia))
    _bstr_t EvacuateDia;
    __declspec(property(get=GetEvacuateDiaColor,put=PutEvacuateDiaColor))
    _variant_t EvacuateDiaColor;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetBoardThick,put=PutBoardThick))
    double BoardThick;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetHasOutsideHandrail,put=PutHasOutsideHandrail))
    _bstr_t HasOutsideHandrail;
    __declspec(property(get=GetHasCeller,put=PutHasCeller))
    _bstr_t HasCeller;
    __declspec(property(get=GetDownDir,put=PutDownDir))
    _bstr_t DownDir;
    __declspec(property(get=GetHasRoof,put=PutHasRoof))
    _bstr_t HasRoof;
    __declspec(property(get=GetUpDir,put=PutUpDir))
    _bstr_t UpDir;

    //
    // Wrapper methods for error-handling
    //

    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetSpaceWidth ( );
    void PutSpaceWidth (
        double pVal );
    double GetStairWidth ( );
    void PutStairWidth (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    short GetStepSumNum ( );
    void PutStepSumNum (
        short pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailDistToSide ( );
    void PutRailDistToSide (
        double pVal );
    _bstr_t GetRailInside ( );
    void PutRailInside (
        _bstr_t pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    double GetRailOutDist ( );
    void PutRailOutDist (
        double pVal );
    _bstr_t GetRailOutSide ( );
    void PutRailOutSide (
        _bstr_t pVal );
    _bstr_t GetHasOutsideHandrail ( );
    void PutHasOutsideHandrail (
        _bstr_t pVal );
    _bstr_t GetLeftBeam ( );
    void PutLeftBeam (
        _bstr_t pVal );
    _bstr_t GetRightBeam ( );
    void PutRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    double GetSlabLength1 ( );
    void PutSlabLength1 (
        double pVal );
    double GetSlabLength2 ( );
    void PutSlabLength2 (
        double pVal );
    double GetSlabLength3 ( );
    void PutSlabLength3 (
        double pVal );
    double GetBoardThick ( );
    void PutBoardThick (
        double pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );
    _bstr_t GetEvacuateDia ( );
    void PutEvacuateDia (
        _bstr_t pVal );
    _variant_t GetEvacuateDiaColor ( );
    void PutEvacuateDiaColor (
        const _variant_t & pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetHasCeller ( );
    void PutHasCeller (
        _bstr_t pVal );
    _bstr_t GetDownDir ( );
    void PutDownDir (
        _bstr_t pVal );
    _bstr_t GetHasRoof ( );
    void PutHasRoof (
        _bstr_t pVal );
    _bstr_t GetUpDir ( );
    void PutUpDir (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpaceWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepSumNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepSumNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailDistToSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDistToSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailInside (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailInside (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailOutDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailOutDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailOutSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailOutSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutsideHandrail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutsideHandrail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_SlabLength1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabLength1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabLength2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabLength2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabLength3 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabLength3 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BoardThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BoardThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_EvacuateDia (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EvacuateDia (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EvacuateDiaColor (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_EvacuateDiaColor (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasCeller (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasCeller (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DownDir (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DownDir (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasRoof (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRoof (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpDir (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UpDir (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("8fbe488c-2e08-4488-8bc3-2cf007d3a79d"))
IComParallelStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStepNum1,put=PutStepNum1))
    short StepNum1;
    __declspec(property(get=GetStepNum2,put=PutStepNum2))
    short StepNum2;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetStairWidth,put=PutStairWidth))
    double StairWidth;
    __declspec(property(get=GetSpaceWidth,put=PutSpaceWidth))
    double SpaceWidth;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailDistToSide,put=PutRailDistToSide))
    double RailDistToSide;
    __declspec(property(get=GetHasSlab,put=PutHasSlab))
    _bstr_t HasSlab;
    __declspec(property(get=GetSlabSize,put=PutSlabSize))
    double SlabSize;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetPlatType,put=PutPlatType))
    _bstr_t PlatType;
    __declspec(property(get=GetLeftBeam,put=PutLeftBeam))
    _bstr_t LeftBeam;
    __declspec(property(get=GetRightBeam,put=PutRightBeam))
    _bstr_t RightBeam;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetStairWidth2,put=PutStairWidth2))
    double StairWidth2;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetStepTotalNum,put=PutStepTotalNum))
    short StepTotalNum;
    __declspec(property(get=GetRotationDist,put=PutRotationDist))
    double RotationDist;
    __declspec(property(get=GetLayerDist,put=PutLayerDist))
    double LayerDist;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetHasOutRail,put=PutHasOutRail))
    _bstr_t HasOutRail;
    __declspec(property(get=GetHasOutsideHandrail,put=PutHasOutsideHandrail))
    _bstr_t HasOutsideHandrail;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetSpaceWidth ( );
    void PutSpaceWidth (
        double pVal );
    double GetStairWidth ( );
    void PutStairWidth (
        double pVal );
    double GetStairWidth2 ( );
    void PutStairWidth2 (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    short GetStepTotalNum ( );
    void PutStepTotalNum (
        short pVal );
    short GetStepNum1 ( );
    void PutStepNum1 (
        short pVal );
    short GetStepNum2 ( );
    void PutStepNum2 (
        short pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailDistToSide ( );
    void PutRailDistToSide (
        double pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    _bstr_t GetHasOutRail ( );
    void PutHasOutRail (
        _bstr_t pVal );
    _bstr_t GetHasOutsideHandrail ( );
    void PutHasOutsideHandrail (
        _bstr_t pVal );
    double GetRotationDist ( );
    void PutRotationDist (
        double pVal );
    double GetLayerDist ( );
    void PutLayerDist (
        double pVal );
    _bstr_t GetPlatType ( );
    void PutPlatType (
        _bstr_t pVal );
    _bstr_t GetHasSlab ( );
    void PutHasSlab (
        _bstr_t pVal );
    double GetSlabSize ( );
    void PutSlabSize (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    _bstr_t GetLeftBeam ( );
    void PutLeftBeam (
        _bstr_t pVal );
    _bstr_t GetRightBeam ( );
    void PutRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpaceWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepTotalNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepTotalNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum1 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum1 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum2 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum2 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailDistToSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDistToSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutsideHandrail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutsideHandrail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RotationDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RotationDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayerDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayerDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PlatType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PlatType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("dc4ec0de-159f-4be9-87c8-535d74b95727"))
IComScissorsStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStepNum1,put=PutStepNum1))
    short StepNum1;
    __declspec(property(get=GetStepNum2,put=PutStepNum2))
    short StepNum2;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetStairWidth,put=PutStairWidth))
    double StairWidth;
    __declspec(property(get=GetSpaceWidth,put=PutSpaceWidth))
    double SpaceWidth;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    _bstr_t Alignment;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailDistToSide,put=PutRailDistToSide))
    double RailDistToSide;
    __declspec(property(get=GetHasSlab,put=PutHasSlab))
    _bstr_t HasSlab;
    __declspec(property(get=GetSlabSize,put=PutSlabSize))
    double SlabSize;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetLeftBeam,put=PutLeftBeam))
    _bstr_t LeftBeam;
    __declspec(property(get=GetRightBeam,put=PutRightBeam))
    _bstr_t RightBeam;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetStepTotalNum,put=PutStepTotalNum))
    short StepTotalNum;
    __declspec(property(get=GetRotationDist,put=PutRotationDist))
    double RotationDist;
    __declspec(property(get=GetLayerDist,put=PutLayerDist))
    double LayerDist;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetHasOutRail,put=PutHasOutRail))
    _bstr_t HasOutRail;
    __declspec(property(get=GetHasOutsideHandrail,put=PutHasOutsideHandrail))
    _bstr_t HasOutsideHandrail;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetSpaceWidth ( );
    void PutSpaceWidth (
        double pVal );
    double GetStairWidth ( );
    void PutStairWidth (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    short GetStepTotalNum ( );
    void PutStepTotalNum (
        short pVal );
    short GetStepNum1 ( );
    void PutStepNum1 (
        short pVal );
    short GetStepNum2 ( );
    void PutStepNum2 (
        short pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailDistToSide ( );
    void PutRailDistToSide (
        double pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    _bstr_t GetHasOutRail ( );
    void PutHasOutRail (
        _bstr_t pVal );
    _bstr_t GetHasOutsideHandrail ( );
    void PutHasOutsideHandrail (
        _bstr_t pVal );
    double GetRotationDist ( );
    void PutRotationDist (
        double pVal );
    double GetLayerDist ( );
    void PutLayerDist (
        double pVal );
    _bstr_t GetHasSlab ( );
    void PutHasSlab (
        _bstr_t pVal );
    double GetSlabSize ( );
    void PutSlabSize (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    _bstr_t GetLeftBeam ( );
    void PutLeftBeam (
        _bstr_t pVal );
    _bstr_t GetRightBeam ( );
    void PutRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetAlignment ( );
    void PutAlignment (
        _bstr_t pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpaceWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepTotalNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepTotalNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum1 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum1 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum2 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum2 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailDistToSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDistToSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutsideHandrail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutsideHandrail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RotationDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RotationDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayerDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayerDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("2b53a63a-b876-4853-9097-3729d177374f"))
IComCornerStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStepNum1,put=PutStepNum1))
    short StepNum1;
    __declspec(property(get=GetStepNum2,put=PutStepNum2))
    short StepNum2;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetMidStairWidth,put=PutMidStairWidth))
    double MidStairWidth;
    __declspec(property(get=GetSideStairWidth,put=PutSideStairWidth))
    double SideStairWidth;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailDistToSide,put=PutRailDistToSide))
    double RailDistToSide;
    __declspec(property(get=GetHasSlab,put=PutHasSlab))
    _bstr_t HasSlab;
    __declspec(property(get=GetSlabSize,put=PutSlabSize))
    double SlabSize;
    __declspec(property(get=GetSlabLength,put=PutSlabLength))
    double SlabLength;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetPlatType,put=PutPlatType))
    _bstr_t PlatType;
    __declspec(property(get=GetLeftBeam,put=PutLeftBeam))
    _bstr_t LeftBeam;
    __declspec(property(get=GetRightBeam,put=PutRightBeam))
    _bstr_t RightBeam;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetStepTotalNum,put=PutStepTotalNum))
    short StepTotalNum;
    __declspec(property(get=GetRotationDist,put=PutRotationDist))
    double RotationDist;
    __declspec(property(get=GetLayerDist,put=PutLayerDist))
    double LayerDist;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetHasOutRail,put=PutHasOutRail))
    _bstr_t HasOutRail;
    __declspec(property(get=GetHasOutsideHandrail,put=PutHasOutsideHandrail))
    _bstr_t HasOutsideHandrail;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetSideStairWidth ( );
    void PutSideStairWidth (
        double pVal );
    double GetMidStairWidth ( );
    void PutMidStairWidth (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    short GetStepTotalNum ( );
    void PutStepTotalNum (
        short pVal );
    short GetStepNum1 ( );
    void PutStepNum1 (
        short pVal );
    short GetStepNum2 ( );
    void PutStepNum2 (
        short pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailDistToSide ( );
    void PutRailDistToSide (
        double pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    _bstr_t GetHasOutRail ( );
    void PutHasOutRail (
        _bstr_t pVal );
    _bstr_t GetHasOutsideHandrail ( );
    void PutHasOutsideHandrail (
        _bstr_t pVal );
    _bstr_t GetPlatType ( );
    void PutPlatType (
        _bstr_t pVal );
    _bstr_t GetHasSlab ( );
    void PutHasSlab (
        _bstr_t pVal );
    double GetSlabSize ( );
    void PutSlabSize (
        double pVal );
    double GetSlabLength ( );
    void PutSlabLength (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    double GetRotationDist ( );
    void PutRotationDist (
        double pVal );
    double GetLayerDist ( );
    void PutLayerDist (
        double pVal );
    _bstr_t GetLeftBeam ( );
    void PutLeftBeam (
        _bstr_t pVal );
    _bstr_t GetRightBeam ( );
    void PutRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SideStairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SideStairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MidStairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MidStairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepTotalNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepTotalNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum1 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum1 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum2 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum2 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailDistToSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDistToSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutsideHandrail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutsideHandrail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PlatType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PlatType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RotationDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RotationDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayerDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayerDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("c5685fd5-dc98-4b10-b941-0d7717443bd9"))
IComDoubleMulStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStepNum1,put=PutStepNum1))
    short StepNum1;
    __declspec(property(get=GetStepNum2,put=PutStepNum2))
    short StepNum2;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetMidStairWidth,put=PutMidStairWidth))
    double MidStairWidth;
    __declspec(property(get=GetSideStairWidth,put=PutSideStairWidth))
    double SideStairWidth;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailDistToSide,put=PutRailDistToSide))
    double RailDistToSide;
    __declspec(property(get=GetSidePlatWidth,put=PutSidePlatWidth))
    double SidePlatWidth;
    __declspec(property(get=GetMidPlatLength,put=PutMidPlatLength))
    double MidPlatLength;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetSidePlatLength,put=PutSidePlatLength))
    double SidePlatLength;
    __declspec(property(get=GetLeftBeam,put=PutLeftBeam))
    _bstr_t LeftBeam;
    __declspec(property(get=GetRightBeam,put=PutRightBeam))
    _bstr_t RightBeam;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetMidPlatWidth,put=PutMidPlatWidth))
    double MidPlatWidth;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetRailOutDistSide,put=PutRailOutDistSide))
    double RailOutDistSide;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetStepTotalNum,put=PutStepTotalNum))
    short StepTotalNum;
    __declspec(property(get=GetStepNum3,put=PutStepNum3))
    short StepNum3;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetHasOutRail,put=PutHasOutRail))
    _bstr_t HasOutRail;
    __declspec(property(get=GetHasOutsideHandrail,put=PutHasOutsideHandrail))
    _bstr_t HasOutsideHandrail;
    __declspec(property(get=GetRailOutDist,put=PutRailOutDist))
    double RailOutDist;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetSideStairWidth ( );
    void PutSideStairWidth (
        double pVal );
    double GetMidStairWidth ( );
    void PutMidStairWidth (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    short GetStepTotalNum ( );
    void PutStepTotalNum (
        short pVal );
    short GetStepNum1 ( );
    void PutStepNum1 (
        short pVal );
    short GetStepNum2 ( );
    void PutStepNum2 (
        short pVal );
    short GetStepNum3 ( );
    void PutStepNum3 (
        short pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailDistToSide ( );
    void PutRailDistToSide (
        double pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    double GetRailOutDist ( );
    void PutRailOutDist (
        double pVal );
    double GetRailOutDistSide ( );
    void PutRailOutDistSide (
        double pVal );
    _bstr_t GetHasOutRail ( );
    void PutHasOutRail (
        _bstr_t pVal );
    _bstr_t GetHasOutsideHandrail ( );
    void PutHasOutsideHandrail (
        _bstr_t pVal );
    double GetSidePlatLength ( );
    void PutSidePlatLength (
        double pVal );
    double GetSidePlatWidth ( );
    void PutSidePlatWidth (
        double pVal );
    double GetMidPlatLength ( );
    void PutMidPlatLength (
        double pVal );
    double GetMidPlatWidth ( );
    void PutMidPlatWidth (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    _bstr_t GetLeftBeam ( );
    void PutLeftBeam (
        _bstr_t pVal );
    _bstr_t GetRightBeam ( );
    void PutRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SideStairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SideStairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MidStairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MidStairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepTotalNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepTotalNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum1 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum1 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum2 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum2 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum3 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum3 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailDistToSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDistToSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailOutDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailOutDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailOutDistSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailOutDistSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutsideHandrail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutsideHandrail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SidePlatLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SidePlatLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SidePlatWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SidePlatWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MidPlatLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MidPlatLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MidPlatWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MidPlatWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("2d1f9e13-c377-44c1-862f-5d0f69396c3d"))
IComTriangleStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetRailIsOpen,put=PutRailIsOpen))
    _bstr_t RailIsOpen;
    __declspec(property(get=GetStepNum1,put=PutStepNum1))
    short StepNum1;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetStairWidth,put=PutStairWidth))
    double StairWidth;
    __declspec(property(get=GetSpaceWidth,put=PutSpaceWidth))
    double SpaceWidth;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailDistToSide,put=PutRailDistToSide))
    double RailDistToSide;
    __declspec(property(get=GetHasSlab,put=PutHasSlab))
    _bstr_t HasSlab;
    __declspec(property(get=GetSlabSize,put=PutSlabSize))
    double SlabSize;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetLeftBeam,put=PutLeftBeam))
    _bstr_t LeftBeam;
    __declspec(property(get=GetRightBeam,put=PutRightBeam))
    _bstr_t RightBeam;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetRailOutDist,put=PutRailOutDist))
    double RailOutDist;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetHasOutRail,put=PutHasOutRail))
    _bstr_t HasOutRail;
    __declspec(property(get=GetHasOutsideHandrail,put=PutHasOutsideHandrail))
    _bstr_t HasOutsideHandrail;
    __declspec(property(get=GetHasRailConnect,put=PutHasRailConnect))
    _bstr_t HasRailConnect;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetSpaceWidth ( );
    void PutSpaceWidth (
        double pVal );
    double GetStairWidth ( );
    void PutStairWidth (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    short GetStepNum1 ( );
    void PutStepNum1 (
        short pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailDistToSide ( );
    void PutRailDistToSide (
        double pVal );
    _bstr_t GetHasRailConnect ( );
    void PutHasRailConnect (
        _bstr_t pVal );
    _bstr_t GetRailIsOpen ( );
    void PutRailIsOpen (
        _bstr_t pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    _bstr_t GetHasOutRail ( );
    void PutHasOutRail (
        _bstr_t pVal );
    _bstr_t GetHasOutsideHandrail ( );
    void PutHasOutsideHandrail (
        _bstr_t pVal );
    double GetRailOutDist ( );
    void PutRailOutDist (
        double pVal );
    _bstr_t GetHasSlab ( );
    void PutHasSlab (
        _bstr_t pVal );
    double GetSlabSize ( );
    void PutSlabSize (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    _bstr_t GetLeftBeam ( );
    void PutLeftBeam (
        _bstr_t pVal );
    _bstr_t GetRightBeam ( );
    void PutRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpaceWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum1 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum1 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailDistToSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDistToSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasRailConnect (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRailConnect (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailIsOpen (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailIsOpen (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutsideHandrail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutsideHandrail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailOutDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailOutDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("f9bcd5c3-cc5e-4347-88a0-659d9b6d44ca"))
IComRectCornerStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetStepNum1,put=PutStepNum1))
    short StepNum1;
    __declspec(property(get=GetStepNum2,put=PutStepNum2))
    short StepNum2;
    __declspec(property(get=GetStepHeight,put=PutStepHeight))
    double StepHeight;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetStartSide,put=PutStartSide))
    _bstr_t StartSide;
    __declspec(property(get=GetStepWidth,put=PutStepWidth))
    double StepWidth;
    __declspec(property(get=GetRailWidth,put=PutRailWidth))
    double RailWidth;
    __declspec(property(get=GetRailDistToSide,put=PutRailDistToSide))
    double RailDistToSide;
    __declspec(property(get=GetHasSlab,put=PutHasSlab))
    _bstr_t HasSlab;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetRailMake,put=PutRailMake))
    _bstr_t RailMake;
    __declspec(property(get=GetLeftBeam,put=PutLeftBeam))
    _bstr_t LeftBeam;
    __declspec(property(get=GetRightBeam,put=PutRightBeam))
    _bstr_t RightBeam;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamThickness,put=PutBeamThickness))
    double BeamThickness;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetBeamLayer,put=PutBeamLayer))
    ACAD_LAYER BeamLayer;
    __declspec(property(get=GetRailLayer,put=PutRailLayer))
    ACAD_LAYER RailLayer;
    __declspec(property(get=GetHandRailLayer,put=PutHandRailLayer))
    ACAD_LAYER HandRailLayer;
    __declspec(property(get=GetHasArrow,put=PutHasArrow))
    _bstr_t HasArrow;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetRailOutDist,put=PutRailOutDist))
    double RailOutDist;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetHasOutRail,put=PutHasOutRail))
    _bstr_t HasOutRail;
    __declspec(property(get=GetHasOutsideHandrail,put=PutHasOutsideHandrail))
    _bstr_t HasOutsideHandrail;
    __declspec(property(get=GetHasRailConnect,put=PutHasRailConnect))
    _bstr_t HasRailConnect;
    __declspec(property(get=GetStairWidthOne,put=PutStairWidthOne))
    double StairWidthOne;
    __declspec(property(get=GetStairWidthTwo,put=PutStairWidthTwo))
    double StairWidthTwo;
    __declspec(property(get=GetStairNum,put=PutStairNum))
    _bstr_t StairNum;
    __declspec(property(get=GetStairWidthThree,put=PutStairWidthThree))
    double StairWidthThree;
    __declspec(property(get=GetStepNum3,put=PutStepNum3))
    short StepNum3;
    __declspec(property(get=GetStairWidthFour,put=PutStairWidthFour))
    double StairWidthFour;
    __declspec(property(get=GetStepNum4,put=PutStepNum4))
    short StepNum4;
    __declspec(property(get=GetIsSmmetry,put=PutIsSmmetry))
    _bstr_t IsSmmetry;
    __declspec(property(get=GetSlabSizeOne,put=PutSlabSizeOne))
    double SlabSizeOne;
    __declspec(property(get=GetSlabWidthTwo,put=PutSlabWidthTwo))
    double SlabWidthTwo;
    __declspec(property(get=GetSlabSizeTwo,put=PutSlabSizeTwo))
    double SlabSizeTwo;
    __declspec(property(get=GetSlabWidthThree,put=PutSlabWidthThree))
    double SlabWidthThree;
    __declspec(property(get=GetSlabSizeThree,put=PutSlabSizeThree))
    double SlabSizeThree;
    __declspec(property(get=GetSlabWidthOne,put=PutSlabWidthOne))
    double SlabWidthOne;
    __declspec(property(get=GetSectStepNum,put=PutSectStepNum))
    short SectStepNum;
    __declspec(property(get=GetRailOutDistDown,put=PutRailOutDistDown))
    double RailOutDistDown;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetStairWidthOne ( );
    void PutStairWidthOne (
        double pVal );
    double GetStairWidthTwo ( );
    void PutStairWidthTwo (
        double pVal );
    _bstr_t GetIsSmmetry ( );
    void PutIsSmmetry (
        _bstr_t pVal );
    _bstr_t GetStairNum ( );
    void PutStairNum (
        _bstr_t pVal );
    double GetStairWidthThree ( );
    void PutStairWidthThree (
        double pVal );
    short GetStepNum3 ( );
    void PutStepNum3 (
        short pVal );
    double GetStairWidthFour ( );
    void PutStairWidthFour (
        double pVal );
    short GetStepNum4 ( );
    void PutStepNum4 (
        short pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    short GetStepNum1 ( );
    void PutStepNum1 (
        short pVal );
    short GetStepNum2 ( );
    void PutStepNum2 (
        short pVal );
    double GetStepHeight ( );
    void PutStepHeight (
        double pVal );
    double GetStepWidth ( );
    void PutStepWidth (
        double pVal );
    double GetRailWidth ( );
    void PutRailWidth (
        double pVal );
    double GetRailDistToSide ( );
    void PutRailDistToSide (
        double pVal );
    _bstr_t GetHasRailConnect ( );
    void PutHasRailConnect (
        _bstr_t pVal );
    _bstr_t GetRailMake ( );
    void PutRailMake (
        _bstr_t pVal );
    _bstr_t GetHasOutRail ( );
    void PutHasOutRail (
        _bstr_t pVal );
    _bstr_t GetHasOutsideHandrail ( );
    void PutHasOutsideHandrail (
        _bstr_t pVal );
    double GetRailOutDist ( );
    void PutRailOutDist (
        double pVal );
    double GetRailOutDistDown ( );
    void PutRailOutDistDown (
        double pVal );
    _bstr_t GetHasSlab ( );
    void PutHasSlab (
        _bstr_t pVal );
    double GetSlabWidthOne ( );
    void PutSlabWidthOne (
        double pVal );
    double GetSlabSizeOne ( );
    void PutSlabSizeOne (
        double pVal );
    double GetSlabWidthTwo ( );
    void PutSlabWidthTwo (
        double pVal );
    double GetSlabSizeTwo ( );
    void PutSlabSizeTwo (
        double pVal );
    double GetSlabWidthThree ( );
    void PutSlabWidthThree (
        double pVal );
    double GetSlabSizeThree ( );
    void PutSlabSizeThree (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    _bstr_t GetLeftBeam ( );
    void PutLeftBeam (
        _bstr_t pVal );
    _bstr_t GetRightBeam ( );
    void PutRightBeam (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamThickness ( );
    void PutBeamThickness (
        double pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetBeamLayer ( );
    void PutBeamLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetRailLayer ( );
    void PutRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetHandRailLayer ( );
    void PutHandRailLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetStartSide ( );
    void PutStartSide (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    short GetSectStepNum ( );
    void PutSectStepNum (
        short pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetHasArrow ( );
    void PutHasArrow (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidthOne (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidthOne (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidthTwo (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidthTwo (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IsSmmetry (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IsSmmetry (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairNum (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairNum (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidthThree (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidthThree (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum3 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum3 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidthFour (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidthFour (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum4 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum4 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum1 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum1 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum2 (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum2 (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StepHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailDistToSide (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailDistToSide (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasRailConnect (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasRailConnect (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailMake (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RailMake (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutRail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutRail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasOutsideHandrail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasOutsideHandrail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RailOutDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailOutDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RailOutDistDown (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RailOutDistDown (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasSlab (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSlab (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabWidthOne (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabWidthOne (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabSizeOne (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabSizeOne (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabWidthTwo (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabWidthTwo (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabSizeTwo (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabSizeTwo (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabWidthThree (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabWidthThree (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabSizeThree (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabSizeThree (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightBeam (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightBeam (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_BeamLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_RailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_RailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_HandRailLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HandRailLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StartSide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartSide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectStepNum (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_SectStepNum (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HasArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("ce06c17f-8708-41cc-9929-af992cfdb2cf"))
IComAutoStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetPlatLength,put=PutPlatLength))
    double PlatLength;
    __declspec(property(get=GetSlopeAngle,put=PutSlopeAngle))
    double SlopeAngle;
    __declspec(property(get=GetSingleStair,put=PutSingleStair))
    _bstr_t SingleStair;
    __declspec(property(get=GetSpaceWidth,put=PutSpaceWidth))
    double SpaceWidth;
    __declspec(property(get=GetSignArrow,put=PutSignArrow))
    _bstr_t SignArrow;
    __declspec(property(get=GetSameDirection,put=PutSameDirection))
    _bstr_t SameDirection;
    __declspec(property(get=GetCrossAppose,put=PutCrossAppose))
    _bstr_t CrossAppose;
    __declspec(property(get=GetStairFlag,put=PutStairFlag))
    _bstr_t StairFlag;
    __declspec(property(get=GetTextLayer,put=PutTextLayer))
    ACAD_LAYER TextLayer;
    __declspec(property(get=GetArrowLayer,put=PutArrowLayer))
    ACAD_LAYER ArrowLayer;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetStairFlagTwo,put=PutStairFlagTwo))
    _bstr_t StairFlagTwo;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextUp,put=PutTextUp))
    _bstr_t TextUp;
    __declspec(property(get=GetTextDown,put=PutTextDown))
    _bstr_t TextDown;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetStepLayer,put=PutStepLayer))
    ACAD_LAYER StepLayer;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetViewCtrl,put=PutViewCtrl))
    short ViewCtrl;
    __declspec(property(get=GetStairWidth,put=PutStairWidth))
    double StairWidth;
    __declspec(property(get=GetAutoStairTotalLen,put=PutAutoStairTotalLen))
    double AutoStairTotalLen;
    __declspec(property(get=GetAutoStairTotalWidth,put=PutAutoStairTotalWidth))
    double AutoStairTotalWidth;
    __declspec(property(get=GetStairHeight,put=PutStairHeight))
    double StairHeight;
    __declspec(property(get=GetStepDist,put=PutStepDist))
    double StepDist;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    short GetViewCtrl ( );
    void PutViewCtrl (
        short pVal );
    double GetAutoStairTotalLen ( );
    void PutAutoStairTotalLen (
        double pVal );
    double GetAutoStairTotalWidth ( );
    void PutAutoStairTotalWidth (
        double pVal );
    double GetStairHeight ( );
    void PutStairHeight (
        double pVal );
    double GetStepDist ( );
    void PutStepDist (
        double pVal );
    double GetPlatLength ( );
    void PutPlatLength (
        double pVal );
    double GetSlopeAngle ( );
    void PutSlopeAngle (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    _bstr_t GetSingleStair ( );
    void PutSingleStair (
        _bstr_t pVal );
    double GetStairWidth ( );
    void PutStairWidth (
        double pVal );
    double GetSpaceWidth ( );
    void PutSpaceWidth (
        double pVal );
    _bstr_t GetCrossAppose ( );
    void PutCrossAppose (
        _bstr_t pVal );
    ACAD_LAYER GetStepLayer ( );
    void PutStepLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetTextLayer ( );
    void PutTextLayer (
        ACAD_LAYER pVal );
    ACAD_LAYER GetArrowLayer ( );
    void PutArrowLayer (
        ACAD_LAYER pVal );
    _bstr_t GetStairFlagTwo ( );
    void PutStairFlagTwo (
        _bstr_t pVal );
    _bstr_t GetStairFlag ( );
    void PutStairFlag (
        _bstr_t pVal );
    _bstr_t GetSignArrow ( );
    void PutSignArrow (
        _bstr_t pVal );
    _bstr_t GetSameDirection ( );
    void PutSameDirection (
        _bstr_t pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    _bstr_t GetTextUp ( );
    void PutTextUp (
        _bstr_t pVal );
    _bstr_t GetTextDown ( );
    void PutTextDown (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewCtrl (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewCtrl (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_AutoStairTotalLen (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoStairTotalLen (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AutoStairTotalWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoStairTotalWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StairHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepDist (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StepDist (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PlatLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PlatLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlopeAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlopeAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SingleStair (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SingleStair (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StairWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpaceWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CrossAppose (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CrossAppose (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StepLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_TextLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlagTwo (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlagTwo (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StairFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StairFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SignArrow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SignArrow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SameDirection (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SameDirection (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextUp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextDown (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("997d80ee-ad8c-49a7-b1bc-b74ebc9cb301"))
IComApron : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElev,put=PutElev))
    double Elev;
    __declspec(property(get=GetPathLength))
    _bstr_t PathLength;
    __declspec(property(get=GetSideArea))
    _bstr_t SideArea;
    __declspec(property(get=GetCloseFlag,put=PutCloseFlag))
    _bstr_t CloseFlag;
    __declspec(property(get=GetVolume))
    _bstr_t Volume;
    __declspec(property(get=GetVertex,put=PutVertex))
    _variant_t Vertex;
    __declspec(property(get=GetInHeight,put=PutInHeight))
    double InHeight;
    __declspec(property(get=GetOutHeight,put=PutOutHeight))
    double OutHeight;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetDists,put=PutDists))
    _bstr_t Dists;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetInHeight ( );
    void PutInHeight (
        double pVal );
    double GetOutHeight ( );
    void PutOutHeight (
        double pVal );
    double GetElev ( );
    void PutElev (
        double pVal );
    _bstr_t GetPathLength ( );
    _bstr_t GetDists ( );
    void PutDists (
        _bstr_t pVal );
    _bstr_t GetSideArea ( );
    _bstr_t GetVolume ( );
    _bstr_t GetCloseFlag ( );
    void PutCloseFlag (
        _bstr_t pVal );
    _variant_t GetVertex ( );
    void PutVertex (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_InHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OutHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OutHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PathLength (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Dists (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Dists (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SideArea (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CloseFlag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CloseFlag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Vertex (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Vertex (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("a3006176-2854-4d81-8b3a-c270cc2e4481"))
IComMountRoof : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetElev,put=PutElev))
    double Elev;
    __declspec(property(get=GetSlopeAng,put=PutSlopeAng))
    _bstr_t SlopeAng;
    __declspec(property(get=GetRoofHeight,put=PutRoofHeight))
    double RoofHeight;
    __declspec(property(get=GetMountHeight,put=PutMountHeight))
    double MountHeight;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetEavesLength,put=PutEavesLength))
    double EavesLength;
    __declspec(property(get=GetMountLength,put=PutMountLength))
    double MountLength;
    __declspec(property(get=GetTopLength,put=PutTopLength))
    double TopLength;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetSlabThick,put=PutSlabThick))
    double SlabThick;
    __declspec(property(get=GetRoofType))
    _bstr_t RoofType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetRoofType ( );
    double GetElev ( );
    void PutElev (
        double pVal );
    _bstr_t GetSlopeAng ( );
    void PutSlopeAng (
        _bstr_t pVal );
    double GetRoofHeight ( );
    void PutRoofHeight (
        double pVal );
    double GetMountHeight ( );
    void PutMountHeight (
        double pVal );
    double GetLength ( );
    void PutLength (
        double pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetEavesLength ( );
    void PutEavesLength (
        double pVal );
    double GetMountLength ( );
    void PutMountLength (
        double pVal );
    double GetTopLength ( );
    void PutTopLength (
        double pVal );
    double GetSlabThick ( );
    void PutSlabThick (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RoofType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Elev (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elev (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlopeAng (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SlopeAng (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RoofHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RoofHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MountHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MountHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EavesLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EavesLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MountLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MountLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TopLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TopLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThick (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("4fc3ebe8-ab1a-46c6-9d25-b36c545fb523"))
IComFloorRect : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetProjectName))
    _bstr_t ProjectName;
    __declspec(property(get=GetFloorName))
    _bstr_t FloorName;
    __declspec(property(get=GetFloorHeight))
    _bstr_t FloorHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetCrossLen,put=PutCrossLen))
    _bstr_t CrossLen;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetProjectName ( );
    _bstr_t GetFloorName ( );
    _bstr_t GetFloorHeight ( );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetCrossLen ( );
    void PutCrossLen (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ProjectName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FloorName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FloorHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_CrossLen (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CrossLen (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("3a6623d9-b45d-4321-932b-df6e152663c9"))
ISectionEntity : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder,put=PutBorder))
    _bstr_t Border;
    __declspec(property(get=GetLineType,put=PutLineType))
    _bstr_t LineType;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetHideLine,put=PutHideLine))
    _bstr_t HideLine;
    __declspec(property(get=GetShowFill,put=PutShowFill))
    _bstr_t ShowFill;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetBorder ( );
    void PutBorder (
        _bstr_t pStr );
    _bstr_t GetLineType ( );
    void PutLineType (
        _bstr_t pStr );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pStr );
    _bstr_t GetHideLine ( );
    void PutHideLine (
        _bstr_t pStr );
    _bstr_t GetShowFill ( );
    void PutShowFill (
        _bstr_t pStr );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ BSTR * pStr ) = 0;
      virtual HRESULT __stdcall put_Border (
        /*[in]*/ BSTR pStr ) = 0;
      virtual HRESULT __stdcall get_LineType (
        /*[out,retval]*/ BSTR * pStr ) = 0;
      virtual HRESULT __stdcall put_LineType (
        /*[in]*/ BSTR pStr ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pStr ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pStr ) = 0;
      virtual HRESULT __stdcall get_HideLine (
        /*[out,retval]*/ BSTR * pStr ) = 0;
      virtual HRESULT __stdcall put_HideLine (
        /*[in]*/ BSTR pStr ) = 0;
      virtual HRESULT __stdcall get_ShowFill (
        /*[out,retval]*/ BSTR * pStr ) = 0;
      virtual HRESULT __stdcall put_ShowFill (
        /*[in]*/ BSTR pStr ) = 0;
};

struct __declspec(uuid("1d25cb1b-5d40-4082-9a7a-66f7405929b0"))
IComSymbModi : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetEditText,put=PutEditText))
    _bstr_t EditText;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextContent,put=PutTextContent))
    _bstr_t TextContent;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetEditText ( );
    void PutEditText (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetTextContent ( );
    void PutTextContent (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EditText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EditText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextContent (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextContent (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
};

struct __declspec(uuid("cf4ab7d2-6328-48b7-a343-a0c1096dbbe8"))
IComStruBeam : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetBeamHeight,put=PutBeamHeight))
    double BeamHeight;
    __declspec(property(get=GetBeamShape,put=PutBeamShape))
    _bstr_t BeamShape;
    __declspec(property(get=GetBeamWidth,put=PutBeamWidth))
    double BeamWidth;
    __declspec(property(get=GetBeamUpHeight,put=PutBeamUpHeight))
    double BeamUpHeight;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetBeamUpWidth,put=PutBeamUpWidth))
    double BeamUpWidth;
    __declspec(property(get=GetBeamDownHeight,put=PutBeamDownHeight))
    double BeamDownHeight;
    __declspec(property(get=GetBeamTotalHeight,put=PutBeamTotalHeight))
    double BeamTotalHeight;
    __declspec(property(get=GetBeamTotalWidth,put=PutBeamTotalWidth))
    double BeamTotalWidth;
    __declspec(property(get=GetBeamDownWidth,put=PutBeamDownWidth))
    double BeamDownWidth;
    __declspec(property(get=GetBeamIsArc))
    _bstr_t BeamIsArc;
    __declspec(property(get=GetBeamTopHeight1,put=PutBeamTopHeight1))
    double BeamTopHeight1;
    __declspec(property(get=GetBeamTopHeight2,put=PutBeamTopHeight2))
    double BeamTopHeight2;
    __declspec(property(get=GetBeamCorner,put=PutBeamCorner))
    double BeamCorner;
    __declspec(property(get=GetBeamMaterial,put=PutBeamMaterial))
    _bstr_t BeamMaterial;
    __declspec(property(get=GetBeamNumber,put=PutBeamNumber))
    _bstr_t BeamNumber;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetHideLabel,put=PutHideLabel))
    _bstr_t HideLabel;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetBeamShape ( );
    void PutBeamShape (
        _bstr_t pVal );
    double GetBeamHeight ( );
    void PutBeamHeight (
        double pVal );
    double GetBeamWidth ( );
    void PutBeamWidth (
        double pVal );
    double GetBeamTotalWidth ( );
    void PutBeamTotalWidth (
        double pVal );
    double GetBeamTotalHeight ( );
    void PutBeamTotalHeight (
        double pVal );
    double GetBeamUpHeight ( );
    void PutBeamUpHeight (
        double pVal );
    double GetBeamUpWidth ( );
    void PutBeamUpWidth (
        double pVal );
    double GetBeamDownHeight ( );
    void PutBeamDownHeight (
        double pVal );
    double GetBeamDownWidth ( );
    void PutBeamDownWidth (
        double pVal );
    double GetBeamTopHeight1 ( );
    void PutBeamTopHeight1 (
        double pVal );
    double GetBeamTopHeight2 ( );
    void PutBeamTopHeight2 (
        double pVal );
    double GetBeamCorner ( );
    void PutBeamCorner (
        double pVal );
    _bstr_t GetBeamNumber ( );
    void PutBeamNumber (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetHideLabel ( );
    void PutHideLabel (
        _bstr_t pVal );
    _bstr_t GetBeamIsArc ( );
    _bstr_t GetBeamMaterial ( );
    void PutBeamMaterial (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamShape (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamShape (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamTotalWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamTotalWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamTotalHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamTotalHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamUpHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamUpHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamUpWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamUpWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamDownHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamDownHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamDownWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamDownWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamTopHeight1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamTopHeight1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamTopHeight2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamTopHeight2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamCorner (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamCorner (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BeamNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamNumber (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HideLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HideLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeamIsArc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BeamMaterial (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BeamMaterial (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("66695cc2-cc7a-43c7-a848-6860aeb5959f"))
IComStruFloorSlab : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetFloorSlabThick,put=PutFloorSlabThick))
    double FloorSlabThick;
    __declspec(property(get=GetFloorSlabType))
    _bstr_t FloorSlabType;
    __declspec(property(get=GetFloorSlabHeight,put=PutFloorSlabHeight))
    double FloorSlabHeight;
    __declspec(property(get=GetFloorSlabNumber,put=PutFloorSlabNumber))
    _bstr_t FloorSlabNumber;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetFloorCLTextHeight,put=PutFloorCLTextHeight))
    _bstr_t FloorCLTextHeight;
    __declspec(property(get=GetFloorCLTextStyle,put=PutFloorCLTextStyle))
    _bstr_t FloorCLTextStyle;
    __declspec(property(get=GetFloorCLHideLabel,put=PutFloorCLHideLabel))
    _bstr_t FloorCLHideLabel;
    __declspec(property(get=GetFloorSlabShape))
    _bstr_t FloorSlabShape;
    __declspec(property(get=GetFloorSlabMaterial,put=PutFloorSlabMaterial))
    _bstr_t FloorSlabMaterial;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetFloorSlabType ( );
    double GetFloorSlabThick ( );
    void PutFloorSlabThick (
        double pVal );
    double GetFloorSlabHeight ( );
    void PutFloorSlabHeight (
        double pVal );
    _bstr_t GetFloorSlabNumber ( );
    void PutFloorSlabNumber (
        _bstr_t pVal );
    _bstr_t GetFloorCLTextHeight ( );
    void PutFloorCLTextHeight (
        _bstr_t pVal );
    _bstr_t GetFloorCLTextStyle ( );
    void PutFloorCLTextStyle (
        _bstr_t pVal );
    _bstr_t GetFloorCLHideLabel ( );
    void PutFloorCLHideLabel (
        _bstr_t pVal );
    _bstr_t GetFloorSlabShape ( );
    _bstr_t GetFloorSlabMaterial ( );
    void PutFloorSlabMaterial (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FloorSlabType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FloorSlabThick (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorSlabThick (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FloorSlabHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorSlabHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FloorSlabNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorSlabNumber (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FloorCLTextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorCLTextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FloorCLTextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorCLTextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FloorCLHideLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorCLHideLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FloorSlabShape (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FloorSlabMaterial (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FloorSlabMaterial (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("8963b76d-d5b6-4457-a82f-2b217fb860bc"))
IComStruSlabHole : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetSlabHoleType))
    _bstr_t SlabHoleType;
    __declspec(property(get=GetSlabHoleWidth,put=PutSlabHoleWidth))
    double SlabHoleWidth;
    __declspec(property(get=GetSlabHoleHeight,put=PutSlabHoleHeight))
    double SlabHoleHeight;
    __declspec(property(get=GetSlabHoleAngle,put=PutSlabHoleAngle))
    double SlabHoleAngle;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetSlabHoleDiam,put=PutSlabHoleDiam))
    double SlabHoleDiam;
    __declspec(property(get=GetSlabHoleElevation,put=PutSlabHoleElevation))
    double SlabHoleElevation;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetHideLabel,put=PutHideLabel))
    _bstr_t HideLabel;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetSlabHoleType ( );
    double GetSlabHoleWidth ( );
    void PutSlabHoleWidth (
        double pVal );
    double GetSlabHoleHeight ( );
    void PutSlabHoleHeight (
        double pVal );
    double GetSlabHoleAngle ( );
    void PutSlabHoleAngle (
        double pVal );
    double GetSlabHoleDiam ( );
    void PutSlabHoleDiam (
        double pVal );
    double GetSlabHoleElevation ( );
    void PutSlabHoleElevation (
        double pVal );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetHideLabel ( );
    void PutHideLabel (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SlabHoleType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SlabHoleWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabHoleWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabHoleHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabHoleHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabHoleAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabHoleAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabHoleDiam (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabHoleDiam (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabHoleElevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabHoleElevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HideLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HideLabel (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("78117ec9-7303-46b2-aaa6-0b70983fb669"))
IComStruNodePoint : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetNodeNumber,put=PutNodeNumber))
    _bstr_t NodeNumber;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetNodeNumber ( );
    void PutNodeNumber (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NodeNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NodeNumber (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("ec4cb6f4-095e-45a7-a8ec-a15f4f97b026"))
IComStruBarBase : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetBaseNumber,put=PutBaseNumber))
    _bstr_t BaseNumber;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetBaseWidth,put=PutBaseWidth))
    double BaseWidth;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetBaseNumber ( );
    void PutBaseNumber (
        _bstr_t pVal );
    double GetBaseWidth ( );
    void PutBaseWidth (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BaseNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BaseNumber (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BaseWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BaseWidth (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("9a8403aa-5b3d-4ec9-ae66-2663877bd769"))
IComStruSelfBase : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetBaseNumber,put=PutBaseNumber))
    _bstr_t BaseNumber;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetBaseWidth,put=PutBaseWidth))
    double BaseWidth;
    __declspec(property(get=GetBaseHeight,put=PutBaseHeight))
    double BaseHeight;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetBaseNumber ( );
    void PutBaseNumber (
        _bstr_t pVal );
    double GetBaseWidth ( );
    void PutBaseWidth (
        double pVal );
    double GetBaseHeight ( );
    void PutBaseHeight (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BaseNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BaseNumber (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BaseWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BaseWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BaseHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BaseHeight (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("329c5d06-485d-40c3-8ae2-5c45de2051df"))
IComStruReinBar : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetBarType))
    _bstr_t BarType;
    __declspec(property(get=GetBarTypeStart,put=PutBarTypeStart))
    _bstr_t BarTypeStart;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetBarTypeEnd,put=PutBarTypeEnd))
    _bstr_t BarTypeEnd;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetLengthS,put=PutLengthS))
    double LengthS;
    __declspec(property(get=GetLengthO,put=PutLengthO))
    double LengthO;
    __declspec(property(get=GetLengthB,put=PutLengthB))
    double LengthB;
    __declspec(property(get=GetDiaB,put=PutDiaB))
    double DiaB;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetBarType ( );
    _bstr_t GetBarTypeStart ( );
    void PutBarTypeStart (
        _bstr_t pVal );
    _bstr_t GetBarTypeEnd ( );
    void PutBarTypeEnd (
        _bstr_t pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetLengthS ( );
    void PutLengthS (
        double pVal );
    double GetLengthO ( );
    void PutLengthO (
        double pVal );
    double GetLengthB ( );
    void PutLengthB (
        double pVal );
    double GetDiaB ( );
    void PutDiaB (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BarType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BarTypeStart (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BarTypeStart (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BarTypeEnd (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BarTypeEnd (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LengthS (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LengthS (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LengthO (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LengthO (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LengthB (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LengthB (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DiaB (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DiaB (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("67582dcc-8868-4530-90f6-b8aa6385a802"))
IComStruSymbFocus : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetAlign,put=PutAlign))
    _bstr_t Align;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetRowSpaceCoe,put=PutRowSpaceCoe))
    double RowSpaceCoe;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetTxtColor,put=PutTxtColor))
    ACAD_COLOR TxtColor;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetTxtHeight,put=PutTxtHeight))
    _bstr_t TxtHeight;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetTxtHeight ( );
    void PutTxtHeight (
        _bstr_t pVal );
    _bstr_t GetAlign ( );
    void PutAlign (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    double GetRowSpaceCoe ( );
    void PutRowSpaceCoe (
        double pVal );
    ACAD_COLOR GetTxtColor ( );
    void PutTxtColor (
        ACAD_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Align (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Align (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RowSpaceCoe (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RowSpaceCoe (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TxtColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
};

struct __declspec(uuid("0a7a9793-29b1-498e-aa9d-d0792ab6cdb9"))
IComStruSymbInsitu : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetAlign,put=PutAlign))
    _bstr_t Align;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetContent,put=PutContent))
    _bstr_t Content;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetTxtColor,put=PutTxtColor))
    ACAD_COLOR TxtColor;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetTxtHeight,put=PutTxtHeight))
    _bstr_t TxtHeight;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetTxtHeight ( );
    void PutTxtHeight (
        _bstr_t pVal );
    _bstr_t GetAlign ( );
    void PutAlign (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetContent ( );
    void PutContent (
        _bstr_t pVal );
    ACAD_COLOR GetTxtColor ( );
    void PutTxtColor (
        ACAD_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Align (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Align (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Content (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Content (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
};

struct __declspec(uuid("1ec9b26f-4977-4d0e-a478-353e4fb0175a"))
IComStruHanger : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTxtHeight,put=PutTxtHeight))
    _bstr_t TxtHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTxtColor,put=PutTxtColor))
    ACAD_COLOR TxtColor;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetTxtHeight ( );
    void PutTxtHeight (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    ACAD_COLOR GetTxtColor ( );
    void PutTxtColor (
        ACAD_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
};

struct __declspec(uuid("35c62810-171f-449b-9ebd-548c7eae6cdd"))
IComStruStirrup : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTxtHeight,put=PutTxtHeight))
    _bstr_t TxtHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTxtColor,put=PutTxtColor))
    ACAD_COLOR TxtColor;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetTxtHeight ( );
    void PutTxtHeight (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    ACAD_COLOR GetTxtColor ( );
    void PutTxtColor (
        ACAD_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
};

struct __declspec(uuid("ae66e531-7e9f-435d-a8a2-579b9b787dcf"))
IComStruPlainNumber : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTxtHeight,put=PutTxtHeight))
    _bstr_t TxtHeight;
    __declspec(property(get=GetCorner,put=PutCorner))
    double Corner;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTxtColor,put=PutTxtColor))
    ACAD_COLOR TxtColor;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetTxtHeight ( );
    void PutTxtHeight (
        _bstr_t pVal );
    double GetCorner ( );
    void PutCorner (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    ACAD_COLOR GetTxtColor ( );
    void PutTxtColor (
        ACAD_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Corner (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Corner (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
};

struct __declspec(uuid("1f6fed7b-89ca-41c7-8ae7-f399ffb36b7f"))
IComStruSectStair : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetSectNumber,put=PutSectNumber))
    _bstr_t SectNumber;
    __declspec(property(get=GetLeftHeight,put=PutLeftHeight))
    _bstr_t LeftHeight;
    __declspec(property(get=GetRightHeight,put=PutRightHeight))
    _bstr_t RightHeight;
    __declspec(property(get=GetStepNum,put=PutStepNum))
    int StepNum;
    __declspec(property(get=GetSlabShadowLen,put=PutSlabShadowLen))
    double SlabShadowLen;
    __declspec(property(get=GetSlabThickness,put=PutSlabThickness))
    double SlabThickness;
    __declspec(property(get=GetB1Width,put=PutB1Width))
    double B1Width;
    __declspec(property(get=GetC1Height,put=PutC1Height))
    double C1Height;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetD1Width,put=PutD1Width))
    double D1Width;
    __declspec(property(get=GetT1Tickness,put=PutT1Tickness))
    double T1Tickness;
    __declspec(property(get=GetL2Length,put=PutL2Length))
    double L2Length;
    __declspec(property(get=GetB2Width,put=PutB2Width))
    double B2Width;
    __declspec(property(get=GetC2Height,put=PutC2Height))
    double C2Height;
    __declspec(property(get=GetD2Width,put=PutD2Width))
    double D2Width;
    __declspec(property(get=GetT2Tickness,put=PutT2Tickness))
    double T2Tickness;
    __declspec(property(get=GetL3Length,put=PutL3Length))
    double L3Length;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetSectNumber ( );
    void PutSectNumber (
        _bstr_t pVal );
    _bstr_t GetLeftHeight ( );
    void PutLeftHeight (
        _bstr_t pVal );
    _bstr_t GetRightHeight ( );
    void PutRightHeight (
        _bstr_t pVal );
    int GetStepNum ( );
    void PutStepNum (
        int pVal );
    double GetSlabShadowLen ( );
    void PutSlabShadowLen (
        double pVal );
    double GetSlabThickness ( );
    void PutSlabThickness (
        double pVal );
    double GetB1Width ( );
    void PutB1Width (
        double pVal );
    double GetC1Height ( );
    void PutC1Height (
        double pVal );
    double GetD1Width ( );
    void PutD1Width (
        double pVal );
    double GetT1Tickness ( );
    void PutT1Tickness (
        double pVal );
    double GetB2Width ( );
    void PutB2Width (
        double pVal );
    double GetC2Height ( );
    void PutC2Height (
        double pVal );
    double GetD2Width ( );
    void PutD2Width (
        double pVal );
    double GetT2Tickness ( );
    void PutT2Tickness (
        double pVal );
    double GetL2Length ( );
    void PutL2Length (
        double pVal );
    double GetL3Length ( );
    void PutL3Length (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SectNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SectNumber (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LeftHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RightHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RightHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StepNum (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_StepNum (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_SlabShadowLen (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabShadowLen (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlabThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlabThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_B1Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_B1Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C1Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C1Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_D1Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_D1Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_T1Tickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_T1Tickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_B2Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_B2Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C2Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C2Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_D2Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_D2Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_T2Tickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_T2Tickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_L2Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_L2Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_L3Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_L3Length (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("ce971483-7bf9-41bf-ade0-292061cfa834"))
IComReinIndexDim : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetReinCLAB,put=PutReinCLAB))
    _bstr_t ReinCLAB;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetInTextStyle,put=PutInTextStyle))
    _bstr_t InTextStyle;
    __declspec(property(get=GetInTextHeight,put=PutInTextHeight))
    double InTextHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetTxtColor,put=PutTxtColor))
    ACAD_COLOR TxtColor;
    __declspec(property(get=GetTxt,put=PutTxt))
    _bstr_t Txt;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetReinCLAB ( );
    void PutReinCLAB (
        _bstr_t pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    _bstr_t GetInTextStyle ( );
    void PutInTextStyle (
        _bstr_t pVal );
    double GetInTextHeight ( );
    void PutInTextHeight (
        double pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetTxt ( );
    void PutTxt (
        _bstr_t pVal );
    ACAD_COLOR GetTxtColor ( );
    void PutTxtColor (
        ACAD_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ReinCLAB (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReinCLAB (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InTextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InTextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_InTextHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_InTextHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Txt (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Txt (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
};

struct __declspec(uuid("ebc3b66d-2c13-4a33-ab4d-aa02a4c984d4"))
IComStruWColuSect : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetTxtHeight,put=PutTxtHeight))
    _bstr_t TxtHeight;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    _bstr_t TextStyle;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;
    __declspec(property(get=GetShadowType,put=PutShadowType))
    _bstr_t ShadowType;
    __declspec(property(get=GetHatchLayer,put=PutHatchLayer))
    ACAD_LAYER HatchLayer;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );
    _bstr_t GetShadowType ( );
    void PutShadowType (
        _bstr_t pVal );
    _bstr_t GetTxtHeight ( );
    void PutTxtHeight (
        _bstr_t pVal );
    _bstr_t GetTextStyle ( );
    void PutTextStyle (
        _bstr_t pVal );
    ACAD_LAYER GetHatchLayer ( );
    void PutHatchLayer (
        ACAD_LAYER pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TxtHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TxtHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HatchLayer (
        /*[out,retval]*/ ACAD_LAYER * pVal ) = 0;
      virtual HRESULT __stdcall put_HatchLayer (
        /*[in]*/ ACAD_LAYER pVal ) = 0;
};

struct __declspec(uuid("b791686a-b67d-42d3-8265-1f4ec01ebb46"))
IComEvacPath : IAcadEntity
{
    //
    // Property data
    //

    __declspec(property(get=GetShowText,put=PutShowText))
    _bstr_t ShowText;
    __declspec(property(get=GetTextHeight,put=PutTextHeight))
    _bstr_t TextHeight;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _bstr_t FontStyle;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    ACAD_COLOR TextColor;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetPolyWidth,put=PutPolyWidth))
    double PolyWidth;
    __declspec(property(get=GetStandardRange,put=PutStandardRange))
    _bstr_t StandardRange;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLayoutRotation,put=PutLayoutRotation))
    double LayoutRotation;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetShowText ( );
    void PutShowText (
        _bstr_t pVal );
    _bstr_t GetTextHeight ( );
    void PutTextHeight (
        _bstr_t pVal );
    _bstr_t GetFontStyle ( );
    void PutFontStyle (
        _bstr_t pVal );
    ACAD_COLOR GetTextColor ( );
    void PutTextColor (
        ACAD_COLOR pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    double GetPolyWidth ( );
    void PutPolyWidth (
        double pVal );
    _bstr_t GetStandardRange ( );
    void PutStandardRange (
        _bstr_t pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetLayoutRotation ( );
    void PutLayoutRotation (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ShowText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextHeight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextHeight (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ ACAD_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ ACAD_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PolyWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PolyWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StandardRange (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StandardRange (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LayoutRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LayoutRotation (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("1829cedc-c01d-46c8-a239-8b2037a0243b"))
ComBalcony;
    // [ default ] interface IComBalcony
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("61d2327a-1e20-4884-9920-83e0c3d8fdbd"))
ComStair;
    // [ default ] interface IComStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("ab164475-38bb-4a6d-b4b2-339eade1ccae"))
ComArcStair;
    // [ default ] interface IComArcStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("2521df00-4736-4395-9c41-7c0385e57bfc"))
ComAscent;
    // [ default ] interface IComAscent
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("b491056e-e282-4f70-a897-60eda51a0c49"))
ComCamera;
    // [ default ] interface IComCamera
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("5307d974-dd2d-4ab4-ad5c-a9ee005cc56e"))
ComColumn;
    // [ default ] interface IComColumn
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("68612bc4-a83f-4bdf-a7e3-0eb001c21601"))
ComCurveMesh;
    // [ default ] interface IComCurveMesh
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("3e5ac06e-9b54-4871-aad7-d378ab251005"))
ComCurveStair;
    // [ default ] interface IComCurveStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("33ed4c02-1a5d-4383-a9ca-aba513728887"))
ComHandRail;
    // [ default ] interface IComHandRail
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("0cf07faf-c6c4-4c2d-b638-5439ef9661c4"))
ComLineStair;
    // [ default ] interface IComLineStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("fea237f0-693c-49d6-9548-f21b9f326237"))
ComOpening;
    // [ default ] interface IComOpening
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("a66cbd4e-e68b-4aec-ab5c-bbc19114807f"))
ComRail;
    // [ default ] interface IComRail
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("4c69635c-ba1f-49f4-8a4f-b3d3c1ae184c"))
ComRectStair;
    // [ default ] interface IComRectStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("0266d95b-6be0-46a3-9b31-a0c0a4d5705a"))
ComSlab;
    // [ default ] interface IComSlab
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("d0065b74-c6e7-4bf0-8e6b-76ee876ae789"))
ComSlopeRoof;
    // [ default ] interface IComSlopeRoof
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7a2030dc-79ee-4033-be32-58fdd8558a5e"))
ComSpace;
    // [ default ] interface IComSpace
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("28d93af6-bec8-418a-a311-84d53c398798"))
ComStep;
    // [ default ] interface IComStep
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("8bd2898e-d01b-4b1d-96cf-ca018cc4415c"))
ComVertSlab;
    // [ default ] interface IComVertSlab
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("20cdb4ef-0149-4a29-8437-27e3aabbbeec"))
ComWall;
    // [ default ] interface IComWall
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("5f1913bd-bcb9-4343-bd64-7e0c4a88d3a1"))
ComWallPatch;
    // [ default ] interface IComWallPatch
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7a3dab00-7cc1-43cc-a168-0f9328702ca2"))
ComLineText;
    // [ default ] interface IComLineText
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("14bd4421-a554-4440-8445-3a243acf36aa"))
ComMutiText;
    // [ default ] interface IComMutiText
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("09063a4b-48f9-4162-a94f-1fcf0f5378ad"))
ComSymbComposing;
    // [ default ] interface IComSymbComposing
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("ad7b98a9-2a0d-45aa-82f6-ba1e93e9ee94"))
ComSymbArrow;
    // [ default ] interface IComSymbArrow
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("d64cb7bc-2d9a-497c-be73-c6c2f29d035d"))
ComSymbDrawingIndex;
    // [ default ] interface IComSymbDrawingIndex
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("168dec60-b5d5-4ca1-9a67-4b3b54e955eb"))
ComSymbInSight;
    // [ default ] interface IComSymbInSight
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("17f8b2a9-01b0-40f3-b018-b18b4341ebab"))
ComSymbMultiLeader;
    // [ default ] interface IComSymbMultiLeader
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("e414a499-275b-49d8-a4b2-b5471f92c70d"))
ComSymbElev;
    // [ default ] interface IComSymbElev
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("525f746e-080f-4a8c-a4f5-2a3429706218"))
ComSymbIndex;
    // [ default ] interface IComSymbIndex
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("f86e3e0a-2825-44d3-8a8d-dea463fc45fe"))
ComSymbSection;
    // [ default ] interface IComSymbSection
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("936a9069-6071-4e14-bc4d-73e4580ab3f1"))
ComSymbNorthThumb;
    // [ default ] interface IComSymbNorthThumb
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("c0b0f83b-3189-432c-ad3a-a665bbd1ac89"))
ComDimension;
    // [ default ] interface IComDimension
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("18b598a9-dabb-45da-a4e4-a84a7b180648"))
ComRadiusDim;
    // [ default ] interface IComRadiusDim
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("578e41b8-450d-4d5d-8f92-af565665487f"))
ComAxisLabel;
    // [ default ] interface IComAxisLabel
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("febaeacd-9668-417f-9ab5-706da3729343"))
ComSymbRupture;
    // [ default ] interface IComSymbRupture

struct __declspec(uuid("28ce2884-0ecb-4952-b714-153443cf962c"))
ComSymbCoord;
    // [ default ] interface IComSymbCoord

struct __declspec(uuid("7a4f8e9c-06bd-4dc5-a5fc-212e02f5fad0"))
ComSheet;
    // [ default ] interface IComSheet

struct __declspec(uuid("62a82189-9c76-495b-8a58-ea1a2390958a"))
ComCurtainWall;
    // [ default ] interface IComCurtainWall
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("5c2bf130-4423-4704-aba6-ef2e1fb39747"))
ComMultiStair;
    // [ default ] interface IComMultiStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("e104afae-c60c-4c94-94c9-f8d5abd35232"))
ComCornerWin;
    // [ default ] interface IComCornerWin
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("293b4f35-bb49-449c-af44-7783942a633e"))
ComRect;
    // [ default ] interface IComRect
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("b81e95e5-84a2-4629-9357-19c7cbd0e9f1"))
ComSlope;
    // [ default ] interface IComSlope
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("5552ce8b-49ef-4378-80ef-76db167433fc"))
ComPolyMesh;
    // [ default ] interface IComPolyMesh
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("c61e6184-9a23-45bc-b9e2-4fb93c267d98"))
ComOpeningSlot;
    // [ default ] interface IComOpeningSlot
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("bf85c3f3-0d3e-4529-a6e4-93b532dcb492"))
ComDormer;
    // [ default ] interface IComDormer
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("72cc2aa8-885a-4114-b815-fceb440fe4d7"))
ComNetShelf;
    // [ default ] interface IComNetShelf
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("1a254e7f-7b35-4231-bfb5-8d5542157bee"))
ComMultiViewInsert;
    // [ default ] interface IComMultiViewInsert
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("0b29121d-6aeb-46d2-b0e1-752083be0d77"))
ComPromptMark;
    // [ default ] interface IComPromptMark
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("cb8b986e-c97d-4a3c-9a95-bf45d108bed3"))
ComDrawingName;
    // [ default ] interface IComDrawingName
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("fb1b3912-6432-4431-a8be-751c890b00d5"))
ComCurveMesh2;
    // [ default ] interface IComCurveMesh2
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("9f741ef0-96df-4846-84a5-bb09abd98466"))
ComPolyMesh2;
    // [ default ] interface IComPolyMesh2
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("9cf42ca3-4e01-414c-b6d9-1ae0f57782f4"))
ComCuspRoof;
    // [ default ] interface IComCuspRoof
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("b5d965e3-1a20-46f2-ba47-06b28c0a4013"))
ComDualSlopeRoof;
    // [ default ] interface IComDualSlopeRoof
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("c28e0ce3-5c7b-4b05-9211-0f80087543da"))
ComSymbCut;
    // [ default ] interface IComSymbCut
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("7df2a386-9865-4be3-b446-28eb5f09563d"))
ComPolyPathArray;
    // [ default ] interface IComPolyPathArray
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("3b0f5086-c7fb-4dee-9fca-bab309d9f495"))
ComCrossStair;
    // [ default ] interface IComCrossStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("68f61551-0b01-4582-8c88-bc92c9be3115"))
ComParallelStair;
    // [ default ] interface IComParallelStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("6eaa2eff-14b6-4f81-a99d-1b6d218a4455"))
ComScissorsStair;
    // [ default ] interface IComScissorsStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("35468f6b-4b3d-494e-95c6-4ea1ca628783"))
ComCornerStair;
    // [ default ] interface IComCornerStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("61e768d4-feb3-418d-8e22-1e5d7920a6cd"))
ComDoubleMulStair;
    // [ default ] interface IComDoubleMulStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("54f059cf-116b-47f3-9fa1-62bd1a21590c"))
ComTriangleStair;
    // [ default ] interface IComTriangleStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("ef2fe3f8-9e13-44c1-af41-ac7af9d3a8c4"))
ComRectCornerStair;
    // [ default ] interface IComRectCornerStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("0dfcc043-348f-483d-92af-3ad3e289d959"))
ComAutoStair;
    // [ default ] interface IComAutoStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("a7a7c622-a833-4d98-921c-8e47bc4acb85"))
ComApron;
    // [ default ] interface IComApron

struct __declspec(uuid("292e14a9-5acf-4014-8904-df8dcb491655"))
ComMountRoof;
    // [ default ] interface IComMountRoof
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("5f9cac81-68f3-4e8b-a1b2-91f570e9fa81"))
ComFloorRect;
    // [ default ] interface IComFloorRect

struct __declspec(uuid("841028e7-be51-4612-9a9b-bddc6758e683"))
SectionEntity;
    // [ default ] interface ISectionEntity

struct __declspec(uuid("caa9e87f-962a-4ab5-ae67-75409e4476b1"))
ComSymbModi;
    // [ default ] interface IComSymbModi

struct __declspec(uuid("65958b89-d992-4427-99f4-9aa5f71d5ddc"))
ComStruBeam;
    // [ default ] interface IComStruBeam
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("5534d178-7a49-48aa-ade7-b054e8ffe25b"))
ComStruFloorSlab;
    // [ default ] interface IComStruFloorSlab
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("d6e68b38-3e57-40ef-ad44-edbd1ae21f5c"))
ComStruSlabHole;
    // [ default ] interface IComStruSlabHole
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("e2b4dac0-654d-4529-a165-ca87dae3c7e0"))
ComStruNodePoint;
    // [ default ] interface IComStruNodePoint
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("5d7d1293-df1a-448c-94e6-8523caef2f46"))
ComStruBarBase;
    // [ default ] interface IComStruBarBase
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("122b96a4-856f-4df6-8cfb-7e3d1f2ccd38"))
ComStruSelfBase;
    // [ default ] interface IComStruSelfBase
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("57f7e5f1-975d-4832-a989-c510be0f5f50"))
ComStruReinBar;
    // [ default ] interface IComStruReinBar
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("9f8f82d2-1861-471e-ab82-a16627b3fe16"))
ComStruSymbFocus;
    // [ default ] interface IComStruSymbFocus
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("086aa4bd-04f6-47cc-a5d6-f8ef659db498"))
ComStruSymbInsitu;
    // [ default ] interface IComStruSymbInsitu
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("64aeb3d5-a147-434f-b48c-5f0ce41e6514"))
ComStruHanger;
    // [ default ] interface IComStruHanger
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("78c04fef-c83c-41ba-ac59-8aae2993e713"))
ComStruStirrup;
    // [ default ] interface IComStruStirrup
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("46a81471-d5eb-45b5-acd2-e9289cf92ec3"))
ComStruPlainNumber;
    // [ default ] interface IComStruPlainNumber
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("675338db-3613-409c-8817-cc2667aec6b4"))
ComStruSectStair;
    // [ default ] interface IComStruSectStair
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("782e08d7-675d-4303-a6d6-3f48d2456a5a"))
ComReinIndexDim;
    // [ default ] interface IComReinIndexDim
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("c7044362-0d2b-48e8-ab19-f7aec54c356d"))
ComStruWColuSect;
    // [ default ] interface IComStruWColuSect
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("d34ff050-ece6-466a-80ce-09eb719c2cad"))
ComFireZone;
    // [ default ] interface IComFireZone
    // [ default, source ] interface IAcadObjectEvents

struct __declspec(uuid("6b867462-1204-4095-be73-2c7901b469f3"))
ComEvacPath;
    // [ default ] interface IComEvacPath
    // [ default, source ] interface IAcadObjectEvents

//
// Function implementation mapping
//

#pragma start_map_region("d:\temp\asdksquarewrapper_dg\square\x64\debug\tch10_com19.tli")
__declspec(implementation_key(1)) double IComBalcony::GetElevation ( );
__declspec(implementation_key(2)) void IComBalcony::PutElevation ( double pVal );
__declspec(implementation_key(3)) double IComBalcony::GetRailWidth ( );
__declspec(implementation_key(4)) void IComBalcony::PutRailWidth ( double pVal );
__declspec(implementation_key(5)) double IComBalcony::GetRailHeight ( );
__declspec(implementation_key(6)) void IComBalcony::PutRailHeight ( double pVal );
__declspec(implementation_key(7)) _bstr_t IComBalcony::GetRailClipInsu ( );
__declspec(implementation_key(8)) void IComBalcony::PutRailClipInsu ( _bstr_t pVal );
__declspec(implementation_key(9)) double IComBalcony::GetSlabThickness ( );
__declspec(implementation_key(10)) void IComBalcony::PutSlabThickness ( double pVal );
__declspec(implementation_key(11)) double IComBalcony::GetGirderThickness ( );
__declspec(implementation_key(12)) void IComBalcony::PutGirderThickness ( double pVal );
__declspec(implementation_key(13)) _bstr_t IComBalcony::GetHasGirder ( );
__declspec(implementation_key(14)) void IComBalcony::PutHasGirder ( _bstr_t pVal );
__declspec(implementation_key(15)) double IComBalcony::GetScale ( );
__declspec(implementation_key(16)) void IComBalcony::PutScale ( double pVal );
__declspec(implementation_key(17)) ACAD_LAYER IComBalcony::GetGroundLayer ( );
__declspec(implementation_key(18)) void IComBalcony::PutGroundLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(19)) double IComBalcony::GetLayoutRotation ( );
__declspec(implementation_key(20)) void IComBalcony::PutLayoutRotation ( double pVal );
__declspec(implementation_key(21)) _bstr_t IComBalcony::GetShadowType ( );
__declspec(implementation_key(22)) void IComBalcony::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(23)) double IComStair::GetElevation ( );
__declspec(implementation_key(24)) void IComStair::PutElevation ( double pVal );
__declspec(implementation_key(25)) double IComStair::GetLayoutRotation ( );
__declspec(implementation_key(26)) void IComStair::PutLayoutRotation ( double pVal );
__declspec(implementation_key(27)) _bstr_t IComStair::GetShadowType ( );
__declspec(implementation_key(28)) void IComStair::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(29)) double IComArcStair::GetScale ( );
__declspec(implementation_key(30)) void IComArcStair::PutScale ( double pVal );
__declspec(implementation_key(31)) double IComArcStair::GetLayoutRotation ( );
__declspec(implementation_key(32)) void IComArcStair::PutLayoutRotation ( double pVal );
__declspec(implementation_key(33)) _bstr_t IComArcStair::GetViewType ( );
__declspec(implementation_key(34)) void IComArcStair::PutViewType ( _bstr_t pVal );
__declspec(implementation_key(35)) double IComArcStair::GetElev ( );
__declspec(implementation_key(36)) void IComArcStair::PutElev ( double pVal );
__declspec(implementation_key(37)) double IComArcStair::GetStairHeight ( );
__declspec(implementation_key(38)) void IComArcStair::PutStairHeight ( double pVal );
__declspec(implementation_key(39)) double IComArcStair::GetRadiusIn ( );
__declspec(implementation_key(40)) void IComArcStair::PutRadiusIn ( double pVal );
__declspec(implementation_key(41)) double IComArcStair::GetRadiusOut ( );
__declspec(implementation_key(42)) void IComArcStair::PutRadiusOut ( double pVal );
__declspec(implementation_key(43)) double IComArcStair::GetStartAngle ( );
__declspec(implementation_key(44)) void IComArcStair::PutStartAngle ( double pVal );
__declspec(implementation_key(45)) double IComArcStair::GetSweepAngle ( );
__declspec(implementation_key(46)) void IComArcStair::PutSweepAngle ( double pVal );
__declspec(implementation_key(47)) long IComArcStair::GetStepNum ( );
__declspec(implementation_key(48)) void IComArcStair::PutStepNum ( long pVal );
__declspec(implementation_key(49)) double IComArcStair::GetStepHeight ( );
__declspec(implementation_key(50)) void IComArcStair::PutStepHeight ( double pVal );
__declspec(implementation_key(51)) _bstr_t IComArcStair::GetHasLBeam ( );
__declspec(implementation_key(52)) void IComArcStair::PutHasLBeam ( _bstr_t pVal );
__declspec(implementation_key(53)) _bstr_t IComArcStair::GetHasRBeam ( );
__declspec(implementation_key(54)) void IComArcStair::PutHasRBeam ( _bstr_t pVal );
__declspec(implementation_key(55)) double IComArcStair::GetBeamHeight ( );
__declspec(implementation_key(56)) void IComArcStair::PutBeamHeight ( double pVal );
__declspec(implementation_key(57)) double IComArcStair::GetBeamThickness ( );
__declspec(implementation_key(58)) void IComArcStair::PutBeamThickness ( double pVal );
__declspec(implementation_key(59)) ACAD_LAYER IComArcStair::GetBeamLayer ( );
__declspec(implementation_key(60)) void IComArcStair::PutBeamLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(61)) ACAD_LAYER IComArcStair::GetStepLayer ( );
__declspec(implementation_key(62)) void IComArcStair::PutStepLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(63)) _bstr_t IComArcStair::GetStartSide ( );
__declspec(implementation_key(64)) void IComArcStair::PutStartSide ( _bstr_t pVal );
__declspec(implementation_key(65)) _bstr_t IComArcStair::GetAsAscent ( );
__declspec(implementation_key(66)) void IComArcStair::PutAsAscent ( _bstr_t pVal );
__declspec(implementation_key(67)) _bstr_t IComArcStair::GetHasAscentSlab ( );
__declspec(implementation_key(68)) void IComArcStair::PutHasAscentSlab ( _bstr_t pVal );
__declspec(implementation_key(69)) _bstr_t IComArcStair::GetOnGround ( );
__declspec(implementation_key(70)) void IComArcStair::PutOnGround ( _bstr_t pVal );
__declspec(implementation_key(71)) _bstr_t IComArcStair::GetPaoType ( );
__declspec(implementation_key(72)) void IComArcStair::PutPaoType ( _bstr_t pVal );
__declspec(implementation_key(73)) _bstr_t IComArcStair::GetAlongWall ( );
__declspec(implementation_key(74)) void IComArcStair::PutAlongWall ( _bstr_t pVal );
__declspec(implementation_key(75)) _bstr_t IComArcStair::GetShadowType ( );
__declspec(implementation_key(76)) void IComArcStair::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(77)) double IComAscent::GetElevation ( );
__declspec(implementation_key(78)) void IComAscent::PutElevation ( double pVal );
__declspec(implementation_key(79)) _bstr_t IComAscent::GetHasSlant ( );
__declspec(implementation_key(80)) void IComAscent::PutHasSlant ( _bstr_t pVal );
__declspec(implementation_key(81)) _bstr_t IComAscent::GetAlignment_Right ( );
__declspec(implementation_key(82)) void IComAscent::PutAlignment_Right ( _bstr_t pVal );
__declspec(implementation_key(83)) _bstr_t IComAscent::GetAlignment_Left ( );
__declspec(implementation_key(84)) void IComAscent::PutAlignment_Left ( _bstr_t pVal );
__declspec(implementation_key(85)) double IComAscent::GetWidth ( );
__declspec(implementation_key(86)) void IComAscent::PutWidth ( double pVal );
__declspec(implementation_key(87)) double IComAscent::GetHeight ( );
__declspec(implementation_key(88)) void IComAscent::PutHeight ( double pVal );
__declspec(implementation_key(89)) double IComAscent::GetLength ( );
__declspec(implementation_key(90)) void IComAscent::PutLength ( double pVal );
__declspec(implementation_key(91)) double IComAscent::GetIndent ( );
__declspec(implementation_key(92)) void IComAscent::PutIndent ( double pVal );
__declspec(implementation_key(93)) double IComAscent::GetScale ( );
__declspec(implementation_key(94)) void IComAscent::PutScale ( double pVal );
__declspec(implementation_key(95)) double IComAscent::GetLayoutRotation ( );
__declspec(implementation_key(96)) void IComAscent::PutLayoutRotation ( double pVal );
__declspec(implementation_key(97)) _bstr_t IComAscent::GetShadowType ( );
__declspec(implementation_key(98)) void IComAscent::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(99)) double IComCamera::GetCameraElev ( );
__declspec(implementation_key(100)) void IComCamera::PutCameraElev ( double pVal );
__declspec(implementation_key(101)) double IComCamera::GetTargetElev ( );
__declspec(implementation_key(102)) void IComCamera::PutTargetElev ( double pVal );
__declspec(implementation_key(103)) double IComCamera::GetLens ( );
__declspec(implementation_key(104)) void IComCamera::PutLens ( double pVal );
__declspec(implementation_key(105)) _bstr_t IComCamera::GetPerspective ( );
__declspec(implementation_key(106)) void IComCamera::PutPerspective ( _bstr_t pVal );
__declspec(implementation_key(107)) _bstr_t IComCamera::GetActive ( );
__declspec(implementation_key(108)) void IComCamera::PutActive ( _bstr_t pVal );
__declspec(implementation_key(109)) double IComCamera::GetLongitude ( );
__declspec(implementation_key(110)) void IComCamera::PutLongitude ( double pVal );
__declspec(implementation_key(111)) double IComCamera::GetLatitude ( );
__declspec(implementation_key(112)) void IComCamera::PutLatitude ( double pVal );
__declspec(implementation_key(113)) _bstr_t IComCamera::GetFrontClipOn ( );
__declspec(implementation_key(114)) void IComCamera::PutFrontClipOn ( _bstr_t pVal );
__declspec(implementation_key(115)) _bstr_t IComCamera::GetBackClipOn ( );
__declspec(implementation_key(116)) void IComCamera::PutBackClipOn ( _bstr_t pVal );
__declspec(implementation_key(117)) _bstr_t IComCamera::GetFrontClipAtEye ( );
__declspec(implementation_key(118)) void IComCamera::PutFrontClipAtEye ( _bstr_t pVal );
__declspec(implementation_key(119)) double IComCamera::GetFrontClipDist ( );
__declspec(implementation_key(120)) void IComCamera::PutFrontClipDist ( double pVal );
__declspec(implementation_key(121)) double IComCamera::GetBackClipDist ( );
__declspec(implementation_key(122)) void IComCamera::PutBackClipDist ( double pVal );
__declspec(implementation_key(123)) double IComCamera::GetScale ( );
__declspec(implementation_key(124)) void IComCamera::PutScale ( double pVal );
__declspec(implementation_key(125)) _bstr_t IComCamera::GetCameraType ( );
__declspec(implementation_key(126)) double IComCamera::GetLayoutRotation ( );
__declspec(implementation_key(127)) void IComCamera::PutLayoutRotation ( double pVal );
__declspec(implementation_key(128)) double IComColumn::GetElevation ( );
__declspec(implementation_key(129)) void IComColumn::PutElevation ( double pVal );
__declspec(implementation_key(130)) double IComColumn::GetHeight ( );
__declspec(implementation_key(131)) void IComColumn::PutHeight ( double pVal );
__declspec(implementation_key(132)) double IComColumn::GetRotation ( );
__declspec(implementation_key(133)) void IComColumn::PutRotation ( double pVal );
__declspec(implementation_key(134)) double IComColumn::GetWidth ( );
__declspec(implementation_key(135)) void IComColumn::PutWidth ( double pVal );
__declspec(implementation_key(136)) double IComColumn::GetDeep ( );
__declspec(implementation_key(137)) void IComColumn::PutDeep ( double pVal );
__declspec(implementation_key(138)) double IComColumn::GetDiameter ( );
__declspec(implementation_key(139)) void IComColumn::PutDiameter ( double pVal );
__declspec(implementation_key(140)) double IComColumn::GetSideLength ( );
__declspec(implementation_key(141)) void IComColumn::PutSideLength ( double pVal );
__declspec(implementation_key(142)) _bstr_t IComColumn::GetSectionArea ( );
__declspec(implementation_key(143)) _bstr_t IComColumn::GetSectionPerimeter ( );
__declspec(implementation_key(144)) _bstr_t IComColumn::GetSideArea ( );
__declspec(implementation_key(145)) _bstr_t IComColumn::GetVolume ( );
__declspec(implementation_key(146)) _bstr_t IComColumn::GetSectionShapeText ( );
__declspec(implementation_key(147)) void IComColumn::PutSectionShapeText ( _bstr_t pVal );
__declspec(implementation_key(148)) _bstr_t IComColumn::GetStruSectionShapeText ( );
__declspec(implementation_key(149)) void IComColumn::PutStruSectionShapeText ( _bstr_t pVal );
__declspec(implementation_key(150)) double IComColumn::GetStruDiameter ( );
__declspec(implementation_key(151)) void IComColumn::PutStruDiameter ( double pVal );
__declspec(implementation_key(152)) _bstr_t IComColumn::GetTopFace ( );
__declspec(implementation_key(153)) void IComColumn::PutTopFace ( _bstr_t pVal );
__declspec(implementation_key(154)) _bstr_t IComColumn::GetBottomFace ( );
__declspec(implementation_key(155)) void IComColumn::PutBottomFace ( _bstr_t pVal );
__declspec(implementation_key(156)) _bstr_t IComColumn::GetLabel ( );
__declspec(implementation_key(157)) void IComColumn::PutLabel ( _bstr_t pVal );
__declspec(implementation_key(158)) _bstr_t IComColumn::GetTextHeight ( );
__declspec(implementation_key(159)) void IComColumn::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(160)) _bstr_t IComColumn::GetTextStyle ( );
__declspec(implementation_key(161)) void IComColumn::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(162)) _bstr_t IComColumn::GetHideLabel ( );
__declspec(implementation_key(163)) void IComColumn::PutHideLabel ( _bstr_t pVal );
__declspec(implementation_key(164)) ACAD_LAYER IComColumn::GetHatchLayer ( );
__declspec(implementation_key(165)) void IComColumn::PutHatchLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(166)) double IComColumn::GetLayoutRotation ( );
__declspec(implementation_key(167)) void IComColumn::PutLayoutRotation ( double pVal );
__declspec(implementation_key(168)) double IComColumn::GetScale ( );
__declspec(implementation_key(169)) void IComColumn::PutScale ( double pVal );
__declspec(implementation_key(170)) _bstr_t IComColumn::GetType ( );
__declspec(implementation_key(171)) void IComColumn::PutType ( _bstr_t pVal );
__declspec(implementation_key(172)) _bstr_t IComColumn::GetStyle ( );
__declspec(implementation_key(173)) void IComColumn::PutStyle ( _bstr_t pVal );
__declspec(implementation_key(174)) _bstr_t IComColumn::GetShadowType ( );
__declspec(implementation_key(175)) void IComColumn::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(176)) _bstr_t IComColumn::GetInsulate ( );
__declspec(implementation_key(177)) void IComColumn::PutInsulate ( _bstr_t pVal );
__declspec(implementation_key(178)) double IComColumn::GetInsulateThick ( );
__declspec(implementation_key(179)) void IComColumn::PutInsulateThick ( double pVal );
__declspec(implementation_key(180)) ACAD_LAYER IComColumn::GetInsulateLayer ( );
__declspec(implementation_key(181)) void IComColumn::PutInsulateLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(182)) _bstr_t IComColumn::GetColumnNumber ( );
__declspec(implementation_key(183)) void IComColumn::PutColumnNumber ( _bstr_t pVal );
__declspec(implementation_key(184)) _bstr_t IComColumn::GetColumnIsHatch ( );
__declspec(implementation_key(185)) void IComColumn::PutColumnIsHatch ( _bstr_t pVal );
__declspec(implementation_key(186)) _bstr_t IComColumn::GetColumnIsOverThick ( );
__declspec(implementation_key(187)) void IComColumn::PutColumnIsOverThick ( _bstr_t pVal );
__declspec(implementation_key(188)) double IComColumn::GetColumnWidthB ( );
__declspec(implementation_key(189)) void IComColumn::PutColumnWidthB ( double pVal );
__declspec(implementation_key(190)) double IComColumn::GetColumnHeightH ( );
__declspec(implementation_key(191)) void IComColumn::PutColumnHeightH ( double pVal );
__declspec(implementation_key(192)) double IComColumn::GetColumnThicknessB ( );
__declspec(implementation_key(193)) void IComColumn::PutColumnThicknessB ( double pVal );
__declspec(implementation_key(194)) double IComColumn::GetColumnSumH ( );
__declspec(implementation_key(195)) void IComColumn::PutColumnSumH ( double pVal );
__declspec(implementation_key(196)) double IComColumn::GetColumnWidthU ( );
__declspec(implementation_key(197)) void IComColumn::PutColumnWidthU ( double pVal );
__declspec(implementation_key(198)) double IComColumn::GetColumnThicknessT ( );
__declspec(implementation_key(199)) void IComColumn::PutColumnThicknessT ( double pVal );
__declspec(implementation_key(200)) double IComColumn::GetColumnWidthD ( );
__declspec(implementation_key(201)) void IComColumn::PutColumnWidthD ( double pVal );
__declspec(implementation_key(202)) double IComColumn::GetColumnThicknessF ( );
__declspec(implementation_key(203)) void IComColumn::PutColumnThicknessF ( double pVal );
__declspec(implementation_key(204)) double IComColumn::GetStruElevation ( );
__declspec(implementation_key(205)) void IComColumn::PutStruElevation ( double pVal );
__declspec(implementation_key(206)) double IComColumn::GetStruHeight ( );
__declspec(implementation_key(207)) void IComColumn::PutStruHeight ( double pVal );
__declspec(implementation_key(208)) _bstr_t IComColumn::GetStruStyle ( );
__declspec(implementation_key(209)) void IComColumn::PutStruStyle ( _bstr_t pVal );
__declspec(implementation_key(210)) ACAD_LAYER IComColumn::GetStruHatchLayer ( );
__declspec(implementation_key(211)) void IComColumn::PutStruHatchLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(212)) double IComCurveMesh::GetScale ( );
__declspec(implementation_key(213)) void IComCurveMesh::PutScale ( double pVal );
__declspec(implementation_key(214)) double IComCurveMesh::GetLayoutRotation ( );
__declspec(implementation_key(215)) void IComCurveMesh::PutLayoutRotation ( double pVal );
__declspec(implementation_key(216)) _bstr_t IComCurveMesh::GetViewType ( );
__declspec(implementation_key(217)) void IComCurveMesh::PutViewType ( _bstr_t pVal );
__declspec(implementation_key(218)) _bstr_t IComCurveMesh::GetPathLength ( );
__declspec(implementation_key(219)) _bstr_t IComCurveMesh::GetSideArea ( );
__declspec(implementation_key(220)) _bstr_t IComCurveMesh::GetShapePerimeter ( );
__declspec(implementation_key(221)) _bstr_t IComCurveMesh::GetVolume ( );
__declspec(implementation_key(222)) _variant_t IComCurveMesh::GetVertex ( );
__declspec(implementation_key(223)) void IComCurveMesh::PutVertex ( const _variant_t & pVal );
__declspec(implementation_key(224)) _bstr_t IComCurveMesh::GetShapeVisibility ( );
__declspec(implementation_key(225)) void IComCurveMesh::PutShapeVisibility ( _bstr_t pVal );
__declspec(implementation_key(226)) _bstr_t IComCurveMesh::GetShadowType ( );
__declspec(implementation_key(227)) void IComCurveMesh::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(228)) double IComCurveStair::GetScale ( );
__declspec(implementation_key(229)) void IComCurveStair::PutScale ( double pVal );
__declspec(implementation_key(230)) double IComCurveStair::GetLayoutRotation ( );
__declspec(implementation_key(231)) void IComCurveStair::PutLayoutRotation ( double pVal );
__declspec(implementation_key(232)) _bstr_t IComCurveStair::GetViewType ( );
__declspec(implementation_key(233)) void IComCurveStair::PutViewType ( _bstr_t pVal );
__declspec(implementation_key(234)) double IComCurveStair::GetElevation ( );
__declspec(implementation_key(235)) void IComCurveStair::PutElevation ( double pVal );
__declspec(implementation_key(236)) double IComCurveStair::GetStairHeight ( );
__declspec(implementation_key(237)) void IComCurveStair::PutStairHeight ( double pVal );
__declspec(implementation_key(238)) long IComCurveStair::GetStepNum ( );
__declspec(implementation_key(239)) void IComCurveStair::PutStepNum ( long pVal );
__declspec(implementation_key(240)) double IComCurveStair::GetStepHeight ( );
__declspec(implementation_key(241)) void IComCurveStair::PutStepHeight ( double pVal );
__declspec(implementation_key(242)) _bstr_t IComCurveStair::GetHasLBeam ( );
__declspec(implementation_key(243)) void IComCurveStair::PutHasLBeam ( _bstr_t pVal );
__declspec(implementation_key(244)) _bstr_t IComCurveStair::GetHasRBeam ( );
__declspec(implementation_key(245)) void IComCurveStair::PutHasRBeam ( _bstr_t pVal );
__declspec(implementation_key(246)) double IComCurveStair::GetBeamHeight ( );
__declspec(implementation_key(247)) void IComCurveStair::PutBeamHeight ( double pVal );
__declspec(implementation_key(248)) double IComCurveStair::GetBeamThickness ( );
__declspec(implementation_key(249)) void IComCurveStair::PutBeamThickness ( double pVal );
__declspec(implementation_key(250)) ACAD_LAYER IComCurveStair::GetBeamLayer ( );
__declspec(implementation_key(251)) void IComCurveStair::PutBeamLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(252)) ACAD_LAYER IComCurveStair::GetStepLayer ( );
__declspec(implementation_key(253)) void IComCurveStair::PutStepLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(254)) _bstr_t IComCurveStair::GetPaoType ( );
__declspec(implementation_key(255)) void IComCurveStair::PutPaoType ( _bstr_t pVal );
__declspec(implementation_key(256)) _bstr_t IComCurveStair::GetAsAscent ( );
__declspec(implementation_key(257)) void IComCurveStair::PutAsAscent ( _bstr_t pVal );
__declspec(implementation_key(258)) _bstr_t IComCurveStair::GetHasAscentSlab ( );
__declspec(implementation_key(259)) void IComCurveStair::PutHasAscentSlab ( _bstr_t pVal );
__declspec(implementation_key(260)) _bstr_t IComCurveStair::GetOnGround ( );
__declspec(implementation_key(261)) void IComCurveStair::PutOnGround ( _bstr_t pVal );
__declspec(implementation_key(262)) _bstr_t IComCurveStair::GetAlongWall ( );
__declspec(implementation_key(263)) void IComCurveStair::PutAlongWall ( _bstr_t pVal );
__declspec(implementation_key(264)) _bstr_t IComCurveStair::GetShadowType ( );
__declspec(implementation_key(265)) void IComCurveStair::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(266)) double IComHandRail::GetScale ( );
__declspec(implementation_key(267)) void IComHandRail::PutScale ( double pVal );
__declspec(implementation_key(268)) double IComHandRail::GetLayoutRotation ( );
__declspec(implementation_key(269)) void IComHandRail::PutLayoutRotation ( double pVal );
__declspec(implementation_key(270)) _bstr_t IComHandRail::GetViewType ( );
__declspec(implementation_key(271)) void IComHandRail::PutViewType ( _bstr_t pVal );
__declspec(implementation_key(272)) double IComHandRail::GetHeight ( );
__declspec(implementation_key(273)) void IComHandRail::PutHeight ( double pVal );
__declspec(implementation_key(274)) _bstr_t IComHandRail::GetThickness ( );
__declspec(implementation_key(275)) void IComHandRail::PutThickness ( _bstr_t pVal );
__declspec(implementation_key(276)) double IComHandRail::GetWidth ( );
__declspec(implementation_key(277)) void IComHandRail::PutWidth ( double pVal );
__declspec(implementation_key(278)) _variant_t IComHandRail::GetVertex ( );
__declspec(implementation_key(279)) void IComHandRail::PutVertex ( const _variant_t & pVal );
__declspec(implementation_key(280)) _bstr_t IComHandRail::GetAlignment ( );
__declspec(implementation_key(281)) void IComHandRail::PutAlignment ( _bstr_t pVal );
__declspec(implementation_key(282)) _bstr_t IComHandRail::GetShape ( );
__declspec(implementation_key(283)) void IComHandRail::PutShape ( _bstr_t pVal );
__declspec(implementation_key(284)) _bstr_t IComHandRail::GetShadowType ( );
__declspec(implementation_key(285)) void IComHandRail::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(286)) double IComLineStair::GetElevation ( );
__declspec(implementation_key(287)) void IComLineStair::PutElevation ( double pVal );
__declspec(implementation_key(288)) double IComLineStair::GetRotation ( );
__declspec(implementation_key(289)) void IComLineStair::PutRotation ( double pVal );
__declspec(implementation_key(290)) double IComLineStair::GetStairHeight ( );
__declspec(implementation_key(291)) void IComLineStair::PutStairHeight ( double pVal );
__declspec(implementation_key(292)) double IComLineStair::GetStairWidth ( );
__declspec(implementation_key(293)) void IComLineStair::PutStairWidth ( double pVal );
__declspec(implementation_key(294)) long IComLineStair::GetStepNum ( );
__declspec(implementation_key(295)) void IComLineStair::PutStepNum ( long pVal );
__declspec(implementation_key(296)) double IComLineStair::GetStepHeight ( );
__declspec(implementation_key(297)) void IComLineStair::PutStepHeight ( double pVal );
__declspec(implementation_key(298)) double IComLineStair::GetStepWidth ( );
__declspec(implementation_key(299)) void IComLineStair::PutStepWidth ( double pVal );
__declspec(implementation_key(300)) _bstr_t IComLineStair::GetHasLBeam ( );
__declspec(implementation_key(301)) void IComLineStair::PutHasLBeam ( _bstr_t pVal );
__declspec(implementation_key(302)) _bstr_t IComLineStair::GetHasRBeam ( );
__declspec(implementation_key(303)) void IComLineStair::PutHasRBeam ( _bstr_t pVal );
__declspec(implementation_key(304)) double IComLineStair::GetBeamHeight ( );
__declspec(implementation_key(305)) void IComLineStair::PutBeamHeight ( double pVal );
__declspec(implementation_key(306)) double IComLineStair::GetBeamThickness ( );
__declspec(implementation_key(307)) void IComLineStair::PutBeamThickness ( double pVal );
__declspec(implementation_key(308)) ACAD_LAYER IComLineStair::GetBeamLayer ( );
__declspec(implementation_key(309)) void IComLineStair::PutBeamLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(310)) ACAD_LAYER IComLineStair::GetStepLayer ( );
__declspec(implementation_key(311)) void IComLineStair::PutStepLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(312)) double IComLineStair::GetScale ( );
__declspec(implementation_key(313)) void IComLineStair::PutScale ( double pVal );
__declspec(implementation_key(314)) double IComLineStair::GetLayoutRotation ( );
__declspec(implementation_key(315)) void IComLineStair::PutLayoutRotation ( double pVal );
__declspec(implementation_key(316)) short IComLineStair::GetViewCtrl ( );
__declspec(implementation_key(317)) void IComLineStair::PutViewCtrl ( short pVal );
__declspec(implementation_key(318)) _bstr_t IComLineStair::GetAsAscent ( );
__declspec(implementation_key(319)) void IComLineStair::PutAsAscent ( _bstr_t pVal );
__declspec(implementation_key(320)) _bstr_t IComLineStair::GetHasAscentSlab ( );
__declspec(implementation_key(321)) void IComLineStair::PutHasAscentSlab ( _bstr_t pVal );
__declspec(implementation_key(322)) _bstr_t IComLineStair::GetOnGround ( );
__declspec(implementation_key(323)) void IComLineStair::PutOnGround ( _bstr_t pVal );
__declspec(implementation_key(324)) _bstr_t IComLineStair::GetAlongWall ( );
__declspec(implementation_key(325)) void IComLineStair::PutAlongWall ( _bstr_t pVal );
__declspec(implementation_key(326)) _bstr_t IComLineStair::GetPaoType ( );
__declspec(implementation_key(327)) void IComLineStair::PutPaoType ( _bstr_t pVal );
__declspec(implementation_key(328)) double IComOpening::GetScale ( );
__declspec(implementation_key(329)) void IComOpening::PutScale ( double pVal );
__declspec(implementation_key(330)) double IComOpening::GetLayoutRotation ( );
__declspec(implementation_key(331)) void IComOpening::PutLayoutRotation ( double pVal );
__declspec(implementation_key(332)) _bstr_t IComOpening::GetHoleType ( );
__declspec(implementation_key(333)) void IComOpening::PutHoleType ( _bstr_t pVal );
__declspec(implementation_key(334)) double IComOpening::GetWinSill ( );
__declspec(implementation_key(335)) void IComOpening::PutWinSill ( double pVal );
__declspec(implementation_key(336)) double IComOpening::GetDoorSill ( );
__declspec(implementation_key(337)) void IComOpening::PutDoorSill ( double pVal );
__declspec(implementation_key(338)) double IComOpening::GetHeight ( );
__declspec(implementation_key(339)) void IComOpening::PutHeight ( double pVal );
__declspec(implementation_key(340)) double IComOpening::GetWidth ( );
__declspec(implementation_key(341)) void IComOpening::PutWidth ( double pVal );
__declspec(implementation_key(342)) double IComOpening::GetStruWinSill ( );
__declspec(implementation_key(343)) void IComOpening::PutStruWinSill ( double pVal );
__declspec(implementation_key(344)) double IComOpening::GetBayThick ( );
__declspec(implementation_key(345)) void IComOpening::PutBayThick ( double pVal );
__declspec(implementation_key(346)) double IComOpening::GetSlabThickness ( );
__declspec(implementation_key(347)) void IComOpening::PutSlabThickness ( double pVal );
__declspec(implementation_key(348)) double IComOpening::GetUFrame ( );
__declspec(implementation_key(349)) void IComOpening::PutUFrame ( double pVal );
__declspec(implementation_key(350)) double IComOpening::GetVFrame ( );
__declspec(implementation_key(351)) void IComOpening::PutVFrame ( double pVal );
__declspec(implementation_key(352)) _bstr_t IComOpening::GetOutlineArea ( );
__declspec(implementation_key(353)) double IComOpening::GetOutlineLength ( );
__declspec(implementation_key(354)) _bstr_t IComOpening::GetLabel ( );
__declspec(implementation_key(355)) void IComOpening::PutLabel ( _bstr_t pVal );
__declspec(implementation_key(356)) double IComOpening::GetTextHeight ( );
__declspec(implementation_key(357)) void IComOpening::PutTextHeight ( double pVal );
__declspec(implementation_key(358)) _bstr_t IComOpening::GetTextStyle ( );
__declspec(implementation_key(359)) void IComOpening::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(360)) _bstr_t IComOpening::GetHideLabel ( );
__declspec(implementation_key(361)) void IComOpening::PutHideLabel ( _bstr_t pVal );
__declspec(implementation_key(362)) ACAD_LAYER IComOpening::GetTextLayer ( );
__declspec(implementation_key(363)) void IComOpening::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(364)) ACAD_LAYER IComOpening::GetGlassLayer ( );
__declspec(implementation_key(365)) void IComOpening::PutGlassLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(366)) ACAD_LAYER IComOpening::GetFrameLayer ( );
__declspec(implementation_key(367)) void IComOpening::PutFrameLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(368)) ACAD_LAYER IComOpening::GetSlabLayer ( );
__declspec(implementation_key(369)) void IComOpening::PutSlabLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(370)) _bstr_t IComOpening::GetProStyle ( );
__declspec(implementation_key(371)) void IComOpening::PutProStyle ( _bstr_t pVal );
__declspec(implementation_key(372)) _bstr_t IComOpening::GetLeftSlab ( );
__declspec(implementation_key(373)) void IComOpening::PutLeftSlab ( _bstr_t pVal );
__declspec(implementation_key(374)) _bstr_t IComOpening::GetRightSlab ( );
__declspec(implementation_key(375)) void IComOpening::PutRightSlab ( _bstr_t pVal );
__declspec(implementation_key(376)) double IComOpening::GetProWinSlabWidth ( );
__declspec(implementation_key(377)) void IComOpening::PutProWinSlabWidth ( double pVal );
__declspec(implementation_key(378)) double IComOpening::GetProWinSlabInsuThick ( );
__declspec(implementation_key(379)) void IComOpening::PutProWinSlabInsuThick ( double pVal );
__declspec(implementation_key(380)) _bstr_t IComOpening::GetSlot ( );
__declspec(implementation_key(381)) void IComOpening::PutSlot ( _bstr_t pVal );
__declspec(implementation_key(382)) _bstr_t IComOpening::GetSlotMaterial ( );
__declspec(implementation_key(383)) void IComOpening::PutSlotMaterial ( _bstr_t pVal );
__declspec(implementation_key(384)) double IComOpening::GetSlotExt ( );
__declspec(implementation_key(385)) void IComOpening::PutSlotExt ( double pVal );
__declspec(implementation_key(386)) double IComOpening::GetSlotWidth ( );
__declspec(implementation_key(387)) void IComOpening::PutSlotWidth ( double pVal );
__declspec(implementation_key(388)) double IComOpening::GetSlotInsuThick ( );
__declspec(implementation_key(389)) void IComOpening::PutSlotInsuThick ( double pVal );
__declspec(implementation_key(390)) _bstr_t IComOpening::GetSlotInsuCap ( );
__declspec(implementation_key(391)) void IComOpening::PutSlotInsuCap ( _bstr_t pVal );
__declspec(implementation_key(392)) _bstr_t IComOpening::GetGetKind ( );
__declspec(implementation_key(393)) _bstr_t IComOpening::GetGetSubKind ( );
__declspec(implementation_key(394)) void IComOpening::PutGetSubKind ( _bstr_t pVal );
__declspec(implementation_key(395)) _bstr_t IComOpening::GetHoleStyle ( );
__declspec(implementation_key(396)) void IComOpening::PutHoleStyle ( _bstr_t pVal );
__declspec(implementation_key(397)) _bstr_t IComOpening::GetEvacuationType ( );
__declspec(implementation_key(398)) void IComOpening::PutEvacuationType ( _bstr_t pVal );
__declspec(implementation_key(399)) _bstr_t IComOpening::GetUpLevel ( );
__declspec(implementation_key(400)) void IComOpening::PutUpLevel ( _bstr_t pVal );
__declspec(implementation_key(401)) short IComOpening::GetDoorLine ( );
__declspec(implementation_key(402)) void IComOpening::PutDoorLine ( short pVal );
__declspec(implementation_key(403)) double IComOpening::GetLineOffsetDist ( );
__declspec(implementation_key(404)) void IComOpening::PutLineOffsetDist ( double pVal );
__declspec(implementation_key(405)) _bstr_t IComOpening::GetStructure ( );
__declspec(implementation_key(406)) void IComOpening::PutStructure ( _bstr_t pVal );
__declspec(implementation_key(407)) _bstr_t IComOpening::GetExtShading ( );
__declspec(implementation_key(408)) void IComOpening::PutExtShading ( _bstr_t pVal );
__declspec(implementation_key(409)) double IComOpening::GetAreaRatio ( );
__declspec(implementation_key(410)) double IComOpening::GetConductivity ( );
__declspec(implementation_key(411)) _bstr_t IComOpening::GetUsage ( );
__declspec(implementation_key(412)) void IComOpening::PutUsage ( _bstr_t pVal );
__declspec(implementation_key(413)) _bstr_t IComOpening::GetShadowType ( );
__declspec(implementation_key(414)) void IComOpening::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(415)) _bstr_t IComOpening::GetIsHigh ( );
__declspec(implementation_key(416)) void IComOpening::PutIsHigh ( _bstr_t pVal );
__declspec(implementation_key(417)) double IComRail::GetScale ( );
__declspec(implementation_key(418)) void IComRail::PutScale ( double pVal );
__declspec(implementation_key(419)) double IComRail::GetLayoutRotation ( );
__declspec(implementation_key(420)) void IComRail::PutLayoutRotation ( double pVal );
__declspec(implementation_key(421)) _bstr_t IComRail::GetViewType ( );
__declspec(implementation_key(422)) void IComRail::PutViewType ( _bstr_t pVal );
__declspec(implementation_key(423)) double IComRail::GetUnitWidth ( );
__declspec(implementation_key(424)) void IComRail::PutUnitWidth ( double pVal );
__declspec(implementation_key(425)) double IComRail::GetWidth ( );
__declspec(implementation_key(426)) void IComRail::PutWidth ( double pVal );
__declspec(implementation_key(427)) _bstr_t IComRail::GetAlignment ( );
__declspec(implementation_key(428)) void IComRail::PutAlignment ( _bstr_t pVal );
__declspec(implementation_key(429)) _bstr_t IComRail::GetAutoExpand ( );
__declspec(implementation_key(430)) void IComRail::PutAutoExpand ( _bstr_t pVal );
__declspec(implementation_key(431)) _bstr_t IComRail::GetShadowType ( );
__declspec(implementation_key(432)) void IComRail::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(433)) double IComRectStair::GetScale ( );
__declspec(implementation_key(434)) void IComRectStair::PutScale ( double pVal );
__declspec(implementation_key(435)) double IComRectStair::GetLayoutRotation ( );
__declspec(implementation_key(436)) void IComRectStair::PutLayoutRotation ( double pVal );
__declspec(implementation_key(437)) short IComRectStair::GetViewCtrl ( );
__declspec(implementation_key(438)) void IComRectStair::PutViewCtrl ( short pVal );
__declspec(implementation_key(439)) double IComRectStair::GetStairHeight ( );
__declspec(implementation_key(440)) void IComRectStair::PutStairHeight ( double pVal );
__declspec(implementation_key(441)) double IComRectStair::GetSpaceWidth ( );
__declspec(implementation_key(442)) void IComRectStair::PutSpaceWidth ( double pVal );
__declspec(implementation_key(443)) double IComRectStair::GetStairWidth ( );
__declspec(implementation_key(444)) void IComRectStair::PutStairWidth ( double pVal );
__declspec(implementation_key(445)) double IComRectStair::GetSlabThick ( );
__declspec(implementation_key(446)) void IComRectStair::PutSlabThick ( double pVal );
__declspec(implementation_key(447)) double IComRectStair::GetStairThick ( );
__declspec(implementation_key(448)) void IComRectStair::PutStairThick ( double pVal );
__declspec(implementation_key(449)) double IComRectStair::GetElevation ( );
__declspec(implementation_key(450)) void IComRectStair::PutElevation ( double pVal );
__declspec(implementation_key(451)) double IComRectStair::GetUpSlabWidth ( );
__declspec(implementation_key(452)) void IComRectStair::PutUpSlabWidth ( double pVal );
__declspec(implementation_key(453)) double IComRectStair::GetDownSlabWidth ( );
__declspec(implementation_key(454)) void IComRectStair::PutDownSlabWidth ( double pVal );
__declspec(implementation_key(455)) short IComRectStair::GetStepTotalNum ( );
__declspec(implementation_key(456)) void IComRectStair::PutStepTotalNum ( short pVal );
__declspec(implementation_key(457)) _bstr_t IComRectStair::GetStruTextHeight ( );
__declspec(implementation_key(458)) void IComRectStair::PutStruTextHeight ( _bstr_t pVal );
__declspec(implementation_key(459)) _bstr_t IComRectStair::GetStruFontStyle ( );
__declspec(implementation_key(460)) void IComRectStair::PutStruFontStyle ( _bstr_t pVal );
__declspec(implementation_key(461)) short IComRectStair::GetStepNum1 ( );
__declspec(implementation_key(462)) void IComRectStair::PutStepNum1 ( short pVal );
__declspec(implementation_key(463)) short IComRectStair::GetStepNum2 ( );
__declspec(implementation_key(464)) void IComRectStair::PutStepNum2 ( short pVal );
__declspec(implementation_key(465)) double IComRectStair::GetStepHeight ( );
__declspec(implementation_key(466)) void IComRectStair::PutStepHeight ( double pVal );
__declspec(implementation_key(467)) double IComRectStair::GetStepWidth ( );
__declspec(implementation_key(468)) void IComRectStair::PutStepWidth ( double pVal );
__declspec(implementation_key(469)) double IComRectStair::GetRailWidth ( );
__declspec(implementation_key(470)) void IComRectStair::PutRailWidth ( double pVal );
__declspec(implementation_key(471)) double IComRectStair::GetRailDistToSide ( );
__declspec(implementation_key(472)) void IComRectStair::PutRailDistToSide ( double pVal );
__declspec(implementation_key(473)) _bstr_t IComRectStair::GetRailMake ( );
__declspec(implementation_key(474)) void IComRectStair::PutRailMake ( _bstr_t pVal );
__declspec(implementation_key(475)) _bstr_t IComRectStair::GetHasOutRail ( );
__declspec(implementation_key(476)) void IComRectStair::PutHasOutRail ( _bstr_t pVal );
__declspec(implementation_key(477)) _bstr_t IComRectStair::GetHasOutHandRail ( );
__declspec(implementation_key(478)) void IComRectStair::PutHasOutHandRail ( _bstr_t pVal );
__declspec(implementation_key(479)) _bstr_t IComRectStair::GetRailConnection ( );
__declspec(implementation_key(480)) void IComRectStair::PutRailConnection ( _bstr_t pVal );
__declspec(implementation_key(481)) _bstr_t IComRectStair::GetPlatType ( );
__declspec(implementation_key(482)) void IComRectStair::PutPlatType ( _bstr_t pVal );
__declspec(implementation_key(483)) _bstr_t IComRectStair::GetHasSlab ( );
__declspec(implementation_key(484)) void IComRectStair::PutHasSlab ( _bstr_t pVal );
__declspec(implementation_key(485)) double IComRectStair::GetSlabSize ( );
__declspec(implementation_key(486)) void IComRectStair::PutSlabSize ( double pVal );
__declspec(implementation_key(487)) double IComRectStair::GetSlabThickness ( );
__declspec(implementation_key(488)) void IComRectStair::PutSlabThickness ( double pVal );
__declspec(implementation_key(489)) _bstr_t IComRectStair::GetLeftBeam ( );
__declspec(implementation_key(490)) void IComRectStair::PutLeftBeam ( _bstr_t pVal );
__declspec(implementation_key(491)) _bstr_t IComRectStair::GetRightBeam ( );
__declspec(implementation_key(492)) void IComRectStair::PutRightBeam ( _bstr_t pVal );
__declspec(implementation_key(493)) double IComRectStair::GetBeamHeight ( );
__declspec(implementation_key(494)) void IComRectStair::PutBeamHeight ( double pVal );
__declspec(implementation_key(495)) double IComRectStair::GetBeamThickness ( );
__declspec(implementation_key(496)) void IComRectStair::PutBeamThickness ( double pVal );
__declspec(implementation_key(497)) ACAD_LAYER IComRectStair::GetStepLayer ( );
__declspec(implementation_key(498)) void IComRectStair::PutStepLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(499)) ACAD_LAYER IComRectStair::GetBeamLayer ( );
__declspec(implementation_key(500)) void IComRectStair::PutBeamLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(501)) ACAD_LAYER IComRectStair::GetRailLayer ( );
__declspec(implementation_key(502)) void IComRectStair::PutRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(503)) ACAD_LAYER IComRectStair::GetHandRailLayer ( );
__declspec(implementation_key(504)) void IComRectStair::PutHandRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(505)) ACAD_LAYER IComRectStair::GetTextLayer ( );
__declspec(implementation_key(506)) void IComRectStair::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(507)) ACAD_LAYER IComRectStair::GetArrowLayer ( );
__declspec(implementation_key(508)) void IComRectStair::PutArrowLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(509)) _bstr_t IComRectStair::GetAsAcsent ( );
__declspec(implementation_key(510)) void IComRectStair::PutAsAcsent ( _bstr_t pVal );
__declspec(implementation_key(511)) _bstr_t IComRectStair::GetHasAcsentSlab ( );
__declspec(implementation_key(512)) void IComRectStair::PutHasAcsentSlab ( _bstr_t pVal );
__declspec(implementation_key(513)) _bstr_t IComRectStair::GetOnGround ( );
__declspec(implementation_key(514)) void IComRectStair::PutOnGround ( _bstr_t pVal );
__declspec(implementation_key(515)) _bstr_t IComRectStair::GetAlignment ( );
__declspec(implementation_key(516)) void IComRectStair::PutAlignment ( _bstr_t pVal );
__declspec(implementation_key(517)) _bstr_t IComRectStair::GetStartSide ( );
__declspec(implementation_key(518)) void IComRectStair::PutStartSide ( _bstr_t pVal );
__declspec(implementation_key(519)) _bstr_t IComRectStair::GetStairFlag ( );
__declspec(implementation_key(520)) void IComRectStair::PutStairFlag ( _bstr_t pVal );
__declspec(implementation_key(521)) _bstr_t IComRectStair::GetShadowType ( );
__declspec(implementation_key(522)) void IComRectStair::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(523)) _bstr_t IComRectStair::GetHasArrow ( );
__declspec(implementation_key(524)) void IComRectStair::PutHasArrow ( _bstr_t pVal );
__declspec(implementation_key(525)) double IComRectStair::GetFirstRailDist ( );
__declspec(implementation_key(526)) void IComRectStair::PutFirstRailDist ( double pVal );
__declspec(implementation_key(527)) double IComRectStair::GetEndRailDist ( );
__declspec(implementation_key(528)) void IComRectStair::PutEndRailDist ( double pVal );
__declspec(implementation_key(529)) _bstr_t IComRectStair::GetTextHeight ( );
__declspec(implementation_key(530)) void IComRectStair::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(531)) _bstr_t IComRectStair::GetFontStyle ( );
__declspec(implementation_key(532)) void IComRectStair::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(533)) _bstr_t IComRectStair::GetTextUp ( );
__declspec(implementation_key(534)) void IComRectStair::PutTextUp ( _bstr_t pVal );
__declspec(implementation_key(535)) _bstr_t IComRectStair::GetTextDown ( );
__declspec(implementation_key(536)) void IComRectStair::PutTextDown ( _bstr_t pVal );
__declspec(implementation_key(537)) double IComRectStair::GetSectHeight ( );
__declspec(implementation_key(538)) void IComRectStair::PutSectHeight ( double pVal );
__declspec(implementation_key(539)) short IComRectStair::GetSectStepNum ( );
__declspec(implementation_key(540)) void IComRectStair::PutSectStepNum ( short pVal );
__declspec(implementation_key(541)) _bstr_t IComRectStair::GetEvacuateDia ( );
__declspec(implementation_key(542)) void IComRectStair::PutEvacuateDia ( _bstr_t pVal );
__declspec(implementation_key(543)) _bstr_t IComRectStair::GetEvacuateDiaPos ( );
__declspec(implementation_key(544)) void IComRectStair::PutEvacuateDiaPos ( _bstr_t pVal );
__declspec(implementation_key(545)) _variant_t IComRectStair::GetEvacuateDiaColor ( );
__declspec(implementation_key(546)) void IComRectStair::PutEvacuateDiaColor ( const _variant_t & pVal );
__declspec(implementation_key(547)) double IComSlab::GetElevation ( );
__declspec(implementation_key(548)) void IComSlab::PutElevation ( double pVal );
__declspec(implementation_key(549)) double IComSlab::GetThickness ( );
__declspec(implementation_key(550)) void IComSlab::PutThickness ( double pVal );
__declspec(implementation_key(551)) double IComSlab::GetScale ( );
__declspec(implementation_key(552)) void IComSlab::PutScale ( double pVal );
__declspec(implementation_key(553)) double IComSlab::GetLayoutRotation ( );
__declspec(implementation_key(554)) void IComSlab::PutLayoutRotation ( double pVal );
__declspec(implementation_key(555)) _bstr_t IComSlab::GetShadowType ( );
__declspec(implementation_key(556)) void IComSlab::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(557)) double IComSlopeRoof::GetElevation ( );
__declspec(implementation_key(558)) void IComSlopeRoof::PutElevation ( double pVal );
__declspec(implementation_key(559)) _variant_t IComSlopeRoof::GetVertex ( );
__declspec(implementation_key(560)) void IComSlopeRoof::PutVertex ( const _variant_t & pVal );
__declspec(implementation_key(561)) double IComSlopeRoof::GetSlopeAngle ( );
__declspec(implementation_key(562)) void IComSlopeRoof::PutSlopeAngle ( double pVal );
__declspec(implementation_key(563)) double IComSlopeRoof::GetScale ( );
__declspec(implementation_key(564)) void IComSlopeRoof::PutScale ( double pVal );
__declspec(implementation_key(565)) double IComSlopeRoof::GetLayoutRotation ( );
__declspec(implementation_key(566)) void IComSlopeRoof::PutLayoutRotation ( double pVal );
__declspec(implementation_key(567)) _bstr_t IComSlopeRoof::GetShadowType ( );
__declspec(implementation_key(568)) void IComSlopeRoof::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(569)) double IComSpace::GetScale ( );
__declspec(implementation_key(570)) void IComSpace::PutScale ( double pVal );
__declspec(implementation_key(571)) double IComSpace::GetLayoutRotation ( );
__declspec(implementation_key(572)) void IComSpace::PutLayoutRotation ( double pVal );
__declspec(implementation_key(573)) _bstr_t IComSpace::GetDispMode ( );
__declspec(implementation_key(574)) void IComSpace::PutDispMode ( _bstr_t pVal );
__declspec(implementation_key(575)) _bstr_t IComSpace::GetCode ( );
__declspec(implementation_key(576)) void IComSpace::PutCode ( _bstr_t pVal );
__declspec(implementation_key(577)) _bstr_t IComSpace::GetShowCode ( );
__declspec(implementation_key(578)) void IComSpace::PutShowCode ( _bstr_t pVal );
__declspec(implementation_key(579)) double IComSpace::GetHeight ( );
__declspec(implementation_key(580)) void IComSpace::PutHeight ( double pVal );
__declspec(implementation_key(581)) double IComSpace::GetFloorThickness ( );
__declspec(implementation_key(582)) void IComSpace::PutFloorThickness ( double pVal );
__declspec(implementation_key(583)) double IComSpace::GetStuccoThickness ( );
__declspec(implementation_key(584)) void IComSpace::PutStuccoThickness ( double pVal );
__declspec(implementation_key(585)) double IComSpace::GetKickboard ( );
__declspec(implementation_key(586)) double IComSpace::GetPerimeter ( );
__declspec(implementation_key(587)) _bstr_t IComSpace::GetUseVolume ( );
__declspec(implementation_key(588)) _bstr_t IComSpace::GetUseArea ( );
__declspec(implementation_key(589)) _bstr_t IComSpace::GetOccuArea ( );
__declspec(implementation_key(590)) _bstr_t IComSpace::GetWallSurfArea ( );
__declspec(implementation_key(591)) _bstr_t IComSpace::GetExtWallArea ( );
__declspec(implementation_key(592)) _bstr_t IComSpace::GetExtWinArea ( );
__declspec(implementation_key(593)) _bstr_t IComSpace::GetExtDoorArea ( );
__declspec(implementation_key(594)) _bstr_t IComSpace::GetAreaComputeType ( );
__declspec(implementation_key(595)) void IComSpace::PutAreaComputeType ( _bstr_t pVal );
__declspec(implementation_key(596)) ACAD_LAYER IComSpace::GetHatchLayer ( );
__declspec(implementation_key(597)) void IComSpace::PutHatchLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(598)) _bstr_t IComSpace::GetMaskFlag ( );
__declspec(implementation_key(599)) void IComSpace::PutMaskFlag ( _bstr_t pVal );
__declspec(implementation_key(600)) _bstr_t IComSpace::GetFloor3D ( );
__declspec(implementation_key(601)) void IComSpace::PutFloor3D ( _bstr_t pVal );
__declspec(implementation_key(602)) _bstr_t IComSpace::GetNameType ( );
__declspec(implementation_key(603)) void IComSpace::PutNameType ( _bstr_t pVal );
__declspec(implementation_key(604)) _bstr_t IComSpace::GetName ( );
__declspec(implementation_key(605)) void IComSpace::PutName ( _bstr_t pVal );
__declspec(implementation_key(606)) _bstr_t IComSpace::GetName2 ( );
__declspec(implementation_key(607)) void IComSpace::PutName2 ( _bstr_t pVal );
__declspec(implementation_key(608)) _bstr_t IComSpace::GetShowName ( );
__declspec(implementation_key(609)) void IComSpace::PutShowName ( _bstr_t pVal );
__declspec(implementation_key(610)) _bstr_t IComSpace::GetShowArea ( );
__declspec(implementation_key(611)) void IComSpace::PutShowArea ( _bstr_t pVal );
__declspec(implementation_key(612)) _bstr_t IComSpace::GetAreaUnit ( );
__declspec(implementation_key(613)) void IComSpace::PutAreaUnit ( _bstr_t pVal );
__declspec(implementation_key(614)) double IComSpace::GetTextHeight ( );
__declspec(implementation_key(615)) void IComSpace::PutTextHeight ( double pVal );
__declspec(implementation_key(616)) double IComSpace::GetTextRotation ( );
__declspec(implementation_key(617)) void IComSpace::PutTextRotation ( double pVal );
__declspec(implementation_key(618)) _bstr_t IComSpace::GetTextStyle ( );
__declspec(implementation_key(619)) void IComSpace::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(620)) _bstr_t IComSpace::GetFloorType ( );
__declspec(implementation_key(621)) void IComSpace::PutFloorType ( _bstr_t pVal );
__declspec(implementation_key(622)) _bstr_t IComSpace::GetStructure ( );
__declspec(implementation_key(623)) void IComSpace::PutStructure ( _bstr_t pVal );
__declspec(implementation_key(624)) double IComSpace::GetConductivity ( );
__declspec(implementation_key(625)) _bstr_t IComSpace::GetHasRoof ( );
__declspec(implementation_key(626)) void IComSpace::PutHasRoof ( _bstr_t pVal );
__declspec(implementation_key(627)) _bstr_t IComSpace::GetStructure2 ( );
__declspec(implementation_key(628)) void IComSpace::PutStructure2 ( _bstr_t pVal );
__declspec(implementation_key(629)) double IComSpace::GetConductivity2 ( );
__declspec(implementation_key(630)) double IComSpace::GetInertiaIndex2 ( );
__declspec(implementation_key(631)) _bstr_t IComSpace::GetShadowType ( );
__declspec(implementation_key(632)) void IComSpace::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(633)) _bstr_t IComSpace::GetShowOutLine ( );
__declspec(implementation_key(634)) void IComSpace::PutShowOutLine ( _bstr_t pVal );
__declspec(implementation_key(635)) _bstr_t IComSpace::GetShowHatch ( );
__declspec(implementation_key(636)) void IComSpace::PutShowHatch ( _bstr_t pVal );
__declspec(implementation_key(637)) _bstr_t IComSpace::GetHatchStyle ( );
__declspec(implementation_key(638)) void IComSpace::PutHatchStyle ( _bstr_t pVal );
__declspec(implementation_key(639)) _variant_t IComSpace::GetHatchColor ( );
__declspec(implementation_key(640)) void IComSpace::PutHatchColor ( const _variant_t & pVal );
__declspec(implementation_key(641)) _bstr_t IComSpace::GetHatchScale ( );
__declspec(implementation_key(642)) void IComSpace::PutHatchScale ( _bstr_t pVal );
__declspec(implementation_key(643)) _bstr_t IComSpace::GetHatchAngle ( );
__declspec(implementation_key(644)) void IComSpace::PutHatchAngle ( _bstr_t pVal );
__declspec(implementation_key(645)) double IComFireZone::GetScale ( );
__declspec(implementation_key(646)) void IComFireZone::PutScale ( double pVal );
__declspec(implementation_key(647)) double IComFireZone::GetLayoutRotation ( );
__declspec(implementation_key(648)) void IComFireZone::PutLayoutRotation ( double pVal );
__declspec(implementation_key(649)) double IComFireZone::GetTextHeight ( );
__declspec(implementation_key(650)) void IComFireZone::PutTextHeight ( double pVal );
__declspec(implementation_key(651)) _bstr_t IComFireZone::GetTextStyle ( );
__declspec(implementation_key(652)) void IComFireZone::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(653)) ACAD_COLOR IComFireZone::GetTextColor ( );
__declspec(implementation_key(654)) void IComFireZone::PutTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(655)) _bstr_t IComFireZone::GetIsDimFireZoneName ( );
__declspec(implementation_key(656)) void IComFireZone::PutIsDimFireZoneName ( _bstr_t pVal );
__declspec(implementation_key(657)) _bstr_t IComFireZone::GetIsDimSumArea ( );
__declspec(implementation_key(658)) void IComFireZone::PutIsDimSumArea ( _bstr_t pVal );
__declspec(implementation_key(659)) _bstr_t IComFireZone::GetIsDimSubNameAndArea ( );
__declspec(implementation_key(660)) void IComFireZone::PutIsDimSubNameAndArea ( _bstr_t pVal );
__declspec(implementation_key(661)) _bstr_t IComFireZone::GetIsDimFunction ( );
__declspec(implementation_key(662)) void IComFireZone::PutIsDimFunction ( _bstr_t pVal );
__declspec(implementation_key(663)) _bstr_t IComFireZone::GetIsDimAutoExtinguishingSys ( );
__declspec(implementation_key(664)) void IComFireZone::PutIsDimAutoExtinguishingSys ( _bstr_t pVal );
__declspec(implementation_key(665)) _bstr_t IComFireZone::GetIsDimFireZoneUint ( );
__declspec(implementation_key(666)) void IComFireZone::PutIsDimFireZoneUint ( _bstr_t pVal );
__declspec(implementation_key(667)) _bstr_t IComFireZone::GetAreaAccuracy ( );
__declspec(implementation_key(668)) void IComFireZone::PutAreaAccuracy ( _bstr_t pVal );
__declspec(implementation_key(669)) _bstr_t IComFireZone::GetFireZoneName ( );
__declspec(implementation_key(670)) void IComFireZone::PutFireZoneName ( _bstr_t pVal );
__declspec(implementation_key(671)) double IComFireZone::GetFireZoneSumArea ( );
__declspec(implementation_key(672)) void IComFireZone::PutFireZoneSumArea ( double pVal );
__declspec(implementation_key(673)) _bstr_t IComFireZone::GetHaveSubFireZone ( );
__declspec(implementation_key(674)) void IComFireZone::PutHaveSubFireZone ( _bstr_t pVal );
__declspec(implementation_key(675)) _bstr_t IComFireZone::GetSubFireZoneName ( );
__declspec(implementation_key(676)) void IComFireZone::PutSubFireZoneName ( _bstr_t pVal );
__declspec(implementation_key(677)) double IComFireZone::GetSubFireZoneArea ( );
__declspec(implementation_key(678)) void IComFireZone::PutSubFireZoneArea ( double pVal );
__declspec(implementation_key(679)) _bstr_t IComFireZone::GetFireZoneFunction ( );
__declspec(implementation_key(680)) void IComFireZone::PutFireZoneFunction ( _bstr_t pVal );
__declspec(implementation_key(681)) _bstr_t IComFireZone::GetAutoExtinguishingSys ( );
__declspec(implementation_key(682)) void IComFireZone::PutAutoExtinguishingSys ( _bstr_t pVal );
__declspec(implementation_key(683)) double IComFireZone::GetLocalSprayArea ( );
__declspec(implementation_key(684)) void IComFireZone::PutLocalSprayArea ( double pVal );
__declspec(implementation_key(685)) _bstr_t IComFireZone::GetStandardRange ( );
__declspec(implementation_key(686)) void IComFireZone::PutStandardRange ( _bstr_t pVal );
__declspec(implementation_key(687)) ACAD_LAYER IComFireZone::GetHatchLayer ( );
__declspec(implementation_key(688)) void IComFireZone::PutHatchLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(689)) _bstr_t IComFireZone::GetIsDimTextFrame ( );
__declspec(implementation_key(690)) void IComFireZone::PutIsDimTextFrame ( _bstr_t pVal );
__declspec(implementation_key(691)) _bstr_t IComFireZone::GetIsDimFireZoneMask ( );
__declspec(implementation_key(692)) void IComFireZone::PutIsDimFireZoneMask ( _bstr_t pVal );
__declspec(implementation_key(693)) double IComFireZone::GetOutLineWidth ( );
__declspec(implementation_key(694)) void IComFireZone::PutOutLineWidth ( double pVal );
__declspec(implementation_key(695)) _bstr_t IComFireZone::GetHasHatch ( );
__declspec(implementation_key(696)) void IComFireZone::PutHasHatch ( _bstr_t pVal );
__declspec(implementation_key(697)) _bstr_t IComFireZone::GetHatchStyle ( );
__declspec(implementation_key(698)) void IComFireZone::PutHatchStyle ( _bstr_t pVal );
__declspec(implementation_key(699)) _variant_t IComFireZone::GetHatchColor ( );
__declspec(implementation_key(700)) void IComFireZone::PutHatchColor ( const _variant_t & pVal );
__declspec(implementation_key(701)) _bstr_t IComFireZone::GetHatchScale ( );
__declspec(implementation_key(702)) void IComFireZone::PutHatchScale ( _bstr_t pVal );
__declspec(implementation_key(703)) _bstr_t IComFireZone::GetHatchAngle ( );
__declspec(implementation_key(704)) void IComFireZone::PutHatchAngle ( _bstr_t pVal );
__declspec(implementation_key(705)) _bstr_t IComFireZone::GetShadowType ( );
__declspec(implementation_key(706)) void IComFireZone::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(707)) double IComStep::GetElevation ( );
__declspec(implementation_key(708)) void IComStep::PutElevation ( double pVal );
__declspec(implementation_key(709)) double IComStep::GetStepWidth ( );
__declspec(implementation_key(710)) void IComStep::PutStepWidth ( double pVal );
__declspec(implementation_key(711)) double IComStep::GetStepHeight ( );
__declspec(implementation_key(712)) void IComStep::PutStepHeight ( double pVal );
__declspec(implementation_key(713)) long IComStep::GetStepNum ( );
__declspec(implementation_key(714)) void IComStep::PutStepNum ( long pVal );
__declspec(implementation_key(715)) double IComStep::GetAllStepHeight ( );
__declspec(implementation_key(716)) _bstr_t IComStep::GetBaseFace ( );
__declspec(implementation_key(717)) void IComStep::PutBaseFace ( _bstr_t pVal );
__declspec(implementation_key(718)) double IComStep::GetScale ( );
__declspec(implementation_key(719)) void IComStep::PutScale ( double pVal );
__declspec(implementation_key(720)) double IComStep::GetLayoutRotation ( );
__declspec(implementation_key(721)) void IComStep::PutLayoutRotation ( double pVal );
__declspec(implementation_key(722)) _bstr_t IComStep::GetShadowType ( );
__declspec(implementation_key(723)) void IComStep::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(724)) _bstr_t IComStep::GetDownStep ( );
__declspec(implementation_key(725)) void IComStep::PutDownStep ( _bstr_t pVal );
__declspec(implementation_key(726)) double IComVertSlab::GetScale ( );
__declspec(implementation_key(727)) void IComVertSlab::PutScale ( double pVal );
__declspec(implementation_key(728)) double IComVertSlab::GetLayoutRotation ( );
__declspec(implementation_key(729)) void IComVertSlab::PutLayoutRotation ( double pVal );
__declspec(implementation_key(730)) _bstr_t IComVertSlab::GetViewType ( );
__declspec(implementation_key(731)) void IComVertSlab::PutViewType ( _bstr_t pVal );
__declspec(implementation_key(732)) double IComVertSlab::GetStartPoint ( );
__declspec(implementation_key(733)) void IComVertSlab::PutStartPoint ( double pVal );
__declspec(implementation_key(734)) double IComVertSlab::GetEndPoint ( );
__declspec(implementation_key(735)) void IComVertSlab::PutEndPoint ( double pVal );
__declspec(implementation_key(736)) double IComVertSlab::GetHeightS ( );
__declspec(implementation_key(737)) void IComVertSlab::PutHeightS ( double pVal );
__declspec(implementation_key(738)) double IComVertSlab::GetHeightE ( );
__declspec(implementation_key(739)) void IComVertSlab::PutHeightE ( double pVal );
__declspec(implementation_key(740)) double IComVertSlab::GetThickness ( );
__declspec(implementation_key(741)) void IComVertSlab::PutThickness ( double pVal );
__declspec(implementation_key(742)) _bstr_t IComVertSlab::GetVolume ( );
__declspec(implementation_key(743)) _bstr_t IComVertSlab::GetShadowType ( );
__declspec(implementation_key(744)) void IComVertSlab::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(745)) double IComWall::GetScale ( );
__declspec(implementation_key(746)) void IComWall::PutScale ( double pVal );
__declspec(implementation_key(747)) double IComWall::GetLayoutRotation ( );
__declspec(implementation_key(748)) void IComWall::PutLayoutRotation ( double pVal );
__declspec(implementation_key(749)) double IComWall::GetElevation ( );
__declspec(implementation_key(750)) void IComWall::PutElevation ( double pVal );
__declspec(implementation_key(751)) double IComWall::GetLeftWidth ( );
__declspec(implementation_key(752)) void IComWall::PutLeftWidth ( double pVal );
__declspec(implementation_key(753)) double IComWall::GetRightWidth ( );
__declspec(implementation_key(754)) void IComWall::PutRightWidth ( double pVal );
__declspec(implementation_key(755)) _bstr_t IComWall::GetLabel ( );
__declspec(implementation_key(756)) void IComWall::PutLabel ( _bstr_t pVal );
__declspec(implementation_key(757)) _bstr_t IComWall::GetTextHeight ( );
__declspec(implementation_key(758)) void IComWall::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(759)) _bstr_t IComWall::GetTextStyle ( );
__declspec(implementation_key(760)) void IComWall::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(761)) _bstr_t IComWall::GetHideLabel ( );
__declspec(implementation_key(762)) void IComWall::PutHideLabel ( _bstr_t pVal );
__declspec(implementation_key(763)) double IComWall::GetHeight ( );
__declspec(implementation_key(764)) void IComWall::PutHeight ( double pVal );
__declspec(implementation_key(765)) _bstr_t IComWall::GetIsArc ( );
__declspec(implementation_key(766)) _bstr_t IComWall::GetStruIsArc ( );
__declspec(implementation_key(767)) _bstr_t IComWall::GetLSurfaceArea ( );
__declspec(implementation_key(768)) _bstr_t IComWall::GetRSurfaceArea ( );
__declspec(implementation_key(769)) _bstr_t IComWall::GetHoleArea ( );
__declspec(implementation_key(770)) _bstr_t IComWall::GetVolume ( );
__declspec(implementation_key(771)) _bstr_t IComWall::GetHoleVolume ( );
__declspec(implementation_key(772)) ACAD_LAYER IComWall::GetLeftLayer ( );
__declspec(implementation_key(773)) void IComWall::PutLeftLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(774)) double IComWall::GetRadius ( );
__declspec(implementation_key(775)) void IComWall::PutRadius ( double pVal );
__declspec(implementation_key(776)) _bstr_t IComWall::GetIsExternal ( );
__declspec(implementation_key(777)) _bstr_t IComWall::GetTopFace ( );
__declspec(implementation_key(778)) void IComWall::PutTopFace ( _bstr_t pVal );
__declspec(implementation_key(779)) _bstr_t IComWall::GetBottomFace ( );
__declspec(implementation_key(780)) void IComWall::PutBottomFace ( _bstr_t pVal );
__declspec(implementation_key(781)) _bstr_t IComWall::GetEndClose ( );
__declspec(implementation_key(782)) void IComWall::PutEndClose ( _bstr_t pVal );
__declspec(implementation_key(783)) _bstr_t IComWall::GetUsage ( );
__declspec(implementation_key(784)) void IComWall::PutUsage ( _bstr_t pVal );
__declspec(implementation_key(785)) _bstr_t IComWall::GetStyle ( );
__declspec(implementation_key(786)) void IComWall::PutStyle ( _bstr_t pVal );
__declspec(implementation_key(787)) ACAD_LAYER IComWall::GetRightLayer ( );
__declspec(implementation_key(788)) void IComWall::PutRightLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(789)) ACAD_LAYER IComWall::GetHatchLayer ( );
__declspec(implementation_key(790)) void IComWall::PutHatchLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(791)) ACAD_LAYER IComWall::GetSurfLayer ( );
__declspec(implementation_key(792)) void IComWall::PutSurfLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(793)) _bstr_t IComWall::GetLeftSpace ( );
__declspec(implementation_key(794)) _bstr_t IComWall::GetRightSpace ( );
__declspec(implementation_key(795)) _bstr_t IComWall::GetEnUsage ( );
__declspec(implementation_key(796)) void IComWall::PutEnUsage ( _bstr_t pVal );
__declspec(implementation_key(797)) _bstr_t IComWall::GetIOFeature ( );
__declspec(implementation_key(798)) void IComWall::PutIOFeature ( _bstr_t pVal );
__declspec(implementation_key(799)) _bstr_t IComWall::GetStructure ( );
__declspec(implementation_key(800)) void IComWall::PutStructure ( _bstr_t pVal );
__declspec(implementation_key(801)) double IComWall::GetAreaRatio ( );
__declspec(implementation_key(802)) double IComWall::GetConductivity ( );
__declspec(implementation_key(803)) double IComWall::GetInertiaIndex ( );
__declspec(implementation_key(804)) _bstr_t IComWall::GetShadowType ( );
__declspec(implementation_key(805)) void IComWall::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(806)) double IComWall::GetTotalWidth ( );
__declspec(implementation_key(807)) _bstr_t IComWall::GetInsulate ( );
__declspec(implementation_key(808)) void IComWall::PutInsulate ( _bstr_t pVal );
__declspec(implementation_key(809)) double IComWall::GetInsuThick ( );
__declspec(implementation_key(810)) void IComWall::PutInsuThick ( double pVal );
__declspec(implementation_key(811)) double IComWall::GetStruHeight ( );
__declspec(implementation_key(812)) void IComWall::PutStruHeight ( double pVal );
__declspec(implementation_key(813)) double IComWall::GetLeftInsuThick ( );
__declspec(implementation_key(814)) void IComWall::PutLeftInsuThick ( double pVal );
__declspec(implementation_key(815)) double IComWall::GetRightInsuThick ( );
__declspec(implementation_key(816)) void IComWall::PutRightInsuThick ( double pVal );
__declspec(implementation_key(817)) _bstr_t IComWall::GetStemInsulate ( );
__declspec(implementation_key(818)) void IComWall::PutStemInsulate ( _bstr_t pVal );
__declspec(implementation_key(819)) double IComWall::GetStemInsulateThick ( );
__declspec(implementation_key(820)) void IComWall::PutStemInsulateThick ( double pVal );
__declspec(implementation_key(821)) _bstr_t IComWall::GetInsulateClose ( );
__declspec(implementation_key(822)) void IComWall::PutInsulateClose ( _bstr_t pVal );
__declspec(implementation_key(823)) double IComWallPatch::GetElevation ( );
__declspec(implementation_key(824)) void IComWallPatch::PutElevation ( double pVal );
__declspec(implementation_key(825)) double IComWallPatch::GetHeight ( );
__declspec(implementation_key(826)) void IComWallPatch::PutHeight ( double pVal );
__declspec(implementation_key(827)) _bstr_t IComWallPatch::GetVolume ( );
__declspec(implementation_key(828)) _bstr_t IComWallPatch::GetArea ( );
__declspec(implementation_key(829)) ACAD_LAYER IComWallPatch::GetLayerHatch ( );
__declspec(implementation_key(830)) void IComWallPatch::PutLayerHatch ( ACAD_LAYER pVal );
__declspec(implementation_key(831)) double IComWallPatch::GetScale ( );
__declspec(implementation_key(832)) void IComWallPatch::PutScale ( double pVal );
__declspec(implementation_key(833)) double IComWallPatch::GetLayoutRotation ( );
__declspec(implementation_key(834)) void IComWallPatch::PutLayoutRotation ( double pVal );
__declspec(implementation_key(835)) _bstr_t IComWallPatch::GetShadowType ( );
__declspec(implementation_key(836)) void IComWallPatch::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(837)) ACAD_LAYER IComWallPatch::GetSurfLayer ( );
__declspec(implementation_key(838)) void IComWallPatch::PutSurfLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(839)) _bstr_t IComWallPatch::GetInsulate ( );
__declspec(implementation_key(840)) void IComWallPatch::PutInsulate ( _bstr_t pVal );
__declspec(implementation_key(841)) double IComWallPatch::GetInsuThick ( );
__declspec(implementation_key(842)) void IComWallPatch::PutInsuThick ( double pVal );
__declspec(implementation_key(843)) _bstr_t IComLineText::GetHeight ( );
__declspec(implementation_key(844)) void IComLineText::PutHeight ( _bstr_t pVal );
__declspec(implementation_key(845)) _bstr_t IComLineText::GetAlignment ( );
__declspec(implementation_key(846)) void IComLineText::PutAlignment ( _bstr_t pVal );
__declspec(implementation_key(847)) double IComLineText::GetRotation ( );
__declspec(implementation_key(848)) void IComLineText::PutRotation ( double pVal );
__declspec(implementation_key(849)) _bstr_t IComLineText::GetTextStyle ( );
__declspec(implementation_key(850)) void IComLineText::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(851)) _bstr_t IComLineText::GetText ( );
__declspec(implementation_key(852)) void IComLineText::PutText ( _bstr_t pVal );
__declspec(implementation_key(853)) double IComLineText::GetScale ( );
__declspec(implementation_key(854)) void IComLineText::PutScale ( double pVal );
__declspec(implementation_key(855)) double IComLineText::GetLayoutRotation ( );
__declspec(implementation_key(856)) void IComLineText::PutLayoutRotation ( double pVal );
__declspec(implementation_key(857)) _bstr_t IComMutiText::GetHeight ( );
__declspec(implementation_key(858)) void IComMutiText::PutHeight ( _bstr_t pVal );
__declspec(implementation_key(859)) _bstr_t IComMutiText::GetAlignment ( );
__declspec(implementation_key(860)) void IComMutiText::PutAlignment ( _bstr_t pVal );
__declspec(implementation_key(861)) double IComMutiText::GetRotation ( );
__declspec(implementation_key(862)) void IComMutiText::PutRotation ( double pVal );
__declspec(implementation_key(863)) _bstr_t IComMutiText::GetTextStyle ( );
__declspec(implementation_key(864)) void IComMutiText::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(865)) _bstr_t IComMutiText::GetPageWidth ( );
__declspec(implementation_key(866)) void IComMutiText::PutPageWidth ( _bstr_t pVal );
__declspec(implementation_key(867)) _bstr_t IComMutiText::GetLineSpace ( );
__declspec(implementation_key(868)) void IComMutiText::PutLineSpace ( _bstr_t pVal );
__declspec(implementation_key(869)) double IComMutiText::GetScale ( );
__declspec(implementation_key(870)) void IComMutiText::PutScale ( double pVal );
__declspec(implementation_key(871)) double IComMutiText::GetLayoutRotation ( );
__declspec(implementation_key(872)) void IComMutiText::PutLayoutRotation ( double pVal );
__declspec(implementation_key(873)) _bstr_t IComSymbComposing::GetHeight ( );
__declspec(implementation_key(874)) void IComSymbComposing::PutHeight ( _bstr_t pVal );
__declspec(implementation_key(875)) _bstr_t IComSymbComposing::GetAlignment ( );
__declspec(implementation_key(876)) void IComSymbComposing::PutAlignment ( _bstr_t pVal );
__declspec(implementation_key(877)) _bstr_t IComSymbComposing::GetFontStyle ( );
__declspec(implementation_key(878)) void IComSymbComposing::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(879)) _bstr_t IComSymbComposing::GetText ( );
__declspec(implementation_key(880)) void IComSymbComposing::PutText ( _bstr_t pVal );
__declspec(implementation_key(881)) _bstr_t IComSymbComposing::GetTextSide ( );
__declspec(implementation_key(882)) void IComSymbComposing::PutTextSide ( _bstr_t pVal );
__declspec(implementation_key(883)) double IComSymbComposing::GetScale ( );
__declspec(implementation_key(884)) void IComSymbComposing::PutScale ( double pVal );
__declspec(implementation_key(885)) double IComSymbComposing::GetLayoutRotation ( );
__declspec(implementation_key(886)) void IComSymbComposing::PutLayoutRotation ( double pVal );
__declspec(implementation_key(887)) ACAD_LAYER IComSymbComposing::GetTextLayer ( );
__declspec(implementation_key(888)) void IComSymbComposing::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(889)) ACAD_COLOR IComSymbComposing::GetTextColor ( );
__declspec(implementation_key(890)) void IComSymbComposing::PutTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(891)) _bstr_t IComSymbComposing::GetParagraphSpace ( );
__declspec(implementation_key(892)) void IComSymbComposing::PutParagraphSpace ( _bstr_t pVal );
__declspec(implementation_key(893)) _bstr_t IComSymbComposing::GetLineSpace ( );
__declspec(implementation_key(894)) void IComSymbComposing::PutLineSpace ( _bstr_t pVal );
__declspec(implementation_key(895)) _bstr_t IComSymbComposing::GetText2BaseRatio ( );
__declspec(implementation_key(896)) void IComSymbComposing::PutText2BaseRatio ( _bstr_t pVal );
__declspec(implementation_key(897)) _bstr_t IComSymbComposing::GetTextType ( );
__declspec(implementation_key(898)) void IComSymbComposing::PutTextType ( _bstr_t pVal );
__declspec(implementation_key(899)) _bstr_t IComSymbComposing::GetTextBaseLen ( );
__declspec(implementation_key(900)) void IComSymbComposing::PutTextBaseLen ( _bstr_t pVal );
__declspec(implementation_key(901)) _bstr_t IComSymbComposing::GetDist2Line ( );
__declspec(implementation_key(902)) void IComSymbComposing::PutDist2Line ( _bstr_t pVal );
__declspec(implementation_key(903)) _bstr_t IComSymbComposing::GetPageWidth ( );
__declspec(implementation_key(904)) void IComSymbComposing::PutPageWidth ( _bstr_t pVal );
__declspec(implementation_key(905)) _bstr_t IComSymbComposing::GetSpace ( );
__declspec(implementation_key(906)) void IComSymbComposing::PutSpace ( _bstr_t pVal );
__declspec(implementation_key(907)) _bstr_t IComSymbComposing::GetCirPointSize ( );
__declspec(implementation_key(908)) void IComSymbComposing::PutCirPointSize ( _bstr_t pVal );
__declspec(implementation_key(909)) _bstr_t IComSymbArrow::GetHeight ( );
__declspec(implementation_key(910)) void IComSymbArrow::PutHeight ( _bstr_t pVal );
__declspec(implementation_key(911)) _bstr_t IComSymbArrow::GetFontStyle ( );
__declspec(implementation_key(912)) void IComSymbArrow::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(913)) _bstr_t IComSymbArrow::GetAlignment ( );
__declspec(implementation_key(914)) void IComSymbArrow::PutAlignment ( _bstr_t pVal );
__declspec(implementation_key(915)) _bstr_t IComSymbArrow::GetText ( );
__declspec(implementation_key(916)) void IComSymbArrow::PutText ( _bstr_t pVal );
__declspec(implementation_key(917)) _bstr_t IComSymbArrow::GetText2 ( );
__declspec(implementation_key(918)) void IComSymbArrow::PutText2 ( _bstr_t pVal );
__declspec(implementation_key(919)) double IComSymbArrow::GetScale ( );
__declspec(implementation_key(920)) void IComSymbArrow::PutScale ( double pVal );
__declspec(implementation_key(921)) _bstr_t IComSymbArrow::GetArrowSize ( );
__declspec(implementation_key(922)) void IComSymbArrow::PutArrowSize ( _bstr_t pVal );
__declspec(implementation_key(923)) double IComSymbArrow::GetLayoutRotation ( );
__declspec(implementation_key(924)) void IComSymbArrow::PutLayoutRotation ( double pVal );
__declspec(implementation_key(925)) ACAD_LAYER IComSymbArrow::GetTextLayer ( );
__declspec(implementation_key(926)) void IComSymbArrow::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(927)) ACAD_COLOR IComSymbArrow::GetTextColor ( );
__declspec(implementation_key(928)) void IComSymbArrow::PutTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(929)) _bstr_t IComSymbArrow::GetText2BaseRatio ( );
__declspec(implementation_key(930)) void IComSymbArrow::PutText2BaseRatio ( _bstr_t pVal );
__declspec(implementation_key(931)) _bstr_t IComSymbDrawingIndex::GetFontStyle ( );
__declspec(implementation_key(932)) void IComSymbDrawingIndex::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(933)) _bstr_t IComSymbDrawingIndex::GetDrawingLabel ( );
__declspec(implementation_key(934)) void IComSymbDrawingIndex::PutDrawingLabel ( _bstr_t pVal );
__declspec(implementation_key(935)) _bstr_t IComSymbDrawingIndex::GetIndexLabel ( );
__declspec(implementation_key(936)) void IComSymbDrawingIndex::PutIndexLabel ( _bstr_t pVal );
__declspec(implementation_key(937)) double IComSymbDrawingIndex::GetScale ( );
__declspec(implementation_key(938)) void IComSymbDrawingIndex::PutScale ( double pVal );
__declspec(implementation_key(939)) double IComSymbDrawingIndex::GetLayoutRotation ( );
__declspec(implementation_key(940)) void IComSymbDrawingIndex::PutLayoutRotation ( double pVal );
__declspec(implementation_key(941)) _bstr_t IComSymbDrawingIndex::GetDiameter ( );
__declspec(implementation_key(942)) void IComSymbDrawingIndex::PutDiameter ( _bstr_t pVal );
__declspec(implementation_key(943)) _bstr_t IComSymbDrawingIndex::GetLineWeight ( );
__declspec(implementation_key(944)) void IComSymbDrawingIndex::PutLineWeight ( _bstr_t pVal );
__declspec(implementation_key(945)) ACAD_LAYER IComSymbDrawingIndex::GetTextLayer ( );
__declspec(implementation_key(946)) void IComSymbDrawingIndex::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(947)) ACAD_COLOR IComSymbDrawingIndex::GetTextColor ( );
__declspec(implementation_key(948)) void IComSymbDrawingIndex::PutTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(949)) _bstr_t IComSymbDrawingIndex::GetShowScale ( );
__declspec(implementation_key(950)) void IComSymbDrawingIndex::PutShowScale ( _bstr_t pVal );
__declspec(implementation_key(951)) _bstr_t IComSymbDrawingIndex::GetScaleText ( );
__declspec(implementation_key(952)) void IComSymbDrawingIndex::PutScaleText ( _bstr_t pVal );
__declspec(implementation_key(953)) _bstr_t IComSymbDrawingIndex::GetScaleStyle ( );
__declspec(implementation_key(954)) void IComSymbDrawingIndex::PutScaleStyle ( _bstr_t pVal );
__declspec(implementation_key(955)) _bstr_t IComSymbDrawingIndex::GetScaleHeight ( );
__declspec(implementation_key(956)) void IComSymbDrawingIndex::PutScaleHeight ( _bstr_t pVal );
__declspec(implementation_key(957)) _bstr_t IComSymbDrawingIndex::GetOldStyle ( );
__declspec(implementation_key(958)) void IComSymbDrawingIndex::PutOldStyle ( _bstr_t pVal );
__declspec(implementation_key(959)) _bstr_t IComSymbDrawingIndex::GetTextRatio ( );
__declspec(implementation_key(960)) void IComSymbDrawingIndex::PutTextRatio ( _bstr_t pVal );
__declspec(implementation_key(961)) double IComSymbInSight::GetScale ( );
__declspec(implementation_key(962)) void IComSymbInSight::PutScale ( double pVal );
__declspec(implementation_key(963)) double IComSymbInSight::GetLayoutRotation ( );
__declspec(implementation_key(964)) void IComSymbInSight::PutLayoutRotation ( double pVal );
__declspec(implementation_key(965)) _bstr_t IComSymbInSight::GetIndexLabel ( );
__declspec(implementation_key(966)) void IComSymbInSight::PutIndexLabel ( _bstr_t pVal );
__declspec(implementation_key(967)) _bstr_t IComSymbInSight::GetDrawingLabel ( );
__declspec(implementation_key(968)) void IComSymbInSight::PutDrawingLabel ( _bstr_t pVal );
__declspec(implementation_key(969)) _bstr_t IComSymbInSight::GetDiameter ( );
__declspec(implementation_key(970)) void IComSymbInSight::PutDiameter ( _bstr_t pVal );
__declspec(implementation_key(971)) _bstr_t IComSymbInSight::GetFontStyle ( );
__declspec(implementation_key(972)) void IComSymbInSight::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(973)) ACAD_LAYER IComSymbInSight::GetTextLayer ( );
__declspec(implementation_key(974)) void IComSymbInSight::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(975)) ACAD_COLOR IComSymbInSight::GetTextColor ( );
__declspec(implementation_key(976)) void IComSymbInSight::PutTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(977)) _bstr_t IComSymbInSight::GetTextRatio ( );
__declspec(implementation_key(978)) void IComSymbInSight::PutTextRatio ( _bstr_t pVal );
__declspec(implementation_key(979)) _bstr_t IComSymbMultiLeader::GetHeight ( );
__declspec(implementation_key(980)) void IComSymbMultiLeader::PutHeight ( _bstr_t pVal );
__declspec(implementation_key(981)) _bstr_t IComSymbMultiLeader::GetFontStyle ( );
__declspec(implementation_key(982)) void IComSymbMultiLeader::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(983)) _bstr_t IComSymbMultiLeader::GetArrowStyle ( );
__declspec(implementation_key(984)) void IComSymbMultiLeader::PutArrowStyle ( _bstr_t pVal );
__declspec(implementation_key(985)) _bstr_t IComSymbMultiLeader::GetUpText ( );
__declspec(implementation_key(986)) void IComSymbMultiLeader::PutUpText ( _bstr_t pVal );
__declspec(implementation_key(987)) _bstr_t IComSymbMultiLeader::GetDownText ( );
__declspec(implementation_key(988)) void IComSymbMultiLeader::PutDownText ( _bstr_t pVal );
__declspec(implementation_key(989)) double IComSymbMultiLeader::GetScale ( );
__declspec(implementation_key(990)) void IComSymbMultiLeader::PutScale ( double pVal );
__declspec(implementation_key(991)) double IComSymbMultiLeader::GetLayoutRotation ( );
__declspec(implementation_key(992)) void IComSymbMultiLeader::PutLayoutRotation ( double pVal );
__declspec(implementation_key(993)) ACAD_LAYER IComSymbMultiLeader::GetTextLayer ( );
__declspec(implementation_key(994)) void IComSymbMultiLeader::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(995)) ACAD_COLOR IComSymbMultiLeader::GetTextColor ( );
__declspec(implementation_key(996)) void IComSymbMultiLeader::PutTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(997)) _bstr_t IComSymbMultiLeader::GetText2BaseRatio ( );
__declspec(implementation_key(998)) void IComSymbMultiLeader::PutText2BaseRatio ( _bstr_t pVal );
__declspec(implementation_key(999)) _bstr_t IComSymbMultiLeader::GetAlignType ( );
__declspec(implementation_key(1000)) void IComSymbMultiLeader::PutAlignType ( _bstr_t pVal );
__declspec(implementation_key(1001)) _bstr_t IComSymbMultiLeader::GetUpTextType ( );
__declspec(implementation_key(1002)) void IComSymbMultiLeader::PutUpTextType ( _bstr_t pVal );
__declspec(implementation_key(1003)) _bstr_t IComSymbMultiLeader::GetUpPageWidth ( );
__declspec(implementation_key(1004)) void IComSymbMultiLeader::PutUpPageWidth ( _bstr_t pVal );
__declspec(implementation_key(1005)) _bstr_t IComSymbMultiLeader::GetDownTextType ( );
__declspec(implementation_key(1006)) void IComSymbMultiLeader::PutDownTextType ( _bstr_t pVal );
__declspec(implementation_key(1007)) _bstr_t IComSymbMultiLeader::GetDownPageWidth ( );
__declspec(implementation_key(1008)) void IComSymbMultiLeader::PutDownPageWidth ( _bstr_t pVal );
__declspec(implementation_key(1009)) _bstr_t IComSymbElev::GetText ( );
__declspec(implementation_key(1010)) void IComSymbElev::PutText ( _bstr_t pVal );
__declspec(implementation_key(1011)) _bstr_t IComSymbElev::GetFontStyle ( );
__declspec(implementation_key(1012)) void IComSymbElev::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(1013)) _bstr_t IComSymbElev::GetTextHeight ( );
__declspec(implementation_key(1014)) void IComSymbElev::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(1015)) _bstr_t IComSymbElev::GetText2BaseRatio ( );
__declspec(implementation_key(1016)) void IComSymbElev::PutText2BaseRatio ( _bstr_t pVal );
__declspec(implementation_key(1017)) _bstr_t IComSymbElev::GetFloorsOnLeftSide ( );
__declspec(implementation_key(1018)) void IComSymbElev::PutFloorsOnLeftSide ( _bstr_t pVal );
__declspec(implementation_key(1019)) _bstr_t IComSymbElev::GetHasBaseLine ( );
__declspec(implementation_key(1020)) void IComSymbElev::PutHasBaseLine ( _bstr_t pVal );
__declspec(implementation_key(1021)) _bstr_t IComSymbElev::GetHasLeader ( );
__declspec(implementation_key(1022)) void IComSymbElev::PutHasLeader ( _bstr_t pVal );
__declspec(implementation_key(1023)) double IComSymbElev::GetScale ( );
__declspec(implementation_key(1024)) void IComSymbElev::PutScale ( double pVal );
__declspec(implementation_key(1025)) _bstr_t IComSymbElev::GetPrecision ( );
__declspec(implementation_key(1026)) void IComSymbElev::PutPrecision ( _bstr_t pVal );
__declspec(implementation_key(1027)) double IComSymbElev::GetLayoutRotation ( );
__declspec(implementation_key(1028)) void IComSymbElev::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1029)) _bstr_t IComSymbElev::GetFillMode ( );
__declspec(implementation_key(1030)) void IComSymbElev::PutFillMode ( _bstr_t pVal );
__declspec(implementation_key(1031)) _bstr_t IComSymbElev::GetSitePlanElevMode ( );
__declspec(implementation_key(1032)) void IComSymbElev::PutSitePlanElevMode ( _bstr_t pVal );
__declspec(implementation_key(1033)) ACAD_LAYER IComSymbElev::GetTextLayer ( );
__declspec(implementation_key(1034)) void IComSymbElev::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1035)) ACAD_COLOR IComSymbElev::GetTextColor ( );
__declspec(implementation_key(1036)) void IComSymbElev::PutTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(1037)) double IComSymbIndex::GetScale ( );
__declspec(implementation_key(1038)) void IComSymbIndex::PutScale ( double pVal );
__declspec(implementation_key(1039)) double IComSymbIndex::GetLayoutRotation ( );
__declspec(implementation_key(1040)) void IComSymbIndex::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1041)) _bstr_t IComSymbIndex::GetHeight ( );
__declspec(implementation_key(1042)) void IComSymbIndex::PutHeight ( _bstr_t pVal );
__declspec(implementation_key(1043)) _bstr_t IComSymbIndex::GetDimStyle ( );
__declspec(implementation_key(1044)) void IComSymbIndex::PutDimStyle ( _bstr_t pVal );
__declspec(implementation_key(1045)) _bstr_t IComSymbIndex::GetUpText ( );
__declspec(implementation_key(1046)) void IComSymbIndex::PutUpText ( _bstr_t pVal );
__declspec(implementation_key(1047)) _bstr_t IComSymbIndex::GetDownText ( );
__declspec(implementation_key(1048)) void IComSymbIndex::PutDownText ( _bstr_t pVal );
__declspec(implementation_key(1049)) _bstr_t IComSymbIndex::GetUpTextType ( );
__declspec(implementation_key(1050)) void IComSymbIndex::PutUpTextType ( _bstr_t pVal );
__declspec(implementation_key(1051)) _bstr_t IComSymbIndex::GetUpPageWidth ( );
__declspec(implementation_key(1052)) void IComSymbIndex::PutUpPageWidth ( _bstr_t pVal );
__declspec(implementation_key(1053)) _bstr_t IComSymbIndex::GetDownTextType ( );
__declspec(implementation_key(1054)) void IComSymbIndex::PutDownTextType ( _bstr_t pVal );
__declspec(implementation_key(1055)) _bstr_t IComSymbIndex::GetDownPageWidth ( );
__declspec(implementation_key(1056)) void IComSymbIndex::PutDownPageWidth ( _bstr_t pVal );
__declspec(implementation_key(1057)) _bstr_t IComSymbIndex::GetFontStyle ( );
__declspec(implementation_key(1058)) void IComSymbIndex::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(1059)) _bstr_t IComSymbIndex::GetDrawingLabel ( );
__declspec(implementation_key(1060)) void IComSymbIndex::PutDrawingLabel ( _bstr_t pVal );
__declspec(implementation_key(1061)) _bstr_t IComSymbIndex::GetIndexLabel ( );
__declspec(implementation_key(1062)) void IComSymbIndex::PutIndexLabel ( _bstr_t pVal );
__declspec(implementation_key(1063)) ACAD_COLOR IComSymbIndex::GetTextColor ( );
__declspec(implementation_key(1064)) void IComSymbIndex::PutTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(1065)) _bstr_t IComSymbIndex::GetOldStyle ( );
__declspec(implementation_key(1066)) void IComSymbIndex::PutOldStyle ( _bstr_t pVal );
__declspec(implementation_key(1067)) _bstr_t IComSymbIndex::GetDiameter ( );
__declspec(implementation_key(1068)) void IComSymbIndex::PutDiameter ( _bstr_t pVal );
__declspec(implementation_key(1069)) _bstr_t IComSymbIndex::GetTextRatio ( );
__declspec(implementation_key(1070)) void IComSymbIndex::PutTextRatio ( _bstr_t pVal );
__declspec(implementation_key(1071)) _bstr_t IComSymbIndex::GetText2BaseRatio ( );
__declspec(implementation_key(1072)) void IComSymbIndex::PutText2BaseRatio ( _bstr_t pVal );
__declspec(implementation_key(1073)) _bstr_t IComSymbIndex::GetAlignType ( );
__declspec(implementation_key(1074)) void IComSymbIndex::PutAlignType ( _bstr_t pVal );
__declspec(implementation_key(1075)) _bstr_t IComSymbIndex::GetExtendLine ( );
__declspec(implementation_key(1076)) void IComSymbIndex::PutExtendLine ( _bstr_t pVal );
__declspec(implementation_key(1077)) ACAD_LAYER IComSymbIndex::GetTextLayer ( );
__declspec(implementation_key(1078)) void IComSymbIndex::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1079)) _bstr_t IComSymbSection::GetHeight ( );
__declspec(implementation_key(1080)) void IComSymbSection::PutHeight ( _bstr_t pVal );
__declspec(implementation_key(1081)) _bstr_t IComSymbSection::GetText ( );
__declspec(implementation_key(1082)) void IComSymbSection::PutText ( _bstr_t pVal );
__declspec(implementation_key(1083)) _bstr_t IComSymbSection::GetFontStyle ( );
__declspec(implementation_key(1084)) void IComSymbSection::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(1085)) _bstr_t IComSymbSection::GetIsShowIndex ( );
__declspec(implementation_key(1086)) void IComSymbSection::PutIsShowIndex ( _bstr_t pVal );
__declspec(implementation_key(1087)) _bstr_t IComSymbSection::GetDrawHeight ( );
__declspec(implementation_key(1088)) void IComSymbSection::PutDrawHeight ( _bstr_t pVal );
__declspec(implementation_key(1089)) _bstr_t IComSymbSection::GetDrawText ( );
__declspec(implementation_key(1090)) void IComSymbSection::PutDrawText ( _bstr_t pVal );
__declspec(implementation_key(1091)) _bstr_t IComSymbSection::GetDrawStyle ( );
__declspec(implementation_key(1092)) void IComSymbSection::PutDrawStyle ( _bstr_t pVal );
__declspec(implementation_key(1093)) _bstr_t IComSymbSection::GetDrawLocal ( );
__declspec(implementation_key(1094)) void IComSymbSection::PutDrawLocal ( _bstr_t pVal );
__declspec(implementation_key(1095)) _bstr_t IComSymbSection::GetDrawDirect ( );
__declspec(implementation_key(1096)) void IComSymbSection::PutDrawDirect ( _bstr_t pVal );
__declspec(implementation_key(1097)) _bstr_t IComSymbSection::GetDrawModulus ( );
__declspec(implementation_key(1098)) void IComSymbSection::PutDrawModulus ( _bstr_t pVal );
__declspec(implementation_key(1099)) double IComSymbSection::GetScale ( );
__declspec(implementation_key(1100)) void IComSymbSection::PutScale ( double pVal );
__declspec(implementation_key(1101)) double IComSymbSection::GetLayoutRotation ( );
__declspec(implementation_key(1102)) void IComSymbSection::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1103)) ACAD_LAYER IComSymbSection::GetTextLayer ( );
__declspec(implementation_key(1104)) void IComSymbSection::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1105)) ACAD_COLOR IComSymbSection::GetTextColor ( );
__declspec(implementation_key(1106)) void IComSymbSection::PutTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(1107)) short IComSymbSection::GetSectionType ( );
__declspec(implementation_key(1108)) void IComSymbSection::PutSectionType ( short pVal );
__declspec(implementation_key(1109)) _bstr_t IComSymbNorthThumb::GetText ( );
__declspec(implementation_key(1110)) void IComSymbNorthThumb::PutText ( _bstr_t pVal );
__declspec(implementation_key(1111)) _bstr_t IComSymbNorthThumb::GetFontStyle ( );
__declspec(implementation_key(1112)) void IComSymbNorthThumb::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(1113)) ACAD_COLOR IComSymbNorthThumb::GetTextColor ( );
__declspec(implementation_key(1114)) void IComSymbNorthThumb::PutTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(1115)) _bstr_t IComSymbNorthThumb::GetHeight ( );
__declspec(implementation_key(1116)) void IComSymbNorthThumb::PutHeight ( _bstr_t pVal );
__declspec(implementation_key(1117)) _bstr_t IComSymbNorthThumb::GetRotation ( );
__declspec(implementation_key(1118)) void IComSymbNorthThumb::PutRotation ( _bstr_t pVal );
__declspec(implementation_key(1119)) double IComSymbNorthThumb::GetScale ( );
__declspec(implementation_key(1120)) void IComSymbNorthThumb::PutScale ( double pVal );
__declspec(implementation_key(1121)) _bstr_t IComSymbNorthThumb::GetRadius ( );
__declspec(implementation_key(1122)) void IComSymbNorthThumb::PutRadius ( _bstr_t pVal );
__declspec(implementation_key(1123)) double IComSymbNorthThumb::GetLayoutRotation ( );
__declspec(implementation_key(1124)) void IComSymbNorthThumb::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1125)) _bstr_t IComDimension::GetDimStyle ( );
__declspec(implementation_key(1126)) void IComDimension::PutDimStyle ( _bstr_t pVal );
__declspec(implementation_key(1127)) double IComDimension::GetScale ( );
__declspec(implementation_key(1128)) void IComDimension::PutScale ( double pVal );
__declspec(implementation_key(1129)) double IComDimension::GetLayoutRotation ( );
__declspec(implementation_key(1130)) void IComDimension::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1131)) _bstr_t IComDimension::GetAssociate ( );
__declspec(implementation_key(1132)) void IComDimension::PutAssociate ( _bstr_t pVal );
__declspec(implementation_key(1133)) _bstr_t IComRadiusDim::GetDimStyle ( );
__declspec(implementation_key(1134)) void IComRadiusDim::PutDimStyle ( _bstr_t pVal );
__declspec(implementation_key(1135)) double IComRadiusDim::GetScale ( );
__declspec(implementation_key(1136)) void IComRadiusDim::PutScale ( double pVal );
__declspec(implementation_key(1137)) _bstr_t IComRadiusDim::GetDesText ( );
__declspec(implementation_key(1138)) void IComRadiusDim::PutDesText ( _bstr_t pVal );
__declspec(implementation_key(1139)) _bstr_t IComRadiusDim::GetText ( );
__declspec(implementation_key(1140)) _bstr_t IComRadiusDim::GetRadiusType ( );
__declspec(implementation_key(1141)) void IComRadiusDim::PutRadiusType ( _bstr_t pVal );
__declspec(implementation_key(1142)) double IComRadiusDim::GetLayoutRotation ( );
__declspec(implementation_key(1143)) void IComRadiusDim::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1144)) _bstr_t IComAxisLabel::GetTextStyle ( );
__declspec(implementation_key(1145)) void IComAxisLabel::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(1146)) _bstr_t IComAxisLabel::GetRadius ( );
__declspec(implementation_key(1147)) void IComAxisLabel::PutRadius ( _bstr_t pVal );
__declspec(implementation_key(1148)) double IComAxisLabel::GetScale ( );
__declspec(implementation_key(1149)) void IComAxisLabel::PutScale ( double pVal );
__declspec(implementation_key(1150)) ACAD_LAYER IComAxisLabel::GetTextLayer ( );
__declspec(implementation_key(1151)) void IComAxisLabel::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1152)) double IComAxisLabel::GetLayoutRotation ( );
__declspec(implementation_key(1153)) void IComAxisLabel::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1154)) double IComAxisLabel::GetLeaderLen1 ( );
__declspec(implementation_key(1155)) void IComAxisLabel::PutLeaderLen1 ( double pVal );
__declspec(implementation_key(1156)) double IComAxisLabel::GetLeaderLen2 ( );
__declspec(implementation_key(1157)) void IComAxisLabel::PutLeaderLen2 ( double pVal );
__declspec(implementation_key(1158)) _bstr_t IComAxisLabel::GetCircleTextStyle ( );
__declspec(implementation_key(1159)) void IComAxisLabel::PutCircleTextStyle ( _bstr_t pVal );
__declspec(implementation_key(1160)) _bstr_t IComAxisLabel::GetTextRatio ( );
__declspec(implementation_key(1161)) void IComAxisLabel::PutTextRatio ( _bstr_t pVal );
__declspec(implementation_key(1162)) _bstr_t IComAxisLabel::GetHideAxisText ( );
__declspec(implementation_key(1163)) void IComAxisLabel::PutHideAxisText ( _bstr_t pVal );
__declspec(implementation_key(1164)) short IComSymbRupture::GetRuptureNum ( );
__declspec(implementation_key(1165)) void IComSymbRupture::PutRuptureNum ( short pVal );
__declspec(implementation_key(1166)) double IComSymbRupture::GetScale ( );
__declspec(implementation_key(1167)) void IComSymbRupture::PutScale ( double pVal );
__declspec(implementation_key(1168)) double IComSymbRupture::GetLayoutRotation ( );
__declspec(implementation_key(1169)) void IComSymbRupture::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1170)) _bstr_t IComSymbCoord::GetTextHeight ( );
__declspec(implementation_key(1171)) void IComSymbCoord::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(1172)) _bstr_t IComSymbCoord::GetTextStyle ( );
__declspec(implementation_key(1173)) void IComSymbCoord::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(1174)) ACAD_COLOR IComSymbCoord::GetTextColor ( );
__declspec(implementation_key(1175)) void IComSymbCoord::PutTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(1176)) double IComSymbCoord::GetScale ( );
__declspec(implementation_key(1177)) void IComSymbCoord::PutScale ( double pVal );
__declspec(implementation_key(1178)) double IComSymbCoord::GetXValue ( );
__declspec(implementation_key(1179)) void IComSymbCoord::PutXValue ( double pVal );
//__declspec(implementation_key(1180)) double IComSymbCoord::GetYValue ( );
__declspec(implementation_key(1181)) void IComSymbCoord::PutYValue ( double pVal );
__declspec(implementation_key(1182)) _variant_t IComSymbCoord::GetLocation ( );
__declspec(implementation_key(1183)) void IComSymbCoord::PutLocation ( const _variant_t & pVal );
__declspec(implementation_key(1184)) _bstr_t IComSymbCoord::GetStyle ( );
__declspec(implementation_key(1185)) void IComSymbCoord::PutStyle ( _bstr_t pVal );
__declspec(implementation_key(1186)) _bstr_t IComSymbCoord::GetPrecision ( );
__declspec(implementation_key(1187)) void IComSymbCoord::PutPrecision ( _bstr_t pVal );
__declspec(implementation_key(1188)) double IComSymbCoord::GetLayoutRotation ( );
__declspec(implementation_key(1189)) void IComSymbCoord::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1190)) _bstr_t IComSymbCoord::GetText2BaseRatio ( );
__declspec(implementation_key(1191)) void IComSymbCoord::PutText2BaseRatio ( _bstr_t pVal );
__declspec(implementation_key(1192)) _bstr_t IComSymbCoord::GetCoordShowMode ( );
__declspec(implementation_key(1193)) void IComSymbCoord::PutCoordShowMode ( _bstr_t pVal );
__declspec(implementation_key(1194)) _bstr_t IComSymbCoord::GetLabelNumber ( );
__declspec(implementation_key(1195)) void IComSymbCoord::PutLabelNumber ( _bstr_t pVal );
__declspec(implementation_key(1196)) double IComSheet::GetScale ( );
__declspec(implementation_key(1197)) void IComSheet::PutScale ( double pVal );
__declspec(implementation_key(1198)) double IComSheet::GetLayoutRotation ( );
__declspec(implementation_key(1199)) void IComSheet::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1200)) _bstr_t IComSheet::GetAllTextStyle ( );
__declspec(implementation_key(1201)) void IComSheet::PutAllTextStyle ( _bstr_t pVal );
__declspec(implementation_key(1202)) _bstr_t IComSheet::GetAllTextSize ( );
__declspec(implementation_key(1203)) void IComSheet::PutAllTextSize ( _bstr_t pVal );
__declspec(implementation_key(1204)) ACAD_COLOR IComSheet::GetAllTextColor ( );
__declspec(implementation_key(1205)) void IComSheet::PutAllTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(1206)) _bstr_t IComSheet::GetAllSpaceFactor ( );
__declspec(implementation_key(1207)) void IComSheet::PutAllSpaceFactor ( _bstr_t pVal );
__declspec(implementation_key(1208)) _bstr_t IComSheet::GetAllHAlign ( );
__declspec(implementation_key(1209)) void IComSheet::PutAllHAlign ( _bstr_t pVal );
__declspec(implementation_key(1210)) _bstr_t IComSheet::GetAllVAlign ( );
__declspec(implementation_key(1211)) void IComSheet::PutAllVAlign ( _bstr_t pVal );
__declspec(implementation_key(1212)) _bstr_t IComSheet::GetAllAutoLine ( );
__declspec(implementation_key(1213)) void IComSheet::PutAllAutoLine ( _bstr_t pVal );
__declspec(implementation_key(1214)) _bstr_t IComSheet::GetAllInherit ( );
__declspec(implementation_key(1215)) void IComSheet::PutAllInherit ( _bstr_t pVal );
__declspec(implementation_key(1216)) _bstr_t IComSheet::GetHasHLine ( );
__declspec(implementation_key(1217)) void IComSheet::PutHasHLine ( _bstr_t pVal );
__declspec(implementation_key(1218)) ACAD_COLOR IComSheet::GetHLineColor ( );
__declspec(implementation_key(1219)) void IComSheet::PutHLineColor ( ACAD_COLOR pVal );
__declspec(implementation_key(1220)) _bstr_t IComSheet::GetHLineStyle ( );
__declspec(implementation_key(1221)) void IComSheet::PutHLineStyle ( _bstr_t pVal );
__declspec(implementation_key(1222)) _bstr_t IComSheet::GetHLineWidth ( );
__declspec(implementation_key(1223)) void IComSheet::PutHLineWidth ( _bstr_t pVal );
__declspec(implementation_key(1224)) _bstr_t IComSheet::GetAllRowHeight ( );
__declspec(implementation_key(1225)) void IComSheet::PutAllRowHeight ( _bstr_t pVal );
__declspec(implementation_key(1226)) _bstr_t IComSheet::GetAllRowHeightProperty ( );
__declspec(implementation_key(1227)) void IComSheet::PutAllRowHeightProperty ( _bstr_t pVal );
__declspec(implementation_key(1228)) _bstr_t IComSheet::GetAllHLineInherit ( );
__declspec(implementation_key(1229)) void IComSheet::PutAllHLineInherit ( _bstr_t pVal );
__declspec(implementation_key(1230)) _bstr_t IComSheet::GetHasVLine ( );
__declspec(implementation_key(1231)) void IComSheet::PutHasVLine ( _bstr_t pVal );
__declspec(implementation_key(1232)) ACAD_COLOR IComSheet::GetVLineColor ( );
__declspec(implementation_key(1233)) void IComSheet::PutVLineColor ( ACAD_COLOR pVal );
__declspec(implementation_key(1234)) _bstr_t IComSheet::GetVLineStyle ( );
__declspec(implementation_key(1235)) void IComSheet::PutVLineStyle ( _bstr_t pVal );
__declspec(implementation_key(1236)) _bstr_t IComSheet::GetVLineWidth ( );
__declspec(implementation_key(1237)) void IComSheet::PutVLineWidth ( _bstr_t pVal );
__declspec(implementation_key(1238)) _bstr_t IComSheet::GetAllVLineInherit ( );
__declspec(implementation_key(1239)) void IComSheet::PutAllVLineInherit ( _bstr_t pVal );
__declspec(implementation_key(1240)) _bstr_t IComSheet::GetHasBorder ( );
__declspec(implementation_key(1241)) void IComSheet::PutHasBorder ( _bstr_t pVal );
__declspec(implementation_key(1242)) ACAD_COLOR IComSheet::GetBorderColor ( );
__declspec(implementation_key(1243)) void IComSheet::PutBorderColor ( ACAD_COLOR pVal );
__declspec(implementation_key(1244)) _bstr_t IComSheet::GetBorderStyle ( );
__declspec(implementation_key(1245)) void IComSheet::PutBorderStyle ( _bstr_t pVal );
__declspec(implementation_key(1246)) _bstr_t IComSheet::GetBorderWidth ( );
__declspec(implementation_key(1247)) void IComSheet::PutBorderWidth ( _bstr_t pVal );
__declspec(implementation_key(1248)) _bstr_t IComSheet::GetTitle ( );
__declspec(implementation_key(1249)) void IComSheet::PutTitle ( _bstr_t pVal );
__declspec(implementation_key(1250)) _bstr_t IComSheet::GetTitleTextStyle ( );
__declspec(implementation_key(1251)) void IComSheet::PutTitleTextStyle ( _bstr_t pVal );
__declspec(implementation_key(1252)) _bstr_t IComSheet::GetTitleTextSize ( );
__declspec(implementation_key(1253)) void IComSheet::PutTitleTextSize ( _bstr_t pVal );
__declspec(implementation_key(1254)) ACAD_COLOR IComSheet::GetTitleTextColor ( );
__declspec(implementation_key(1255)) void IComSheet::PutTitleTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(1256)) _bstr_t IComSheet::GetTitleSpaceFactor ( );
__declspec(implementation_key(1257)) void IComSheet::PutTitleSpaceFactor ( _bstr_t pVal );
__declspec(implementation_key(1258)) _bstr_t IComSheet::GetTitleHAlign ( );
__declspec(implementation_key(1259)) void IComSheet::PutTitleHAlign ( _bstr_t pVal );
__declspec(implementation_key(1260)) _bstr_t IComSheet::GetTitleVAlign ( );
__declspec(implementation_key(1261)) void IComSheet::PutTitleVAlign ( _bstr_t pVal );
__declspec(implementation_key(1262)) ACAD_COLOR IComSheet::GetTitleBaseLineColor ( );
__declspec(implementation_key(1263)) void IComSheet::PutTitleBaseLineColor ( ACAD_COLOR pVal );
__declspec(implementation_key(1264)) _bstr_t IComSheet::GetTitleBaseLineStyle ( );
__declspec(implementation_key(1265)) void IComSheet::PutTitleBaseLineStyle ( _bstr_t pVal );
__declspec(implementation_key(1266)) _bstr_t IComSheet::GetTitleBaseLineWidth ( );
__declspec(implementation_key(1267)) void IComSheet::PutTitleBaseLineWidth ( _bstr_t pVal );
__declspec(implementation_key(1268)) _bstr_t IComSheet::GetTitleHeight ( );
__declspec(implementation_key(1269)) void IComSheet::PutTitleHeight ( _bstr_t pVal );
__declspec(implementation_key(1270)) _bstr_t IComSheet::GetTitleOutside ( );
__declspec(implementation_key(1271)) void IComSheet::PutTitleOutside ( _bstr_t pVal );
__declspec(implementation_key(1272)) _bstr_t IComSheet::GetTitleHide ( );
__declspec(implementation_key(1273)) void IComSheet::PutTitleHide ( _bstr_t pVal );
__declspec(implementation_key(1274)) long IComSheet::GetCellRowIndex ( );
__declspec(implementation_key(1275)) void IComSheet::PutCellRowIndex ( long pVal );
__declspec(implementation_key(1276)) long IComSheet::GetCellColIndex ( );
__declspec(implementation_key(1277)) void IComSheet::PutCellColIndex ( long pVal );
__declspec(implementation_key(1278)) _bstr_t IComSheet::GetCellText ( );
__declspec(implementation_key(1279)) void IComSheet::PutCellText ( _bstr_t pVal );
__declspec(implementation_key(1280)) _bstr_t IComSheet::GetCellTextStyle ( );
__declspec(implementation_key(1281)) void IComSheet::PutCellTextStyle ( _bstr_t pVal );
__declspec(implementation_key(1282)) _bstr_t IComSheet::GetCellTextSize ( );
__declspec(implementation_key(1283)) void IComSheet::PutCellTextSize ( _bstr_t pVal );
__declspec(implementation_key(1284)) ACAD_COLOR IComSheet::GetCellTextColor ( );
__declspec(implementation_key(1285)) void IComSheet::PutCellTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(1286)) _bstr_t IComSheet::GetCellSpaceFactor ( );
__declspec(implementation_key(1287)) void IComSheet::PutCellSpaceFactor ( _bstr_t pVal );
__declspec(implementation_key(1288)) _bstr_t IComSheet::GetCellHAlign ( );
__declspec(implementation_key(1289)) void IComSheet::PutCellHAlign ( _bstr_t pVal );
__declspec(implementation_key(1290)) _bstr_t IComSheet::GetCellVAlign ( );
__declspec(implementation_key(1291)) void IComSheet::PutCellVAlign ( _bstr_t pVal );
__declspec(implementation_key(1292)) _bstr_t IComSheet::GetCellLinePropertyInherit ( );
__declspec(implementation_key(1293)) void IComSheet::PutCellLinePropertyInherit ( _bstr_t pVal );
__declspec(implementation_key(1294)) _bstr_t IComSheet::GetCellLineWrap ( );
__declspec(implementation_key(1295)) void IComSheet::PutCellLineWrap ( _bstr_t pVal );
__declspec(implementation_key(1296)) short IComSheet::GetRowNum ( );
__declspec(implementation_key(1297)) long IComSheet::GetRowIndex ( );
__declspec(implementation_key(1298)) void IComSheet::PutRowIndex ( long pVal );
__declspec(implementation_key(1299)) _bstr_t IComSheet::GetRowHeight ( );
__declspec(implementation_key(1300)) void IComSheet::PutRowHeight ( _bstr_t pVal );
__declspec(implementation_key(1301)) _bstr_t IComSheet::GetRowHeightProperty ( );
__declspec(implementation_key(1302)) void IComSheet::PutRowHeightProperty ( _bstr_t pVal );
__declspec(implementation_key(1303)) _bstr_t IComSheet::GetRowInheritSheet ( );
__declspec(implementation_key(1304)) void IComSheet::PutRowInheritSheet ( _bstr_t pVal );
__declspec(implementation_key(1305)) _bstr_t IComSheet::GetRowHasBaseLine ( );
__declspec(implementation_key(1306)) void IComSheet::PutRowHasBaseLine ( _bstr_t pVal );
__declspec(implementation_key(1307)) ACAD_COLOR IComSheet::GetRowHLineColor ( );
__declspec(implementation_key(1308)) void IComSheet::PutRowHLineColor ( ACAD_COLOR pVal );
__declspec(implementation_key(1309)) _bstr_t IComSheet::GetRowHLineStyle ( );
__declspec(implementation_key(1310)) void IComSheet::PutRowHLineStyle ( _bstr_t pVal );
__declspec(implementation_key(1311)) _bstr_t IComSheet::GetRowHLineWidth ( );
__declspec(implementation_key(1312)) void IComSheet::PutRowHLineWidth ( _bstr_t pVal );
__declspec(implementation_key(1313)) _bstr_t IComSheet::GetAllRowCellInherit ( );
__declspec(implementation_key(1314)) void IComSheet::PutAllRowCellInherit ( _bstr_t pVal );
__declspec(implementation_key(1315)) long IComSheet::GetColNum ( );
__declspec(implementation_key(1316)) long IComSheet::GetColIndex ( );
__declspec(implementation_key(1317)) void IComSheet::PutColIndex ( long pVal );
__declspec(implementation_key(1318)) _bstr_t IComSheet::GetColWidth ( );
__declspec(implementation_key(1319)) void IComSheet::PutColWidth ( _bstr_t pVal );
__declspec(implementation_key(1320)) _bstr_t IComSheet::GetColTextStyle ( );
__declspec(implementation_key(1321)) void IComSheet::PutColTextStyle ( _bstr_t pVal );
__declspec(implementation_key(1322)) _bstr_t IComSheet::GetColTextSize ( );
__declspec(implementation_key(1323)) void IComSheet::PutColTextSize ( _bstr_t pVal );
__declspec(implementation_key(1324)) ACAD_COLOR IComSheet::GetColTextColor ( );
__declspec(implementation_key(1325)) void IComSheet::PutColTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(1326)) _bstr_t IComSheet::GetColSpaceFactor ( );
__declspec(implementation_key(1327)) void IComSheet::PutColSpaceFactor ( _bstr_t pVal );
__declspec(implementation_key(1328)) _bstr_t IComSheet::GetColHAlign ( );
__declspec(implementation_key(1329)) void IComSheet::PutColHAlign ( _bstr_t pVal );
__declspec(implementation_key(1330)) _bstr_t IComSheet::GetColLinePropertyInherit ( );
__declspec(implementation_key(1331)) void IComSheet::PutColLinePropertyInherit ( _bstr_t pVal );
__declspec(implementation_key(1332)) _bstr_t IComSheet::GetColLineWrap ( );
__declspec(implementation_key(1333)) void IComSheet::PutColLineWrap ( _bstr_t pVal );
__declspec(implementation_key(1334)) _bstr_t IComSheet::GetColAllowDrag ( );
__declspec(implementation_key(1335)) void IComSheet::PutColAllowDrag ( _bstr_t pVal );
__declspec(implementation_key(1336)) _bstr_t IComSheet::GetColInheritSheet ( );
__declspec(implementation_key(1337)) void IComSheet::PutColInheritSheet ( _bstr_t pVal );
__declspec(implementation_key(1338)) _bstr_t IComSheet::GetColHasRightLine ( );
__declspec(implementation_key(1339)) void IComSheet::PutColHasRightLine ( _bstr_t pVal );
__declspec(implementation_key(1340)) ACAD_COLOR IComSheet::GetColRLineColor ( );
__declspec(implementation_key(1341)) void IComSheet::PutColRLineColor ( ACAD_COLOR pVal );
__declspec(implementation_key(1342)) _bstr_t IComSheet::GetColRLineStyle ( );
__declspec(implementation_key(1343)) void IComSheet::PutColRLineStyle ( _bstr_t pVal );
__declspec(implementation_key(1344)) _bstr_t IComSheet::GetColRLineWidth ( );
__declspec(implementation_key(1345)) void IComSheet::PutColRLineWidth ( _bstr_t pVal );
__declspec(implementation_key(1346)) _bstr_t IComSheet::GetAllColCellInherit ( );
__declspec(implementation_key(1347)) void IComSheet::PutAllColCellInherit ( _bstr_t pVal );
__declspec(implementation_key(1348)) HRESULT IComSheet::Create ( short nRowNum, short nColNum );
__declspec(implementation_key(1349)) HRESULT IComSheet::SetCellText ( short Row, short Col, _bstr_t Text );
__declspec(implementation_key(1350)) HRESULT IComSheet::Merge ( short StartRow, short StartColumn, short NumRow, short NumColumn );
__declspec(implementation_key(1351)) HRESULT IComSheet::ExplodeCell ( short Row, short Col );
__declspec(implementation_key(1352)) short IComSheet::GetRangeRowMax ( short Row, short Column );
__declspec(implementation_key(1353)) short IComSheet::GetRangeColumnMax ( short Row, short Column );
__declspec(implementation_key(1354)) short IComSheet::GetRangeRow ( short Row, short Column );
__declspec(implementation_key(1355)) short IComSheet::GetRangeColumn ( short Row, short Column );
__declspec(implementation_key(1356)) long IComSheet::GetIsRange ( short Row, short Column );
__declspec(implementation_key(1357)) _bstr_t IComSheet::GetText ( short Row, short Column );
__declspec(implementation_key(1358)) short IComSheet::GetColumnNum ( );
__declspec(implementation_key(1359)) long IComSheet::GetTextColor ( short Row, short Col );
__declspec(implementation_key(1360)) void IComSheet::PutTextColor ( short Row, short Col, long pVal );
__declspec(implementation_key(1361)) double IComCurtainWall::GetScale ( );
__declspec(implementation_key(1362)) void IComCurtainWall::PutScale ( double pVal );
__declspec(implementation_key(1363)) double IComCurtainWall::GetLayoutRotation ( );
__declspec(implementation_key(1364)) void IComCurtainWall::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1365)) double IComCurtainWall::GetLeftWidth ( );
__declspec(implementation_key(1366)) void IComCurtainWall::PutLeftWidth ( double pVal );
__declspec(implementation_key(1367)) double IComCurtainWall::GetRightWidth ( );
__declspec(implementation_key(1368)) void IComCurtainWall::PutRightWidth ( double pVal );
__declspec(implementation_key(1369)) double IComCurtainWall::GetHeight ( );
__declspec(implementation_key(1370)) void IComCurtainWall::PutHeight ( double pVal );
__declspec(implementation_key(1371)) double IComCurtainWall::GetLength ( );
__declspec(implementation_key(1372)) double IComCurtainWall::GetElevation ( );
__declspec(implementation_key(1373)) void IComCurtainWall::PutElevation ( double pVal );
__declspec(implementation_key(1374)) double IComCurtainWall::GetRadius ( );
__declspec(implementation_key(1375)) void IComCurtainWall::PutRadius ( double pVal );
__declspec(implementation_key(1376)) long IComCurtainWall::GetRowNum ( );
__declspec(implementation_key(1377)) long IComCurtainWall::GetColNum ( );
__declspec(implementation_key(1378)) _bstr_t IComCurtainWall::GetRowAverage ( );
__declspec(implementation_key(1379)) void IComCurtainWall::PutRowAverage ( _bstr_t pVal );
__declspec(implementation_key(1380)) _bstr_t IComCurtainWall::GetColAverage ( );
__declspec(implementation_key(1381)) void IComCurtainWall::PutColAverage ( _bstr_t pVal );
__declspec(implementation_key(1382)) _variant_t IComCurtainWall::GetRowHeight ( );
__declspec(implementation_key(1383)) void IComCurtainWall::PutRowHeight ( const _variant_t & pVal );
__declspec(implementation_key(1384)) _variant_t IComCurtainWall::GetColWidth ( );
__declspec(implementation_key(1385)) void IComCurtainWall::PutColWidth ( const _variant_t & pVal );
__declspec(implementation_key(1386)) double IComCurtainWall::GetURow ( );
__declspec(implementation_key(1387)) void IComCurtainWall::PutURow ( double pVal );
__declspec(implementation_key(1388)) double IComCurtainWall::GetVRow ( );
__declspec(implementation_key(1389)) void IComCurtainWall::PutVRow ( double pVal );
__declspec(implementation_key(1390)) double IComCurtainWall::GetUCol ( );
__declspec(implementation_key(1391)) void IComCurtainWall::PutUCol ( double pVal );
__declspec(implementation_key(1392)) double IComCurtainWall::GetVCol ( );
__declspec(implementation_key(1393)) void IComCurtainWall::PutVCol ( double pVal );
__declspec(implementation_key(1394)) _bstr_t IComCurtainWall::GetRowHide ( );
__declspec(implementation_key(1395)) void IComCurtainWall::PutRowHide ( _bstr_t pVal );
__declspec(implementation_key(1396)) _bstr_t IComCurtainWall::GetColHide ( );
__declspec(implementation_key(1397)) void IComCurtainWall::PutColHide ( _bstr_t pVal );
__declspec(implementation_key(1398)) _bstr_t IComCurtainWall::GetBasePos ( );
__declspec(implementation_key(1399)) void IComCurtainWall::PutBasePos ( _bstr_t pVal );
__declspec(implementation_key(1400)) double IComCurtainWall::GetGlassDist ( );
__declspec(implementation_key(1401)) void IComCurtainWall::PutGlassDist ( double pVal );
__declspec(implementation_key(1402)) double IComCurtainWall::GetFrameDist ( );
__declspec(implementation_key(1403)) void IComCurtainWall::PutFrameDist ( double pVal );
__declspec(implementation_key(1404)) _bstr_t IComCurtainWall::GetPlaneDisplay ( );
__declspec(implementation_key(1405)) void IComCurtainWall::PutPlaneDisplay ( _bstr_t pVal );
__declspec(implementation_key(1406)) _bstr_t IComCurtainWall::GetIsArc ( );
__declspec(implementation_key(1407)) _bstr_t IComCurtainWall::GetTopFrame ( );
__declspec(implementation_key(1408)) void IComCurtainWall::PutTopFrame ( _bstr_t pVal );
__declspec(implementation_key(1409)) _bstr_t IComCurtainWall::GetBotFrame ( );
__declspec(implementation_key(1410)) void IComCurtainWall::PutBotFrame ( _bstr_t pVal );
__declspec(implementation_key(1411)) ACAD_LAYER IComCurtainWall::GetGlassLayer ( );
__declspec(implementation_key(1412)) void IComCurtainWall::PutGlassLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1413)) ACAD_LAYER IComCurtainWall::GetRowLayer ( );
__declspec(implementation_key(1414)) void IComCurtainWall::PutRowLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1415)) ACAD_LAYER IComCurtainWall::GetColLayer ( );
__declspec(implementation_key(1416)) void IComCurtainWall::PutColLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1417)) _bstr_t IComCurtainWall::GetEnUsage ( );
__declspec(implementation_key(1418)) void IComCurtainWall::PutEnUsage ( _bstr_t pVal );
__declspec(implementation_key(1419)) _bstr_t IComCurtainWall::GetIOFeature ( );
__declspec(implementation_key(1420)) void IComCurtainWall::PutIOFeature ( _bstr_t pVal );
__declspec(implementation_key(1421)) _bstr_t IComCurtainWall::GetStructure ( );
__declspec(implementation_key(1422)) void IComCurtainWall::PutStructure ( _bstr_t pVal );
__declspec(implementation_key(1423)) double IComCurtainWall::GetAreaRatio ( );
__declspec(implementation_key(1424)) double IComCurtainWall::GetConductivity ( );
__declspec(implementation_key(1425)) double IComCurtainWall::GetInertiaIndex ( );
__declspec(implementation_key(1426)) _bstr_t IComCurtainWall::GetShadowType ( );
__declspec(implementation_key(1427)) void IComCurtainWall::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(1428)) double IComMultiStair::GetScale ( );
__declspec(implementation_key(1429)) void IComMultiStair::PutScale ( double pVal );
__declspec(implementation_key(1430)) double IComMultiStair::GetLayoutRotation ( );
__declspec(implementation_key(1431)) void IComMultiStair::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1432)) short IComMultiStair::GetViewCtrl ( );
__declspec(implementation_key(1433)) void IComMultiStair::PutViewCtrl ( short pVal );
__declspec(implementation_key(1434)) double IComMultiStair::GetStairHeight ( );
__declspec(implementation_key(1435)) void IComMultiStair::PutStairHeight ( double pVal );
__declspec(implementation_key(1436)) double IComMultiStair::GetStairWidth ( );
__declspec(implementation_key(1437)) void IComMultiStair::PutStairWidth ( double pVal );
__declspec(implementation_key(1438)) double IComMultiStair::GetSlabThickness ( );
__declspec(implementation_key(1439)) void IComMultiStair::PutSlabThickness ( double pVal );
__declspec(implementation_key(1440)) double IComMultiStair::GetElev ( );
__declspec(implementation_key(1441)) void IComMultiStair::PutElev ( double pVal );
__declspec(implementation_key(1442)) long IComMultiStair::GetStepNum ( );
__declspec(implementation_key(1443)) void IComMultiStair::PutStepNum ( long pVal );
__declspec(implementation_key(1444)) double IComMultiStair::GetStepWidth ( );
__declspec(implementation_key(1445)) void IComMultiStair::PutStepWidth ( double pVal );
__declspec(implementation_key(1446)) double IComMultiStair::GetStepHeight ( );
__declspec(implementation_key(1447)) void IComMultiStair::PutStepHeight ( double pVal );
__declspec(implementation_key(1448)) ACAD_LAYER IComMultiStair::GetStepLayer ( );
__declspec(implementation_key(1449)) void IComMultiStair::PutStepLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1450)) ACAD_LAYER IComMultiStair::GetBeamLayer ( );
__declspec(implementation_key(1451)) void IComMultiStair::PutBeamLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1452)) ACAD_LAYER IComMultiStair::GetRailLayer ( );
__declspec(implementation_key(1453)) void IComMultiStair::PutRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1454)) ACAD_LAYER IComMultiStair::GetHandRailLayer ( );
__declspec(implementation_key(1455)) void IComMultiStair::PutHandRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1456)) ACAD_LAYER IComMultiStair::GetTextLayer ( );
__declspec(implementation_key(1457)) void IComMultiStair::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1458)) ACAD_LAYER IComMultiStair::GetArrowLayer ( );
__declspec(implementation_key(1459)) void IComMultiStair::PutArrowLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1460)) _bstr_t IComMultiStair::GetHasLeftHandRail ( );
__declspec(implementation_key(1461)) void IComMultiStair::PutHasLeftHandRail ( _bstr_t pVal );
__declspec(implementation_key(1462)) _bstr_t IComMultiStair::GetHasRightHandRail ( );
__declspec(implementation_key(1463)) void IComMultiStair::PutHasRightHandRail ( _bstr_t pVal );
__declspec(implementation_key(1464)) double IComMultiStair::GetRailDist ( );
__declspec(implementation_key(1465)) void IComMultiStair::PutRailDist ( double pVal );
__declspec(implementation_key(1466)) double IComMultiStair::GetRailWidth ( );
__declspec(implementation_key(1467)) void IComMultiStair::PutRailWidth ( double pVal );
__declspec(implementation_key(1468)) double IComMultiStair::GetRailHeight ( );
__declspec(implementation_key(1469)) void IComMultiStair::PutRailHeight ( double pVal );
__declspec(implementation_key(1470)) _bstr_t IComMultiStair::GetRailMake ( );
__declspec(implementation_key(1471)) void IComMultiStair::PutRailMake ( _bstr_t pVal );
__declspec(implementation_key(1472)) _bstr_t IComMultiStair::GetHasLeftBeam ( );
__declspec(implementation_key(1473)) void IComMultiStair::PutHasLeftBeam ( _bstr_t pVal );
__declspec(implementation_key(1474)) _bstr_t IComMultiStair::GetHasRightBeam ( );
__declspec(implementation_key(1475)) void IComMultiStair::PutHasRightBeam ( _bstr_t pVal );
__declspec(implementation_key(1476)) double IComMultiStair::GetBeamHeight ( );
__declspec(implementation_key(1477)) void IComMultiStair::PutBeamHeight ( double pVal );
__declspec(implementation_key(1478)) double IComMultiStair::GetBeamThickness ( );
__declspec(implementation_key(1479)) void IComMultiStair::PutBeamThickness ( double pVal );
__declspec(implementation_key(1480)) _bstr_t IComMultiStair::GetAsAscent ( );
__declspec(implementation_key(1481)) void IComMultiStair::PutAsAscent ( _bstr_t pVal );
__declspec(implementation_key(1482)) _bstr_t IComMultiStair::GetHasSlant ( );
__declspec(implementation_key(1483)) void IComMultiStair::PutHasSlant ( _bstr_t pVal );
__declspec(implementation_key(1484)) _bstr_t IComMultiStair::GetOnGround ( );
__declspec(implementation_key(1485)) void IComMultiStair::PutOnGround ( _bstr_t pVal );
__declspec(implementation_key(1486)) _bstr_t IComMultiStair::GetBasePos ( );
__declspec(implementation_key(1487)) void IComMultiStair::PutBasePos ( _bstr_t pVal );
__declspec(implementation_key(1488)) _bstr_t IComMultiStair::GetAlongWall ( );
__declspec(implementation_key(1489)) void IComMultiStair::PutAlongWall ( _bstr_t pVal );
__declspec(implementation_key(1490)) _bstr_t IComMultiStair::GetLayerType ( );
__declspec(implementation_key(1491)) void IComMultiStair::PutLayerType ( _bstr_t pVal );
__declspec(implementation_key(1492)) _bstr_t IComMultiStair::GetShadowType ( );
__declspec(implementation_key(1493)) void IComMultiStair::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(1494)) _bstr_t IComMultiStair::GetHasArrow ( );
__declspec(implementation_key(1495)) void IComMultiStair::PutHasArrow ( _bstr_t pVal );
__declspec(implementation_key(1496)) double IComMultiStair::GetFirstRailDist ( );
__declspec(implementation_key(1497)) void IComMultiStair::PutFirstRailDist ( double pVal );
__declspec(implementation_key(1498)) double IComMultiStair::GetEndRailDist ( );
__declspec(implementation_key(1499)) void IComMultiStair::PutEndRailDist ( double pVal );
__declspec(implementation_key(1500)) _bstr_t IComMultiStair::GetTextHeight ( );
__declspec(implementation_key(1501)) void IComMultiStair::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(1502)) _bstr_t IComMultiStair::GetFontStyle ( );
__declspec(implementation_key(1503)) void IComMultiStair::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(1504)) _bstr_t IComMultiStair::GetTextUp ( );
__declspec(implementation_key(1505)) void IComMultiStair::PutTextUp ( _bstr_t pVal );
__declspec(implementation_key(1506)) _bstr_t IComMultiStair::GetTextDown ( );
__declspec(implementation_key(1507)) void IComMultiStair::PutTextDown ( _bstr_t pVal );
__declspec(implementation_key(1508)) double IComMultiStair::GetSectHeight ( );
__declspec(implementation_key(1509)) void IComMultiStair::PutSectHeight ( double pVal );
__declspec(implementation_key(1510)) short IComMultiStair::GetSectStepNum ( );
__declspec(implementation_key(1511)) void IComMultiStair::PutSectStepNum ( short pVal );
__declspec(implementation_key(1512)) double IComCornerWin::GetScale ( );
__declspec(implementation_key(1513)) void IComCornerWin::PutScale ( double pVal );
__declspec(implementation_key(1514)) double IComCornerWin::GetLayoutRotation ( );
__declspec(implementation_key(1515)) void IComCornerWin::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1516)) double IComCornerWin::GetHeight ( );
__declspec(implementation_key(1517)) void IComCornerWin::PutHeight ( double pVal );
__declspec(implementation_key(1518)) double IComCornerWin::GetSillHeight ( );
__declspec(implementation_key(1519)) void IComCornerWin::PutSillHeight ( double pVal );
__declspec(implementation_key(1520)) double IComCornerWin::GetWidth1 ( );
__declspec(implementation_key(1521)) void IComCornerWin::PutWidth1 ( double pVal );
__declspec(implementation_key(1522)) double IComCornerWin::GetWidth2 ( );
__declspec(implementation_key(1523)) void IComCornerWin::PutWidth2 ( double pVal );
__declspec(implementation_key(1524)) double IComCornerWin::GetFrameHeight ( );
__declspec(implementation_key(1525)) void IComCornerWin::PutFrameHeight ( double pVal );
__declspec(implementation_key(1526)) double IComCornerWin::GetFrameThickness ( );
__declspec(implementation_key(1527)) void IComCornerWin::PutFrameThickness ( double pVal );
__declspec(implementation_key(1528)) _bstr_t IComCornerWin::GetIsProtrudeWin ( );
__declspec(implementation_key(1529)) void IComCornerWin::PutIsProtrudeWin ( _bstr_t pVal );
__declspec(implementation_key(1530)) double IComCornerWin::GetFrontDist ( );
__declspec(implementation_key(1531)) void IComCornerWin::PutFrontDist ( double pVal );
__declspec(implementation_key(1532)) double IComCornerWin::GetFrontDist2 ( );
__declspec(implementation_key(1533)) void IComCornerWin::PutFrontDist2 ( double pVal );
__declspec(implementation_key(1534)) _bstr_t IComCornerWin::GetOnGround ( );
__declspec(implementation_key(1535)) void IComCornerWin::PutOnGround ( _bstr_t pVal );
__declspec(implementation_key(1536)) double IComCornerWin::GetSlabThickness ( );
__declspec(implementation_key(1537)) void IComCornerWin::PutSlabThickness ( double pVal );
__declspec(implementation_key(1538)) double IComCornerWin::GetDist1 ( );
__declspec(implementation_key(1539)) void IComCornerWin::PutDist1 ( double pVal );
__declspec(implementation_key(1540)) double IComCornerWin::GetDist2 ( );
__declspec(implementation_key(1541)) void IComCornerWin::PutDist2 ( double pVal );
__declspec(implementation_key(1542)) double IComCornerWin::GetGlassDist ( );
__declspec(implementation_key(1543)) void IComCornerWin::PutGlassDist ( double pVal );
__declspec(implementation_key(1544)) _bstr_t IComCornerWin::GetHasSlab1 ( );
__declspec(implementation_key(1545)) void IComCornerWin::PutHasSlab1 ( _bstr_t pVal );
__declspec(implementation_key(1546)) _bstr_t IComCornerWin::GetHasSlab2 ( );
__declspec(implementation_key(1547)) void IComCornerWin::PutHasSlab2 ( _bstr_t pVal );
__declspec(implementation_key(1548)) double IComCornerWin::GetProWinSlabWidth ( );
__declspec(implementation_key(1549)) void IComCornerWin::PutProWinSlabWidth ( double pVal );
__declspec(implementation_key(1550)) double IComCornerWin::GetProWinSlabInsuThick ( );
__declspec(implementation_key(1551)) void IComCornerWin::PutProWinSlabInsuThick ( double pVal );
__declspec(implementation_key(1552)) _bstr_t IComCornerWin::GetLabel ( );
__declspec(implementation_key(1553)) void IComCornerWin::PutLabel ( _bstr_t pVal );
__declspec(implementation_key(1554)) double IComCornerWin::GetTextAngle ( );
__declspec(implementation_key(1555)) void IComCornerWin::PutTextAngle ( double pVal );
__declspec(implementation_key(1556)) double IComCornerWin::GetTextHeight ( );
__declspec(implementation_key(1557)) void IComCornerWin::PutTextHeight ( double pVal );
__declspec(implementation_key(1558)) _bstr_t IComCornerWin::GetTextStyle ( );
__declspec(implementation_key(1559)) void IComCornerWin::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(1560)) _bstr_t IComCornerWin::GetHideLabel ( );
__declspec(implementation_key(1561)) void IComCornerWin::PutHideLabel ( _bstr_t pVal );
__declspec(implementation_key(1562)) ACAD_LAYER IComCornerWin::GetGlassLayer ( );
__declspec(implementation_key(1563)) void IComCornerWin::PutGlassLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1564)) ACAD_LAYER IComCornerWin::GetFrameLayer ( );
__declspec(implementation_key(1565)) void IComCornerWin::PutFrameLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1566)) ACAD_LAYER IComCornerWin::GetSlabLayer ( );
__declspec(implementation_key(1567)) void IComCornerWin::PutSlabLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1568)) ACAD_LAYER IComCornerWin::GetTextLayer ( );
__declspec(implementation_key(1569)) void IComCornerWin::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1570)) _bstr_t IComCornerWin::GetIsHole ( );
__declspec(implementation_key(1571)) void IComCornerWin::PutIsHole ( _bstr_t pVal );
__declspec(implementation_key(1572)) _bstr_t IComCornerWin::GetKind ( );
__declspec(implementation_key(1573)) _bstr_t IComCornerWin::GetStructure ( );
__declspec(implementation_key(1574)) void IComCornerWin::PutStructure ( _bstr_t pVal );
__declspec(implementation_key(1575)) _bstr_t IComCornerWin::GetExtShading ( );
__declspec(implementation_key(1576)) void IComCornerWin::PutExtShading ( _bstr_t pVal );
__declspec(implementation_key(1577)) double IComCornerWin::GetConductivity ( );
__declspec(implementation_key(1578)) _bstr_t IComCornerWin::GetShadowType ( );
__declspec(implementation_key(1579)) void IComCornerWin::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(1580)) double IComRect::GetHeight ( );
__declspec(implementation_key(1581)) void IComRect::PutHeight ( double pVal );
__declspec(implementation_key(1582)) _bstr_t IComRect::GetDiaLine ( );
__declspec(implementation_key(1583)) void IComRect::PutDiaLine ( _bstr_t pVal );
__declspec(implementation_key(1584)) double IComRect::GetLayoutRotation ( );
__declspec(implementation_key(1585)) void IComRect::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1586)) double IComRect::GetLength ( );
__declspec(implementation_key(1587)) void IComRect::PutLength ( double pVal );
__declspec(implementation_key(1588)) double IComRect::GetWidth ( );
__declspec(implementation_key(1589)) void IComRect::PutWidth ( double pVal );
__declspec(implementation_key(1590)) _bstr_t IComRect::GetBaseType ( );
__declspec(implementation_key(1591)) void IComRect::PutBaseType ( _bstr_t pVal );
__declspec(implementation_key(1592)) double IComRect::GetElev ( );
__declspec(implementation_key(1593)) void IComRect::PutElev ( double pVal );
__declspec(implementation_key(1594)) double IComRect::GetRotation ( );
__declspec(implementation_key(1595)) void IComRect::PutRotation ( double pVal );
__declspec(implementation_key(1596)) double IComRect::GetScale ( );
__declspec(implementation_key(1597)) void IComRect::PutScale ( double pVal );
__declspec(implementation_key(1598)) _bstr_t IComRect::GetShadowType ( );
__declspec(implementation_key(1599)) void IComRect::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(1600)) double IComSlope::GetScale ( );
__declspec(implementation_key(1601)) void IComSlope::PutScale ( double pVal );
__declspec(implementation_key(1602)) double IComSlope::GetLayoutRotation ( );
__declspec(implementation_key(1603)) void IComSlope::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1604)) _bstr_t IComSlope::GetViewType ( );
__declspec(implementation_key(1605)) void IComSlope::PutViewType ( _bstr_t pVal );
__declspec(implementation_key(1606)) long IComSlope::GetVertexNum ( );
__declspec(implementation_key(1607)) void IComSlope::PutVertexNum ( long pVal );
__declspec(implementation_key(1608)) _bstr_t IComSlope::GetShowMode ( );
__declspec(implementation_key(1609)) void IComSlope::PutShowMode ( _bstr_t pVal );
__declspec(implementation_key(1610)) _bstr_t IComSlope::GetReactor ( );
__declspec(implementation_key(1611)) void IComSlope::PutReactor ( _bstr_t pVal );
__declspec(implementation_key(1612)) _bstr_t IComSlope::GetTransform ( );
__declspec(implementation_key(1613)) void IComSlope::PutTransform ( _bstr_t pVal );
__declspec(implementation_key(1614)) _bstr_t IComSlope::GetShadowType ( );
__declspec(implementation_key(1615)) void IComSlope::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(1616)) double IComPolyMesh::GetScale ( );
__declspec(implementation_key(1617)) void IComPolyMesh::PutScale ( double pVal );
__declspec(implementation_key(1618)) double IComPolyMesh::GetLayoutRotation ( );
__declspec(implementation_key(1619)) void IComPolyMesh::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1620)) _bstr_t IComPolyMesh::GetViewType ( );
__declspec(implementation_key(1621)) void IComPolyMesh::PutViewType ( _bstr_t pVal );
__declspec(implementation_key(1622)) _bstr_t IComPolyMesh::GetPathLength ( );
__declspec(implementation_key(1623)) _bstr_t IComPolyMesh::GetSideArea ( );
__declspec(implementation_key(1624)) int IComPolyMesh::GetSectionNum ( );
__declspec(implementation_key(1625)) _bstr_t IComPolyMesh::GetVolume ( );
__declspec(implementation_key(1626)) _variant_t IComPolyMesh::GetVertex ( );
__declspec(implementation_key(1627)) void IComPolyMesh::PutVertex ( const _variant_t & pVal );
__declspec(implementation_key(1628)) _variant_t IComPolyMesh::GetSection ( );
__declspec(implementation_key(1629)) void IComPolyMesh::PutSection ( const _variant_t & pVal );
__declspec(implementation_key(1630)) _bstr_t IComPolyMesh::GetShapeVisibility ( );
__declspec(implementation_key(1631)) void IComPolyMesh::PutShapeVisibility ( _bstr_t pVal );
__declspec(implementation_key(1632)) _bstr_t IComPolyMesh::GetShadowType ( );
__declspec(implementation_key(1633)) void IComPolyMesh::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(1634)) double IComOpeningSlot::GetScale ( );
__declspec(implementation_key(1635)) void IComOpeningSlot::PutScale ( double pVal );
__declspec(implementation_key(1636)) double IComOpeningSlot::GetLayoutRotation ( );
__declspec(implementation_key(1637)) void IComOpeningSlot::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1638)) _bstr_t IComOpeningSlot::GetViewType ( );
__declspec(implementation_key(1639)) void IComOpeningSlot::PutViewType ( _bstr_t pVal );
__declspec(implementation_key(1640)) _bstr_t IComOpeningSlot::GetShowShape ( );
__declspec(implementation_key(1641)) void IComOpeningSlot::PutShowShape ( _bstr_t pVal );
__declspec(implementation_key(1642)) _bstr_t IComOpeningSlot::GetOutsideSlot ( );
__declspec(implementation_key(1643)) void IComOpeningSlot::PutOutsideSlot ( _bstr_t pVal );
__declspec(implementation_key(1644)) _bstr_t IComOpeningSlot::GetInsideSlot ( );
__declspec(implementation_key(1645)) void IComOpeningSlot::PutInsideSlot ( _bstr_t pVal );
__declspec(implementation_key(1646)) double IComOpeningSlot::GetWidth1 ( );
__declspec(implementation_key(1647)) void IComOpeningSlot::PutWidth1 ( double pVal );
__declspec(implementation_key(1648)) double IComOpeningSlot::GetWidth2 ( );
__declspec(implementation_key(1649)) void IComOpeningSlot::PutWidth2 ( double pVal );
__declspec(implementation_key(1650)) double IComOpeningSlot::GetA ( );
__declspec(implementation_key(1651)) void IComOpeningSlot::PutA ( double pVal );
__declspec(implementation_key(1652)) double IComOpeningSlot::GetT ( );
__declspec(implementation_key(1653)) void IComOpeningSlot::PutT ( double pVal );
__declspec(implementation_key(1654)) _bstr_t IComOpeningSlot::GetStyle ( );
__declspec(implementation_key(1655)) void IComOpeningSlot::PutStyle ( _bstr_t pVal );
__declspec(implementation_key(1656)) double IComOpeningSlot::GetBoardWidth ( );
__declspec(implementation_key(1657)) void IComOpeningSlot::PutBoardWidth ( double pVal );
__declspec(implementation_key(1658)) _bstr_t IComOpeningSlot::GetInsideBoard ( );
__declspec(implementation_key(1659)) void IComOpeningSlot::PutInsideBoard ( _bstr_t pVal );
__declspec(implementation_key(1660)) _bstr_t IComOpeningSlot::GetOutsideBoard ( );
__declspec(implementation_key(1661)) void IComOpeningSlot::PutOutsideBoard ( _bstr_t pVal );
__declspec(implementation_key(1662)) _bstr_t IComOpeningSlot::GetInsideSill ( );
__declspec(implementation_key(1663)) void IComOpeningSlot::PutInsideSill ( _bstr_t pVal );
__declspec(implementation_key(1664)) _bstr_t IComOpeningSlot::GetOutsideSill ( );
__declspec(implementation_key(1665)) void IComOpeningSlot::PutOutsideSill ( _bstr_t pVal );
__declspec(implementation_key(1666)) double IComOpeningSlot::GetA1 ( );
__declspec(implementation_key(1667)) void IComOpeningSlot::PutA1 ( double pVal );
__declspec(implementation_key(1668)) double IComOpeningSlot::GetA2 ( );
__declspec(implementation_key(1669)) void IComOpeningSlot::PutA2 ( double pVal );
__declspec(implementation_key(1670)) double IComOpeningSlot::GetH1 ( );
__declspec(implementation_key(1671)) void IComOpeningSlot::PutH1 ( double pVal );
__declspec(implementation_key(1672)) double IComOpeningSlot::GetH2 ( );
__declspec(implementation_key(1673)) void IComOpeningSlot::PutH2 ( double pVal );
__declspec(implementation_key(1674)) double IComOpeningSlot::GetW1 ( );
__declspec(implementation_key(1675)) void IComOpeningSlot::PutW1 ( double pVal );
__declspec(implementation_key(1676)) double IComOpeningSlot::GetW2 ( );
__declspec(implementation_key(1677)) void IComOpeningSlot::PutW2 ( double pVal );
__declspec(implementation_key(1678)) ACAD_LAYER IComOpeningSlot::GetLayerBoard ( );
__declspec(implementation_key(1679)) void IComOpeningSlot::PutLayerBoard ( ACAD_LAYER pVal );
__declspec(implementation_key(1680)) ACAD_LAYER IComOpeningSlot::GetLayerSill ( );
__declspec(implementation_key(1681)) void IComOpeningSlot::PutLayerSill ( ACAD_LAYER pVal );
__declspec(implementation_key(1682)) _bstr_t IComOpeningSlot::GetShadowType ( );
__declspec(implementation_key(1683)) void IComOpeningSlot::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(1684)) double IComDormer::GetScale ( );
__declspec(implementation_key(1685)) void IComDormer::PutScale ( double pVal );
__declspec(implementation_key(1686)) double IComDormer::GetLayoutRotation ( );
__declspec(implementation_key(1687)) void IComDormer::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1688)) double IComDormer::GetWallWidth ( );
__declspec(implementation_key(1689)) void IComDormer::PutWallWidth ( double pVal );
__declspec(implementation_key(1690)) double IComDormer::GetWallHeight ( );
__declspec(implementation_key(1691)) void IComDormer::PutWallHeight ( double pVal );
__declspec(implementation_key(1692)) double IComDormer::GetWallThickness ( );
__declspec(implementation_key(1693)) void IComDormer::PutWallThickness ( double pVal );
__declspec(implementation_key(1694)) double IComDormer::GetWinWidth ( );
__declspec(implementation_key(1695)) void IComDormer::PutWinWidth ( double pVal );
__declspec(implementation_key(1696)) double IComDormer::GetWinHeight ( );
__declspec(implementation_key(1697)) void IComDormer::PutWinHeight ( double pVal );
__declspec(implementation_key(1698)) double IComDormer::GetSlabThickness ( );
__declspec(implementation_key(1699)) void IComDormer::PutSlabThickness ( double pVal );
__declspec(implementation_key(1700)) double IComDormer::GetExtendEaves ( );
__declspec(implementation_key(1701)) void IComDormer::PutExtendEaves ( double pVal );
__declspec(implementation_key(1702)) double IComDormer::GetExtendHill ( );
__declspec(implementation_key(1703)) void IComDormer::PutExtendHill ( double pVal );
__declspec(implementation_key(1704)) double IComDormer::GetSlopeGrade ( );
__declspec(implementation_key(1705)) void IComDormer::PutSlopeGrade ( double pVal );
__declspec(implementation_key(1706)) double IComDormer::GetSlopeHeight ( );
__declspec(implementation_key(1707)) void IComDormer::PutSlopeHeight ( double pVal );
__declspec(implementation_key(1708)) _bstr_t IComDormer::GetDormerType ( );
__declspec(implementation_key(1709)) void IComDormer::PutDormerType ( _bstr_t pVal );
__declspec(implementation_key(1710)) _bstr_t IComDormer::GetShowWindow ( );
__declspec(implementation_key(1711)) void IComDormer::PutShowWindow ( _bstr_t pVal );
__declspec(implementation_key(1712)) _bstr_t IComDormer::GetLabel ( );
__declspec(implementation_key(1713)) void IComDormer::PutLabel ( _bstr_t pVal );
__declspec(implementation_key(1714)) double IComDormer::GetTextHeight ( );
__declspec(implementation_key(1715)) void IComDormer::PutTextHeight ( double pVal );
__declspec(implementation_key(1716)) _bstr_t IComDormer::GetTextStyle ( );
__declspec(implementation_key(1717)) void IComDormer::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(1718)) ACAD_LAYER IComDormer::GetRoofLayer ( );
__declspec(implementation_key(1719)) void IComDormer::PutRoofLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1720)) ACAD_LAYER IComDormer::GetCeilingLayer ( );
__declspec(implementation_key(1721)) void IComDormer::PutCeilingLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1722)) ACAD_LAYER IComDormer::GetSlabLayer ( );
__declspec(implementation_key(1723)) void IComDormer::PutSlabLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1724)) ACAD_LAYER IComDormer::GetWallLayer ( );
__declspec(implementation_key(1725)) void IComDormer::PutWallLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1726)) ACAD_LAYER IComDormer::GetFrameLayer ( );
__declspec(implementation_key(1727)) void IComDormer::PutFrameLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1728)) ACAD_LAYER IComDormer::GetGlassLayer ( );
__declspec(implementation_key(1729)) void IComDormer::PutGlassLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1730)) ACAD_LAYER IComDormer::GetTextLayer ( );
__declspec(implementation_key(1731)) void IComDormer::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1732)) _bstr_t IComDormer::GetShadowType ( );
__declspec(implementation_key(1733)) void IComDormer::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(1734)) ACAD_LAYER IComNetShelf::GetSphereLayer ( );
__declspec(implementation_key(1735)) void IComNetShelf::PutSphereLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1736)) _bstr_t IComNetShelf::GetMonoSphere ( );
__declspec(implementation_key(1737)) void IComNetShelf::PutMonoSphere ( _bstr_t pVal );
__declspec(implementation_key(1738)) double IComNetShelf::GetSphereRadius ( );
__declspec(implementation_key(1739)) void IComNetShelf::PutSphereRadius ( double pVal );
__declspec(implementation_key(1740)) double IComNetShelf::GetPoleRadius ( );
__declspec(implementation_key(1741)) void IComNetShelf::PutPoleRadius ( double pVal );
__declspec(implementation_key(1742)) double IComNetShelf::GetScale ( );
__declspec(implementation_key(1743)) void IComNetShelf::PutScale ( double pVal );
__declspec(implementation_key(1744)) double IComNetShelf::GetLayoutRotation ( );
__declspec(implementation_key(1745)) void IComNetShelf::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1746)) _bstr_t IComNetShelf::GetShadowType ( );
__declspec(implementation_key(1747)) void IComNetShelf::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(1748)) double IComMultiViewInsert::GetScale ( );
__declspec(implementation_key(1749)) void IComMultiViewInsert::PutScale ( double pVal );
__declspec(implementation_key(1750)) double IComMultiViewInsert::GetLayoutRotation ( );
__declspec(implementation_key(1751)) void IComMultiViewInsert::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1752)) double IComMultiViewInsert::GetRotation ( );
__declspec(implementation_key(1753)) void IComMultiViewInsert::PutRotation ( double pVal );
__declspec(implementation_key(1754)) double IComMultiViewInsert::GetScaleX ( );
__declspec(implementation_key(1755)) void IComMultiViewInsert::PutScaleX ( double pVal );
__declspec(implementation_key(1756)) double IComMultiViewInsert::GetScaleY ( );
__declspec(implementation_key(1757)) void IComMultiViewInsert::PutScaleY ( double pVal );
__declspec(implementation_key(1758)) double IComMultiViewInsert::GetScaleZ ( );
__declspec(implementation_key(1759)) void IComMultiViewInsert::PutScaleZ ( double pVal );
__declspec(implementation_key(1760)) _bstr_t IComMultiViewInsert::GetShadowType ( );
__declspec(implementation_key(1761)) void IComMultiViewInsert::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(1762)) double IComPromptMark::GetScale ( );
__declspec(implementation_key(1763)) void IComPromptMark::PutScale ( double pVal );
__declspec(implementation_key(1764)) double IComPromptMark::GetLayoutRotation ( );
__declspec(implementation_key(1765)) void IComPromptMark::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1766)) double IComPromptMark::GetLength ( );
__declspec(implementation_key(1767)) void IComPromptMark::PutLength ( double pVal );
__declspec(implementation_key(1768)) double IComPromptMark::GetWidth ( );
__declspec(implementation_key(1769)) void IComPromptMark::PutWidth ( double pVal );
__declspec(implementation_key(1770)) double IComPromptMark::GetRotation ( );
__declspec(implementation_key(1771)) void IComPromptMark::PutRotation ( double pVal );
__declspec(implementation_key(1772)) _bstr_t IComPromptMark::GetText ( );
__declspec(implementation_key(1773)) void IComPromptMark::PutText ( _bstr_t pVal );
__declspec(implementation_key(1774)) _bstr_t IComPromptMark::GetTextStyle ( );
__declspec(implementation_key(1775)) void IComPromptMark::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(1776)) _bstr_t IComPromptMark::GetShape ( );
__declspec(implementation_key(1777)) void IComPromptMark::PutShape ( _bstr_t pVal );
__declspec(implementation_key(1778)) _bstr_t IComDrawingName::GetNameText ( );
__declspec(implementation_key(1779)) void IComDrawingName::PutNameText ( _bstr_t pVal );
__declspec(implementation_key(1780)) _bstr_t IComDrawingName::GetNameStyle ( );
__declspec(implementation_key(1781)) void IComDrawingName::PutNameStyle ( _bstr_t pVal );
__declspec(implementation_key(1782)) _bstr_t IComDrawingName::GetNameHeight ( );
__declspec(implementation_key(1783)) void IComDrawingName::PutNameHeight ( _bstr_t pVal );
__declspec(implementation_key(1784)) _bstr_t IComDrawingName::GetScaleText ( );
__declspec(implementation_key(1785)) void IComDrawingName::PutScaleText ( _bstr_t pVal );
__declspec(implementation_key(1786)) _bstr_t IComDrawingName::GetScaleStyle ( );
__declspec(implementation_key(1787)) void IComDrawingName::PutScaleStyle ( _bstr_t pVal );
__declspec(implementation_key(1788)) _bstr_t IComDrawingName::GetScaleHeight ( );
__declspec(implementation_key(1789)) void IComDrawingName::PutScaleHeight ( _bstr_t pVal );
__declspec(implementation_key(1790)) _bstr_t IComDrawingName::GetSpaceCoef ( );
__declspec(implementation_key(1791)) void IComDrawingName::PutSpaceCoef ( _bstr_t pVal );
__declspec(implementation_key(1792)) _bstr_t IComDrawingName::GetDimStyle ( );
__declspec(implementation_key(1793)) void IComDrawingName::PutDimStyle ( _bstr_t pVal );
__declspec(implementation_key(1794)) ACAD_COLOR IComDrawingName::GetTextColor ( );
__declspec(implementation_key(1795)) void IComDrawingName::PutTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(1796)) _bstr_t IComDrawingName::GetShowScale ( );
__declspec(implementation_key(1797)) void IComDrawingName::PutShowScale ( _bstr_t pVal );
__declspec(implementation_key(1798)) double IComDrawingName::GetScale ( );
__declspec(implementation_key(1799)) void IComDrawingName::PutScale ( double pVal );
__declspec(implementation_key(1800)) double IComDrawingName::GetLayoutRotation ( );
__declspec(implementation_key(1801)) void IComDrawingName::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1802)) double IComCurveMesh2::GetScale ( );
__declspec(implementation_key(1803)) void IComCurveMesh2::PutScale ( double pVal );
__declspec(implementation_key(1804)) double IComCurveMesh2::GetLayoutRotation ( );
__declspec(implementation_key(1805)) void IComCurveMesh2::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1806)) _bstr_t IComCurveMesh2::GetViewType ( );
__declspec(implementation_key(1807)) void IComCurveMesh2::PutViewType ( _bstr_t pVal );
__declspec(implementation_key(1808)) _bstr_t IComCurveMesh2::GetPathLength ( );
__declspec(implementation_key(1809)) _bstr_t IComCurveMesh2::GetSideArea ( );
__declspec(implementation_key(1810)) _bstr_t IComCurveMesh2::GetShapePerimeter ( );
__declspec(implementation_key(1811)) _bstr_t IComCurveMesh2::GetVolume ( );
__declspec(implementation_key(1812)) _variant_t IComCurveMesh2::GetVertex ( );
__declspec(implementation_key(1813)) void IComCurveMesh2::PutVertex ( const _variant_t & pVal );
__declspec(implementation_key(1814)) _bstr_t IComCurveMesh2::GetShapeVisibility ( );
__declspec(implementation_key(1815)) void IComCurveMesh2::PutShapeVisibility ( _bstr_t pVal );
__declspec(implementation_key(1816)) _bstr_t IComCurveMesh2::GetShadowType ( );
__declspec(implementation_key(1817)) void IComCurveMesh2::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(1818)) double IComPolyMesh2::GetScale ( );
__declspec(implementation_key(1819)) void IComPolyMesh2::PutScale ( double pVal );
__declspec(implementation_key(1820)) double IComPolyMesh2::GetLayoutRotation ( );
__declspec(implementation_key(1821)) void IComPolyMesh2::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1822)) _bstr_t IComPolyMesh2::GetViewType ( );
__declspec(implementation_key(1823)) void IComPolyMesh2::PutViewType ( _bstr_t pVal );
__declspec(implementation_key(1824)) _bstr_t IComPolyMesh2::GetPathLength ( );
__declspec(implementation_key(1825)) _bstr_t IComPolyMesh2::GetSideArea ( );
__declspec(implementation_key(1826)) int IComPolyMesh2::GetSectionNum ( );
__declspec(implementation_key(1827)) _bstr_t IComPolyMesh2::GetVolume ( );
__declspec(implementation_key(1828)) _variant_t IComPolyMesh2::GetVertex ( );
__declspec(implementation_key(1829)) void IComPolyMesh2::PutVertex ( const _variant_t & pVal );
__declspec(implementation_key(1830)) _variant_t IComPolyMesh2::GetSection ( );
__declspec(implementation_key(1831)) void IComPolyMesh2::PutSection ( const _variant_t & pVal );
__declspec(implementation_key(1832)) _bstr_t IComPolyMesh2::GetShapeVisibility ( );
__declspec(implementation_key(1833)) void IComPolyMesh2::PutShapeVisibility ( _bstr_t pVal );
__declspec(implementation_key(1834)) _bstr_t IComPolyMesh2::GetShadowType ( );
__declspec(implementation_key(1835)) void IComPolyMesh2::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(1836)) double IComCuspRoof::GetScale ( );
__declspec(implementation_key(1837)) void IComCuspRoof::PutScale ( double pVal );
__declspec(implementation_key(1838)) double IComCuspRoof::GetLayoutRotation ( );
__declspec(implementation_key(1839)) void IComCuspRoof::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1840)) _bstr_t IComCuspRoof::GetShadowType ( );
__declspec(implementation_key(1841)) void IComCuspRoof::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(1842)) double IComCuspRoof::GetElev ( );
__declspec(implementation_key(1843)) void IComCuspRoof::PutElev ( double pVal );
__declspec(implementation_key(1844)) int IComCuspRoof::GetSideNum ( );
__declspec(implementation_key(1845)) void IComCuspRoof::PutSideNum ( int pVal );
__declspec(implementation_key(1846)) double IComCuspRoof::GetHeight ( );
__declspec(implementation_key(1847)) void IComCuspRoof::PutHeight ( double pVal );
__declspec(implementation_key(1848)) double IComCuspRoof::GetRadius ( );
__declspec(implementation_key(1849)) void IComCuspRoof::PutRadius ( double pVal );
__declspec(implementation_key(1850)) double IComCuspRoof::GetRotate ( );
__declspec(implementation_key(1851)) void IComCuspRoof::PutRotate ( double pVal );
__declspec(implementation_key(1852)) double IComCuspRoof::GetEavesLen ( );
__declspec(implementation_key(1853)) void IComCuspRoof::PutEavesLen ( double pVal );
__declspec(implementation_key(1854)) double IComCuspRoof::GetSlabThick ( );
__declspec(implementation_key(1855)) void IComCuspRoof::PutSlabThick ( double pVal );
__declspec(implementation_key(1856)) double IComDualSlopeRoof::GetScale ( );
__declspec(implementation_key(1857)) void IComDualSlopeRoof::PutScale ( double pVal );
__declspec(implementation_key(1858)) double IComDualSlopeRoof::GetLayoutRotation ( );
__declspec(implementation_key(1859)) void IComDualSlopeRoof::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1860)) _bstr_t IComDualSlopeRoof::GetShadowType ( );
__declspec(implementation_key(1861)) void IComDualSlopeRoof::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(1862)) double IComDualSlopeRoof::GetElev ( );
__declspec(implementation_key(1863)) void IComDualSlopeRoof::PutElev ( double pVal );
__declspec(implementation_key(1864)) double IComDualSlopeRoof::GetLeftSlopeAng ( );
__declspec(implementation_key(1865)) void IComDualSlopeRoof::PutLeftSlopeAng ( double pVal );
__declspec(implementation_key(1866)) double IComDualSlopeRoof::GetRightSlopeAng ( );
__declspec(implementation_key(1867)) void IComDualSlopeRoof::PutRightSlopeAng ( double pVal );
__declspec(implementation_key(1868)) double IComDualSlopeRoof::GetSlabThick ( );
__declspec(implementation_key(1869)) void IComDualSlopeRoof::PutSlabThick ( double pVal );
__declspec(implementation_key(1870)) double IComDualSlopeRoof::GetRoofHeight ( );
__declspec(implementation_key(1871)) void IComDualSlopeRoof::PutRoofHeight ( double pVal );
__declspec(implementation_key(1872)) double IComSymbCut::GetScale ( );
__declspec(implementation_key(1873)) void IComSymbCut::PutScale ( double pVal );
__declspec(implementation_key(1874)) double IComSymbCut::GetLayoutRotation ( );
__declspec(implementation_key(1875)) void IComSymbCut::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1876)) _bstr_t IComSymbCut::GetCutType ( );
__declspec(implementation_key(1877)) void IComSymbCut::PutCutType ( _bstr_t pVal );
__declspec(implementation_key(1878)) _bstr_t IComSymbCut::GetIsHide ( );
__declspec(implementation_key(1879)) void IComSymbCut::PutIsHide ( _bstr_t pVal );
__declspec(implementation_key(1880)) double IComPolyPathArray::GetScale ( );
__declspec(implementation_key(1881)) void IComPolyPathArray::PutScale ( double pVal );
__declspec(implementation_key(1882)) double IComPolyPathArray::GetLayoutRotation ( );
__declspec(implementation_key(1883)) void IComPolyPathArray::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1884)) _bstr_t IComPolyPathArray::GetCellAlign ( );
__declspec(implementation_key(1885)) void IComPolyPathArray::PutCellAlign ( _bstr_t pVal );
__declspec(implementation_key(1886)) _bstr_t IComPolyPathArray::GetBasePos ( );
__declspec(implementation_key(1887)) void IComPolyPathArray::PutBasePos ( _bstr_t pVal );
__declspec(implementation_key(1888)) double IComPolyPathArray::GetPicWidth ( );
__declspec(implementation_key(1889)) void IComPolyPathArray::PutPicWidth ( double pVal );
__declspec(implementation_key(1890)) _bstr_t IComPolyPathArray::GetPicRatio ( );
__declspec(implementation_key(1891)) void IComPolyPathArray::PutPicRatio ( _bstr_t pVal );
__declspec(implementation_key(1892)) double IComCrossStair::GetStairHeight ( );
__declspec(implementation_key(1893)) void IComCrossStair::PutStairHeight ( double pVal );
__declspec(implementation_key(1894)) double IComCrossStair::GetSpaceWidth ( );
__declspec(implementation_key(1895)) void IComCrossStair::PutSpaceWidth ( double pVal );
__declspec(implementation_key(1896)) double IComCrossStair::GetStairWidth ( );
__declspec(implementation_key(1897)) void IComCrossStair::PutStairWidth ( double pVal );
__declspec(implementation_key(1898)) double IComCrossStair::GetStepWidth ( );
__declspec(implementation_key(1899)) void IComCrossStair::PutStepWidth ( double pVal );
__declspec(implementation_key(1900)) double IComCrossStair::GetStepHeight ( );
__declspec(implementation_key(1901)) void IComCrossStair::PutStepHeight ( double pVal );
__declspec(implementation_key(1902)) short IComCrossStair::GetStepSumNum ( );
__declspec(implementation_key(1903)) void IComCrossStair::PutStepSumNum ( short pVal );
__declspec(implementation_key(1904)) double IComCrossStair::GetRailWidth ( );
__declspec(implementation_key(1905)) void IComCrossStair::PutRailWidth ( double pVal );
__declspec(implementation_key(1906)) double IComCrossStair::GetRailDistToSide ( );
__declspec(implementation_key(1907)) void IComCrossStair::PutRailDistToSide ( double pVal );
__declspec(implementation_key(1908)) _bstr_t IComCrossStair::GetRailInside ( );
__declspec(implementation_key(1909)) void IComCrossStair::PutRailInside ( _bstr_t pVal );
__declspec(implementation_key(1910)) _bstr_t IComCrossStair::GetRailMake ( );
__declspec(implementation_key(1911)) void IComCrossStair::PutRailMake ( _bstr_t pVal );
__declspec(implementation_key(1912)) double IComCrossStair::GetRailOutDist ( );
__declspec(implementation_key(1913)) void IComCrossStair::PutRailOutDist ( double pVal );
__declspec(implementation_key(1914)) _bstr_t IComCrossStair::GetRailOutSide ( );
__declspec(implementation_key(1915)) void IComCrossStair::PutRailOutSide ( _bstr_t pVal );
__declspec(implementation_key(1916)) _bstr_t IComCrossStair::GetHasOutsideHandrail ( );
__declspec(implementation_key(1917)) void IComCrossStair::PutHasOutsideHandrail ( _bstr_t pVal );
__declspec(implementation_key(1918)) _bstr_t IComCrossStair::GetLeftBeam ( );
__declspec(implementation_key(1919)) void IComCrossStair::PutLeftBeam ( _bstr_t pVal );
__declspec(implementation_key(1920)) _bstr_t IComCrossStair::GetRightBeam ( );
__declspec(implementation_key(1921)) void IComCrossStair::PutRightBeam ( _bstr_t pVal );
__declspec(implementation_key(1922)) double IComCrossStair::GetBeamHeight ( );
__declspec(implementation_key(1923)) void IComCrossStair::PutBeamHeight ( double pVal );
__declspec(implementation_key(1924)) double IComCrossStair::GetBeamThickness ( );
__declspec(implementation_key(1925)) void IComCrossStair::PutBeamThickness ( double pVal );
__declspec(implementation_key(1926)) ACAD_LAYER IComCrossStair::GetStepLayer ( );
__declspec(implementation_key(1927)) void IComCrossStair::PutStepLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1928)) ACAD_LAYER IComCrossStair::GetBeamLayer ( );
__declspec(implementation_key(1929)) void IComCrossStair::PutBeamLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1930)) ACAD_LAYER IComCrossStair::GetRailLayer ( );
__declspec(implementation_key(1931)) void IComCrossStair::PutRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1932)) ACAD_LAYER IComCrossStair::GetHandRailLayer ( );
__declspec(implementation_key(1933)) void IComCrossStair::PutHandRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1934)) double IComCrossStair::GetSlabLength1 ( );
__declspec(implementation_key(1935)) void IComCrossStair::PutSlabLength1 ( double pVal );
__declspec(implementation_key(1936)) double IComCrossStair::GetSlabLength2 ( );
__declspec(implementation_key(1937)) void IComCrossStair::PutSlabLength2 ( double pVal );
__declspec(implementation_key(1938)) double IComCrossStair::GetSlabLength3 ( );
__declspec(implementation_key(1939)) void IComCrossStair::PutSlabLength3 ( double pVal );
__declspec(implementation_key(1940)) double IComCrossStair::GetBoardThick ( );
__declspec(implementation_key(1941)) void IComCrossStair::PutBoardThick ( double pVal );
__declspec(implementation_key(1942)) _bstr_t IComCrossStair::GetStartSide ( );
__declspec(implementation_key(1943)) void IComCrossStair::PutStartSide ( _bstr_t pVal );
__declspec(implementation_key(1944)) _bstr_t IComCrossStair::GetStairFlag ( );
__declspec(implementation_key(1945)) void IComCrossStair::PutStairFlag ( _bstr_t pVal );
__declspec(implementation_key(1946)) short IComCrossStair::GetSectStepNum ( );
__declspec(implementation_key(1947)) void IComCrossStair::PutSectStepNum ( short pVal );
__declspec(implementation_key(1948)) _bstr_t IComCrossStair::GetEvacuateDia ( );
__declspec(implementation_key(1949)) void IComCrossStair::PutEvacuateDia ( _bstr_t pVal );
__declspec(implementation_key(1950)) _variant_t IComCrossStair::GetEvacuateDiaColor ( );
__declspec(implementation_key(1951)) void IComCrossStair::PutEvacuateDiaColor ( const _variant_t & pVal );
__declspec(implementation_key(1952)) short IComCrossStair::GetViewCtrl ( );
__declspec(implementation_key(1953)) void IComCrossStair::PutViewCtrl ( short pVal );
__declspec(implementation_key(1954)) double IComCrossStair::GetLayoutRotation ( );
__declspec(implementation_key(1955)) void IComCrossStair::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1956)) ACAD_LAYER IComCrossStair::GetTextLayer ( );
__declspec(implementation_key(1957)) void IComCrossStair::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1958)) ACAD_LAYER IComCrossStair::GetArrowLayer ( );
__declspec(implementation_key(1959)) void IComCrossStair::PutArrowLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(1960)) double IComCrossStair::GetScale ( );
__declspec(implementation_key(1961)) void IComCrossStair::PutScale ( double pVal );
__declspec(implementation_key(1962)) _bstr_t IComCrossStair::GetHasCeller ( );
__declspec(implementation_key(1963)) void IComCrossStair::PutHasCeller ( _bstr_t pVal );
__declspec(implementation_key(1964)) _bstr_t IComCrossStair::GetDownDir ( );
__declspec(implementation_key(1965)) void IComCrossStair::PutDownDir ( _bstr_t pVal );
__declspec(implementation_key(1966)) _bstr_t IComCrossStair::GetHasRoof ( );
__declspec(implementation_key(1967)) void IComCrossStair::PutHasRoof ( _bstr_t pVal );
__declspec(implementation_key(1968)) _bstr_t IComCrossStair::GetUpDir ( );
__declspec(implementation_key(1969)) void IComCrossStair::PutUpDir ( _bstr_t pVal );
__declspec(implementation_key(1970)) _bstr_t IComCrossStair::GetShadowType ( );
__declspec(implementation_key(1971)) void IComCrossStair::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(1972)) double IComCrossStair::GetElevation ( );
__declspec(implementation_key(1973)) void IComCrossStair::PutElevation ( double pVal );
__declspec(implementation_key(1974)) _bstr_t IComCrossStair::GetHasArrow ( );
__declspec(implementation_key(1975)) void IComCrossStair::PutHasArrow ( _bstr_t pVal );
__declspec(implementation_key(1976)) _bstr_t IComCrossStair::GetTextHeight ( );
__declspec(implementation_key(1977)) void IComCrossStair::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(1978)) _bstr_t IComCrossStair::GetFontStyle ( );
__declspec(implementation_key(1979)) void IComCrossStair::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(1980)) _bstr_t IComCrossStair::GetTextUp ( );
__declspec(implementation_key(1981)) void IComCrossStair::PutTextUp ( _bstr_t pVal );
__declspec(implementation_key(1982)) _bstr_t IComCrossStair::GetTextDown ( );
__declspec(implementation_key(1983)) void IComCrossStair::PutTextDown ( _bstr_t pVal );
__declspec(implementation_key(1984)) double IComParallelStair::GetScale ( );
__declspec(implementation_key(1985)) void IComParallelStair::PutScale ( double pVal );
__declspec(implementation_key(1986)) double IComParallelStair::GetLayoutRotation ( );
__declspec(implementation_key(1987)) void IComParallelStair::PutLayoutRotation ( double pVal );
__declspec(implementation_key(1988)) short IComParallelStair::GetViewCtrl ( );
__declspec(implementation_key(1989)) void IComParallelStair::PutViewCtrl ( short pVal );
__declspec(implementation_key(1990)) double IComParallelStair::GetStairHeight ( );
__declspec(implementation_key(1991)) void IComParallelStair::PutStairHeight ( double pVal );
__declspec(implementation_key(1992)) double IComParallelStair::GetSpaceWidth ( );
__declspec(implementation_key(1993)) void IComParallelStair::PutSpaceWidth ( double pVal );
__declspec(implementation_key(1994)) double IComParallelStair::GetStairWidth ( );
__declspec(implementation_key(1995)) void IComParallelStair::PutStairWidth ( double pVal );
__declspec(implementation_key(1996)) double IComParallelStair::GetStairWidth2 ( );
__declspec(implementation_key(1997)) void IComParallelStair::PutStairWidth2 ( double pVal );
__declspec(implementation_key(1998)) double IComParallelStair::GetElevation ( );
__declspec(implementation_key(1999)) void IComParallelStair::PutElevation ( double pVal );
__declspec(implementation_key(2000)) short IComParallelStair::GetStepTotalNum ( );
__declspec(implementation_key(2001)) void IComParallelStair::PutStepTotalNum ( short pVal );
__declspec(implementation_key(2002)) short IComParallelStair::GetStepNum1 ( );
__declspec(implementation_key(2003)) void IComParallelStair::PutStepNum1 ( short pVal );
__declspec(implementation_key(2004)) short IComParallelStair::GetStepNum2 ( );
__declspec(implementation_key(2005)) void IComParallelStair::PutStepNum2 ( short pVal );
__declspec(implementation_key(2006)) double IComParallelStair::GetStepHeight ( );
__declspec(implementation_key(2007)) void IComParallelStair::PutStepHeight ( double pVal );
__declspec(implementation_key(2008)) double IComParallelStair::GetStepWidth ( );
__declspec(implementation_key(2009)) void IComParallelStair::PutStepWidth ( double pVal );
__declspec(implementation_key(2010)) double IComParallelStair::GetRailWidth ( );
__declspec(implementation_key(2011)) void IComParallelStair::PutRailWidth ( double pVal );
__declspec(implementation_key(2012)) double IComParallelStair::GetRailDistToSide ( );
__declspec(implementation_key(2013)) void IComParallelStair::PutRailDistToSide ( double pVal );
__declspec(implementation_key(2014)) _bstr_t IComParallelStair::GetRailMake ( );
__declspec(implementation_key(2015)) void IComParallelStair::PutRailMake ( _bstr_t pVal );
__declspec(implementation_key(2016)) _bstr_t IComParallelStair::GetHasOutRail ( );
__declspec(implementation_key(2017)) void IComParallelStair::PutHasOutRail ( _bstr_t pVal );
__declspec(implementation_key(2018)) _bstr_t IComParallelStair::GetHasOutsideHandrail ( );
__declspec(implementation_key(2019)) void IComParallelStair::PutHasOutsideHandrail ( _bstr_t pVal );
__declspec(implementation_key(2020)) double IComParallelStair::GetRotationDist ( );
__declspec(implementation_key(2021)) void IComParallelStair::PutRotationDist ( double pVal );
__declspec(implementation_key(2022)) double IComParallelStair::GetLayerDist ( );
__declspec(implementation_key(2023)) void IComParallelStair::PutLayerDist ( double pVal );
__declspec(implementation_key(2024)) _bstr_t IComParallelStair::GetPlatType ( );
__declspec(implementation_key(2025)) void IComParallelStair::PutPlatType ( _bstr_t pVal );
__declspec(implementation_key(2026)) _bstr_t IComParallelStair::GetHasSlab ( );
__declspec(implementation_key(2027)) void IComParallelStair::PutHasSlab ( _bstr_t pVal );
__declspec(implementation_key(2028)) double IComParallelStair::GetSlabSize ( );
__declspec(implementation_key(2029)) void IComParallelStair::PutSlabSize ( double pVal );
__declspec(implementation_key(2030)) double IComParallelStair::GetSlabThickness ( );
__declspec(implementation_key(2031)) void IComParallelStair::PutSlabThickness ( double pVal );
__declspec(implementation_key(2032)) _bstr_t IComParallelStair::GetLeftBeam ( );
__declspec(implementation_key(2033)) void IComParallelStair::PutLeftBeam ( _bstr_t pVal );
__declspec(implementation_key(2034)) _bstr_t IComParallelStair::GetRightBeam ( );
__declspec(implementation_key(2035)) void IComParallelStair::PutRightBeam ( _bstr_t pVal );
__declspec(implementation_key(2036)) double IComParallelStair::GetBeamHeight ( );
__declspec(implementation_key(2037)) void IComParallelStair::PutBeamHeight ( double pVal );
__declspec(implementation_key(2038)) double IComParallelStair::GetBeamThickness ( );
__declspec(implementation_key(2039)) void IComParallelStair::PutBeamThickness ( double pVal );
__declspec(implementation_key(2040)) ACAD_LAYER IComParallelStair::GetStepLayer ( );
__declspec(implementation_key(2041)) void IComParallelStair::PutStepLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2042)) ACAD_LAYER IComParallelStair::GetBeamLayer ( );
__declspec(implementation_key(2043)) void IComParallelStair::PutBeamLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2044)) ACAD_LAYER IComParallelStair::GetRailLayer ( );
__declspec(implementation_key(2045)) void IComParallelStair::PutRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2046)) ACAD_LAYER IComParallelStair::GetHandRailLayer ( );
__declspec(implementation_key(2047)) void IComParallelStair::PutHandRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2048)) ACAD_LAYER IComParallelStair::GetTextLayer ( );
__declspec(implementation_key(2049)) void IComParallelStair::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2050)) ACAD_LAYER IComParallelStair::GetArrowLayer ( );
__declspec(implementation_key(2051)) void IComParallelStair::PutArrowLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2052)) _bstr_t IComParallelStair::GetAlignment ( );
__declspec(implementation_key(2053)) void IComParallelStair::PutAlignment ( _bstr_t pVal );
__declspec(implementation_key(2054)) _bstr_t IComParallelStair::GetStartSide ( );
__declspec(implementation_key(2055)) void IComParallelStair::PutStartSide ( _bstr_t pVal );
__declspec(implementation_key(2056)) _bstr_t IComParallelStair::GetStairFlag ( );
__declspec(implementation_key(2057)) void IComParallelStair::PutStairFlag ( _bstr_t pVal );
__declspec(implementation_key(2058)) short IComParallelStair::GetSectStepNum ( );
__declspec(implementation_key(2059)) void IComParallelStair::PutSectStepNum ( short pVal );
__declspec(implementation_key(2060)) _bstr_t IComParallelStair::GetShadowType ( );
__declspec(implementation_key(2061)) void IComParallelStair::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2062)) _bstr_t IComParallelStair::GetHasArrow ( );
__declspec(implementation_key(2063)) void IComParallelStair::PutHasArrow ( _bstr_t pVal );
__declspec(implementation_key(2064)) _bstr_t IComParallelStair::GetTextHeight ( );
__declspec(implementation_key(2065)) void IComParallelStair::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(2066)) _bstr_t IComParallelStair::GetFontStyle ( );
__declspec(implementation_key(2067)) void IComParallelStair::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(2068)) _bstr_t IComParallelStair::GetTextUp ( );
__declspec(implementation_key(2069)) void IComParallelStair::PutTextUp ( _bstr_t pVal );
__declspec(implementation_key(2070)) _bstr_t IComParallelStair::GetTextDown ( );
__declspec(implementation_key(2071)) void IComParallelStair::PutTextDown ( _bstr_t pVal );
__declspec(implementation_key(2072)) double IComScissorsStair::GetScale ( );
__declspec(implementation_key(2073)) void IComScissorsStair::PutScale ( double pVal );
__declspec(implementation_key(2074)) double IComScissorsStair::GetLayoutRotation ( );
__declspec(implementation_key(2075)) void IComScissorsStair::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2076)) short IComScissorsStair::GetViewCtrl ( );
__declspec(implementation_key(2077)) void IComScissorsStair::PutViewCtrl ( short pVal );
__declspec(implementation_key(2078)) double IComScissorsStair::GetStairHeight ( );
__declspec(implementation_key(2079)) void IComScissorsStair::PutStairHeight ( double pVal );
__declspec(implementation_key(2080)) double IComScissorsStair::GetSpaceWidth ( );
__declspec(implementation_key(2081)) void IComScissorsStair::PutSpaceWidth ( double pVal );
__declspec(implementation_key(2082)) double IComScissorsStair::GetStairWidth ( );
__declspec(implementation_key(2083)) void IComScissorsStair::PutStairWidth ( double pVal );
__declspec(implementation_key(2084)) double IComScissorsStair::GetElevation ( );
__declspec(implementation_key(2085)) void IComScissorsStair::PutElevation ( double pVal );
__declspec(implementation_key(2086)) short IComScissorsStair::GetStepTotalNum ( );
__declspec(implementation_key(2087)) void IComScissorsStair::PutStepTotalNum ( short pVal );
__declspec(implementation_key(2088)) short IComScissorsStair::GetStepNum1 ( );
__declspec(implementation_key(2089)) void IComScissorsStair::PutStepNum1 ( short pVal );
__declspec(implementation_key(2090)) short IComScissorsStair::GetStepNum2 ( );
__declspec(implementation_key(2091)) void IComScissorsStair::PutStepNum2 ( short pVal );
__declspec(implementation_key(2092)) double IComScissorsStair::GetStepHeight ( );
__declspec(implementation_key(2093)) void IComScissorsStair::PutStepHeight ( double pVal );
__declspec(implementation_key(2094)) double IComScissorsStair::GetStepWidth ( );
__declspec(implementation_key(2095)) void IComScissorsStair::PutStepWidth ( double pVal );
__declspec(implementation_key(2096)) double IComScissorsStair::GetRailWidth ( );
__declspec(implementation_key(2097)) void IComScissorsStair::PutRailWidth ( double pVal );
__declspec(implementation_key(2098)) double IComScissorsStair::GetRailDistToSide ( );
__declspec(implementation_key(2099)) void IComScissorsStair::PutRailDistToSide ( double pVal );
__declspec(implementation_key(2100)) _bstr_t IComScissorsStair::GetRailMake ( );
__declspec(implementation_key(2101)) void IComScissorsStair::PutRailMake ( _bstr_t pVal );
__declspec(implementation_key(2102)) _bstr_t IComScissorsStair::GetHasOutRail ( );
__declspec(implementation_key(2103)) void IComScissorsStair::PutHasOutRail ( _bstr_t pVal );
__declspec(implementation_key(2104)) _bstr_t IComScissorsStair::GetHasOutsideHandrail ( );
__declspec(implementation_key(2105)) void IComScissorsStair::PutHasOutsideHandrail ( _bstr_t pVal );
__declspec(implementation_key(2106)) double IComScissorsStair::GetRotationDist ( );
__declspec(implementation_key(2107)) void IComScissorsStair::PutRotationDist ( double pVal );
__declspec(implementation_key(2108)) double IComScissorsStair::GetLayerDist ( );
__declspec(implementation_key(2109)) void IComScissorsStair::PutLayerDist ( double pVal );
__declspec(implementation_key(2110)) _bstr_t IComScissorsStair::GetHasSlab ( );
__declspec(implementation_key(2111)) void IComScissorsStair::PutHasSlab ( _bstr_t pVal );
__declspec(implementation_key(2112)) double IComScissorsStair::GetSlabSize ( );
__declspec(implementation_key(2113)) void IComScissorsStair::PutSlabSize ( double pVal );
__declspec(implementation_key(2114)) double IComScissorsStair::GetSlabThickness ( );
__declspec(implementation_key(2115)) void IComScissorsStair::PutSlabThickness ( double pVal );
__declspec(implementation_key(2116)) _bstr_t IComScissorsStair::GetLeftBeam ( );
__declspec(implementation_key(2117)) void IComScissorsStair::PutLeftBeam ( _bstr_t pVal );
__declspec(implementation_key(2118)) _bstr_t IComScissorsStair::GetRightBeam ( );
__declspec(implementation_key(2119)) void IComScissorsStair::PutRightBeam ( _bstr_t pVal );
__declspec(implementation_key(2120)) double IComScissorsStair::GetBeamHeight ( );
__declspec(implementation_key(2121)) void IComScissorsStair::PutBeamHeight ( double pVal );
__declspec(implementation_key(2122)) double IComScissorsStair::GetBeamThickness ( );
__declspec(implementation_key(2123)) void IComScissorsStair::PutBeamThickness ( double pVal );
__declspec(implementation_key(2124)) ACAD_LAYER IComScissorsStair::GetStepLayer ( );
__declspec(implementation_key(2125)) void IComScissorsStair::PutStepLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2126)) ACAD_LAYER IComScissorsStair::GetBeamLayer ( );
__declspec(implementation_key(2127)) void IComScissorsStair::PutBeamLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2128)) ACAD_LAYER IComScissorsStair::GetRailLayer ( );
__declspec(implementation_key(2129)) void IComScissorsStair::PutRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2130)) ACAD_LAYER IComScissorsStair::GetHandRailLayer ( );
__declspec(implementation_key(2131)) void IComScissorsStair::PutHandRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2132)) ACAD_LAYER IComScissorsStair::GetTextLayer ( );
__declspec(implementation_key(2133)) void IComScissorsStair::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2134)) ACAD_LAYER IComScissorsStair::GetArrowLayer ( );
__declspec(implementation_key(2135)) void IComScissorsStair::PutArrowLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2136)) _bstr_t IComScissorsStair::GetAlignment ( );
__declspec(implementation_key(2137)) void IComScissorsStair::PutAlignment ( _bstr_t pVal );
__declspec(implementation_key(2138)) _bstr_t IComScissorsStair::GetStartSide ( );
__declspec(implementation_key(2139)) void IComScissorsStair::PutStartSide ( _bstr_t pVal );
__declspec(implementation_key(2140)) _bstr_t IComScissorsStair::GetStairFlag ( );
__declspec(implementation_key(2141)) void IComScissorsStair::PutStairFlag ( _bstr_t pVal );
__declspec(implementation_key(2142)) short IComScissorsStair::GetSectStepNum ( );
__declspec(implementation_key(2143)) void IComScissorsStair::PutSectStepNum ( short pVal );
__declspec(implementation_key(2144)) _bstr_t IComScissorsStair::GetShadowType ( );
__declspec(implementation_key(2145)) void IComScissorsStair::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2146)) _bstr_t IComScissorsStair::GetHasArrow ( );
__declspec(implementation_key(2147)) void IComScissorsStair::PutHasArrow ( _bstr_t pVal );
__declspec(implementation_key(2148)) _bstr_t IComScissorsStair::GetTextHeight ( );
__declspec(implementation_key(2149)) void IComScissorsStair::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(2150)) _bstr_t IComScissorsStair::GetFontStyle ( );
__declspec(implementation_key(2151)) void IComScissorsStair::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(2152)) _bstr_t IComScissorsStair::GetTextUp ( );
__declspec(implementation_key(2153)) void IComScissorsStair::PutTextUp ( _bstr_t pVal );
__declspec(implementation_key(2154)) _bstr_t IComScissorsStair::GetTextDown ( );
__declspec(implementation_key(2155)) void IComScissorsStair::PutTextDown ( _bstr_t pVal );
__declspec(implementation_key(2156)) double IComCornerStair::GetScale ( );
__declspec(implementation_key(2157)) void IComCornerStair::PutScale ( double pVal );
__declspec(implementation_key(2158)) double IComCornerStair::GetLayoutRotation ( );
__declspec(implementation_key(2159)) void IComCornerStair::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2160)) short IComCornerStair::GetViewCtrl ( );
__declspec(implementation_key(2161)) void IComCornerStair::PutViewCtrl ( short pVal );
__declspec(implementation_key(2162)) double IComCornerStair::GetStairHeight ( );
__declspec(implementation_key(2163)) void IComCornerStair::PutStairHeight ( double pVal );
__declspec(implementation_key(2164)) double IComCornerStair::GetSideStairWidth ( );
__declspec(implementation_key(2165)) void IComCornerStair::PutSideStairWidth ( double pVal );
__declspec(implementation_key(2166)) double IComCornerStair::GetMidStairWidth ( );
__declspec(implementation_key(2167)) void IComCornerStair::PutMidStairWidth ( double pVal );
__declspec(implementation_key(2168)) double IComCornerStair::GetElevation ( );
__declspec(implementation_key(2169)) void IComCornerStair::PutElevation ( double pVal );
__declspec(implementation_key(2170)) short IComCornerStair::GetStepTotalNum ( );
__declspec(implementation_key(2171)) void IComCornerStair::PutStepTotalNum ( short pVal );
__declspec(implementation_key(2172)) short IComCornerStair::GetStepNum1 ( );
__declspec(implementation_key(2173)) void IComCornerStair::PutStepNum1 ( short pVal );
__declspec(implementation_key(2174)) short IComCornerStair::GetStepNum2 ( );
__declspec(implementation_key(2175)) void IComCornerStair::PutStepNum2 ( short pVal );
__declspec(implementation_key(2176)) double IComCornerStair::GetStepHeight ( );
__declspec(implementation_key(2177)) void IComCornerStair::PutStepHeight ( double pVal );
__declspec(implementation_key(2178)) double IComCornerStair::GetStepWidth ( );
__declspec(implementation_key(2179)) void IComCornerStair::PutStepWidth ( double pVal );
__declspec(implementation_key(2180)) double IComCornerStair::GetRailWidth ( );
__declspec(implementation_key(2181)) void IComCornerStair::PutRailWidth ( double pVal );
__declspec(implementation_key(2182)) double IComCornerStair::GetRailDistToSide ( );
__declspec(implementation_key(2183)) void IComCornerStair::PutRailDistToSide ( double pVal );
__declspec(implementation_key(2184)) _bstr_t IComCornerStair::GetRailMake ( );
__declspec(implementation_key(2185)) void IComCornerStair::PutRailMake ( _bstr_t pVal );
__declspec(implementation_key(2186)) _bstr_t IComCornerStair::GetHasOutRail ( );
__declspec(implementation_key(2187)) void IComCornerStair::PutHasOutRail ( _bstr_t pVal );
__declspec(implementation_key(2188)) _bstr_t IComCornerStair::GetHasOutsideHandrail ( );
__declspec(implementation_key(2189)) void IComCornerStair::PutHasOutsideHandrail ( _bstr_t pVal );
__declspec(implementation_key(2190)) _bstr_t IComCornerStair::GetPlatType ( );
__declspec(implementation_key(2191)) void IComCornerStair::PutPlatType ( _bstr_t pVal );
__declspec(implementation_key(2192)) _bstr_t IComCornerStair::GetHasSlab ( );
__declspec(implementation_key(2193)) void IComCornerStair::PutHasSlab ( _bstr_t pVal );
__declspec(implementation_key(2194)) double IComCornerStair::GetSlabSize ( );
__declspec(implementation_key(2195)) void IComCornerStair::PutSlabSize ( double pVal );
__declspec(implementation_key(2196)) double IComCornerStair::GetSlabLength ( );
__declspec(implementation_key(2197)) void IComCornerStair::PutSlabLength ( double pVal );
__declspec(implementation_key(2198)) double IComCornerStair::GetSlabThickness ( );
__declspec(implementation_key(2199)) void IComCornerStair::PutSlabThickness ( double pVal );
__declspec(implementation_key(2200)) double IComCornerStair::GetRotationDist ( );
__declspec(implementation_key(2201)) void IComCornerStair::PutRotationDist ( double pVal );
__declspec(implementation_key(2202)) double IComCornerStair::GetLayerDist ( );
__declspec(implementation_key(2203)) void IComCornerStair::PutLayerDist ( double pVal );
__declspec(implementation_key(2204)) _bstr_t IComCornerStair::GetLeftBeam ( );
__declspec(implementation_key(2205)) void IComCornerStair::PutLeftBeam ( _bstr_t pVal );
__declspec(implementation_key(2206)) _bstr_t IComCornerStair::GetRightBeam ( );
__declspec(implementation_key(2207)) void IComCornerStair::PutRightBeam ( _bstr_t pVal );
__declspec(implementation_key(2208)) double IComCornerStair::GetBeamHeight ( );
__declspec(implementation_key(2209)) void IComCornerStair::PutBeamHeight ( double pVal );
__declspec(implementation_key(2210)) double IComCornerStair::GetBeamThickness ( );
__declspec(implementation_key(2211)) void IComCornerStair::PutBeamThickness ( double pVal );
__declspec(implementation_key(2212)) ACAD_LAYER IComCornerStair::GetStepLayer ( );
__declspec(implementation_key(2213)) void IComCornerStair::PutStepLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2214)) ACAD_LAYER IComCornerStair::GetBeamLayer ( );
__declspec(implementation_key(2215)) void IComCornerStair::PutBeamLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2216)) ACAD_LAYER IComCornerStair::GetRailLayer ( );
__declspec(implementation_key(2217)) void IComCornerStair::PutRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2218)) ACAD_LAYER IComCornerStair::GetHandRailLayer ( );
__declspec(implementation_key(2219)) void IComCornerStair::PutHandRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2220)) ACAD_LAYER IComCornerStair::GetTextLayer ( );
__declspec(implementation_key(2221)) void IComCornerStair::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2222)) ACAD_LAYER IComCornerStair::GetArrowLayer ( );
__declspec(implementation_key(2223)) void IComCornerStair::PutArrowLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2224)) _bstr_t IComCornerStair::GetStartSide ( );
__declspec(implementation_key(2225)) void IComCornerStair::PutStartSide ( _bstr_t pVal );
__declspec(implementation_key(2226)) _bstr_t IComCornerStair::GetStairFlag ( );
__declspec(implementation_key(2227)) void IComCornerStair::PutStairFlag ( _bstr_t pVal );
__declspec(implementation_key(2228)) short IComCornerStair::GetSectStepNum ( );
__declspec(implementation_key(2229)) void IComCornerStair::PutSectStepNum ( short pVal );
__declspec(implementation_key(2230)) _bstr_t IComCornerStair::GetShadowType ( );
__declspec(implementation_key(2231)) void IComCornerStair::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2232)) _bstr_t IComCornerStair::GetHasArrow ( );
__declspec(implementation_key(2233)) void IComCornerStair::PutHasArrow ( _bstr_t pVal );
__declspec(implementation_key(2234)) _bstr_t IComCornerStair::GetTextHeight ( );
__declspec(implementation_key(2235)) void IComCornerStair::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(2236)) _bstr_t IComCornerStair::GetFontStyle ( );
__declspec(implementation_key(2237)) void IComCornerStair::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(2238)) _bstr_t IComCornerStair::GetTextUp ( );
__declspec(implementation_key(2239)) void IComCornerStair::PutTextUp ( _bstr_t pVal );
__declspec(implementation_key(2240)) _bstr_t IComCornerStair::GetTextDown ( );
__declspec(implementation_key(2241)) void IComCornerStair::PutTextDown ( _bstr_t pVal );
__declspec(implementation_key(2242)) double IComDoubleMulStair::GetScale ( );
__declspec(implementation_key(2243)) void IComDoubleMulStair::PutScale ( double pVal );
__declspec(implementation_key(2244)) double IComDoubleMulStair::GetLayoutRotation ( );
__declspec(implementation_key(2245)) void IComDoubleMulStair::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2246)) short IComDoubleMulStair::GetViewCtrl ( );
__declspec(implementation_key(2247)) void IComDoubleMulStair::PutViewCtrl ( short pVal );
__declspec(implementation_key(2248)) double IComDoubleMulStair::GetStairHeight ( );
__declspec(implementation_key(2249)) void IComDoubleMulStair::PutStairHeight ( double pVal );
__declspec(implementation_key(2250)) double IComDoubleMulStair::GetSideStairWidth ( );
__declspec(implementation_key(2251)) void IComDoubleMulStair::PutSideStairWidth ( double pVal );
__declspec(implementation_key(2252)) double IComDoubleMulStair::GetMidStairWidth ( );
__declspec(implementation_key(2253)) void IComDoubleMulStair::PutMidStairWidth ( double pVal );
__declspec(implementation_key(2254)) double IComDoubleMulStair::GetElevation ( );
__declspec(implementation_key(2255)) void IComDoubleMulStair::PutElevation ( double pVal );
__declspec(implementation_key(2256)) short IComDoubleMulStair::GetStepTotalNum ( );
__declspec(implementation_key(2257)) void IComDoubleMulStair::PutStepTotalNum ( short pVal );
__declspec(implementation_key(2258)) short IComDoubleMulStair::GetStepNum1 ( );
__declspec(implementation_key(2259)) void IComDoubleMulStair::PutStepNum1 ( short pVal );
__declspec(implementation_key(2260)) short IComDoubleMulStair::GetStepNum2 ( );
__declspec(implementation_key(2261)) void IComDoubleMulStair::PutStepNum2 ( short pVal );
__declspec(implementation_key(2262)) short IComDoubleMulStair::GetStepNum3 ( );
__declspec(implementation_key(2263)) void IComDoubleMulStair::PutStepNum3 ( short pVal );
__declspec(implementation_key(2264)) double IComDoubleMulStair::GetStepHeight ( );
__declspec(implementation_key(2265)) void IComDoubleMulStair::PutStepHeight ( double pVal );
__declspec(implementation_key(2266)) double IComDoubleMulStair::GetStepWidth ( );
__declspec(implementation_key(2267)) void IComDoubleMulStair::PutStepWidth ( double pVal );
__declspec(implementation_key(2268)) double IComDoubleMulStair::GetRailWidth ( );
__declspec(implementation_key(2269)) void IComDoubleMulStair::PutRailWidth ( double pVal );
__declspec(implementation_key(2270)) double IComDoubleMulStair::GetRailDistToSide ( );
__declspec(implementation_key(2271)) void IComDoubleMulStair::PutRailDistToSide ( double pVal );
__declspec(implementation_key(2272)) _bstr_t IComDoubleMulStair::GetRailMake ( );
__declspec(implementation_key(2273)) void IComDoubleMulStair::PutRailMake ( _bstr_t pVal );
__declspec(implementation_key(2274)) double IComDoubleMulStair::GetRailOutDist ( );
__declspec(implementation_key(2275)) void IComDoubleMulStair::PutRailOutDist ( double pVal );
__declspec(implementation_key(2276)) double IComDoubleMulStair::GetRailOutDistSide ( );
__declspec(implementation_key(2277)) void IComDoubleMulStair::PutRailOutDistSide ( double pVal );
__declspec(implementation_key(2278)) _bstr_t IComDoubleMulStair::GetHasOutRail ( );
__declspec(implementation_key(2279)) void IComDoubleMulStair::PutHasOutRail ( _bstr_t pVal );
__declspec(implementation_key(2280)) _bstr_t IComDoubleMulStair::GetHasOutsideHandrail ( );
__declspec(implementation_key(2281)) void IComDoubleMulStair::PutHasOutsideHandrail ( _bstr_t pVal );
__declspec(implementation_key(2282)) double IComDoubleMulStair::GetSidePlatLength ( );
__declspec(implementation_key(2283)) void IComDoubleMulStair::PutSidePlatLength ( double pVal );
__declspec(implementation_key(2284)) double IComDoubleMulStair::GetSidePlatWidth ( );
__declspec(implementation_key(2285)) void IComDoubleMulStair::PutSidePlatWidth ( double pVal );
__declspec(implementation_key(2286)) double IComDoubleMulStair::GetMidPlatLength ( );
__declspec(implementation_key(2287)) void IComDoubleMulStair::PutMidPlatLength ( double pVal );
__declspec(implementation_key(2288)) double IComDoubleMulStair::GetMidPlatWidth ( );
__declspec(implementation_key(2289)) void IComDoubleMulStair::PutMidPlatWidth ( double pVal );
__declspec(implementation_key(2290)) double IComDoubleMulStair::GetSlabThickness ( );
__declspec(implementation_key(2291)) void IComDoubleMulStair::PutSlabThickness ( double pVal );
__declspec(implementation_key(2292)) _bstr_t IComDoubleMulStair::GetLeftBeam ( );
__declspec(implementation_key(2293)) void IComDoubleMulStair::PutLeftBeam ( _bstr_t pVal );
__declspec(implementation_key(2294)) _bstr_t IComDoubleMulStair::GetRightBeam ( );
__declspec(implementation_key(2295)) void IComDoubleMulStair::PutRightBeam ( _bstr_t pVal );
__declspec(implementation_key(2296)) double IComDoubleMulStair::GetBeamHeight ( );
__declspec(implementation_key(2297)) void IComDoubleMulStair::PutBeamHeight ( double pVal );
__declspec(implementation_key(2298)) double IComDoubleMulStair::GetBeamThickness ( );
__declspec(implementation_key(2299)) void IComDoubleMulStair::PutBeamThickness ( double pVal );
__declspec(implementation_key(2300)) ACAD_LAYER IComDoubleMulStair::GetStepLayer ( );
__declspec(implementation_key(2301)) void IComDoubleMulStair::PutStepLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2302)) ACAD_LAYER IComDoubleMulStair::GetBeamLayer ( );
__declspec(implementation_key(2303)) void IComDoubleMulStair::PutBeamLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2304)) ACAD_LAYER IComDoubleMulStair::GetRailLayer ( );
__declspec(implementation_key(2305)) void IComDoubleMulStair::PutRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2306)) ACAD_LAYER IComDoubleMulStair::GetHandRailLayer ( );
__declspec(implementation_key(2307)) void IComDoubleMulStair::PutHandRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2308)) ACAD_LAYER IComDoubleMulStair::GetTextLayer ( );
__declspec(implementation_key(2309)) void IComDoubleMulStair::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2310)) ACAD_LAYER IComDoubleMulStair::GetArrowLayer ( );
__declspec(implementation_key(2311)) void IComDoubleMulStair::PutArrowLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2312)) _bstr_t IComDoubleMulStair::GetStartSide ( );
__declspec(implementation_key(2313)) void IComDoubleMulStair::PutStartSide ( _bstr_t pVal );
__declspec(implementation_key(2314)) _bstr_t IComDoubleMulStair::GetStairFlag ( );
__declspec(implementation_key(2315)) void IComDoubleMulStair::PutStairFlag ( _bstr_t pVal );
__declspec(implementation_key(2316)) short IComDoubleMulStair::GetSectStepNum ( );
__declspec(implementation_key(2317)) void IComDoubleMulStair::PutSectStepNum ( short pVal );
__declspec(implementation_key(2318)) _bstr_t IComDoubleMulStair::GetShadowType ( );
__declspec(implementation_key(2319)) void IComDoubleMulStair::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2320)) _bstr_t IComDoubleMulStair::GetHasArrow ( );
__declspec(implementation_key(2321)) void IComDoubleMulStair::PutHasArrow ( _bstr_t pVal );
__declspec(implementation_key(2322)) _bstr_t IComDoubleMulStair::GetTextHeight ( );
__declspec(implementation_key(2323)) void IComDoubleMulStair::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(2324)) _bstr_t IComDoubleMulStair::GetFontStyle ( );
__declspec(implementation_key(2325)) void IComDoubleMulStair::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(2326)) _bstr_t IComDoubleMulStair::GetTextUp ( );
__declspec(implementation_key(2327)) void IComDoubleMulStair::PutTextUp ( _bstr_t pVal );
__declspec(implementation_key(2328)) _bstr_t IComDoubleMulStair::GetTextDown ( );
__declspec(implementation_key(2329)) void IComDoubleMulStair::PutTextDown ( _bstr_t pVal );
__declspec(implementation_key(2330)) double IComTriangleStair::GetScale ( );
__declspec(implementation_key(2331)) void IComTriangleStair::PutScale ( double pVal );
__declspec(implementation_key(2332)) double IComTriangleStair::GetLayoutRotation ( );
__declspec(implementation_key(2333)) void IComTriangleStair::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2334)) short IComTriangleStair::GetViewCtrl ( );
__declspec(implementation_key(2335)) void IComTriangleStair::PutViewCtrl ( short pVal );
__declspec(implementation_key(2336)) double IComTriangleStair::GetStairHeight ( );
__declspec(implementation_key(2337)) void IComTriangleStair::PutStairHeight ( double pVal );
__declspec(implementation_key(2338)) double IComTriangleStair::GetSpaceWidth ( );
__declspec(implementation_key(2339)) void IComTriangleStair::PutSpaceWidth ( double pVal );
__declspec(implementation_key(2340)) double IComTriangleStair::GetStairWidth ( );
__declspec(implementation_key(2341)) void IComTriangleStair::PutStairWidth ( double pVal );
__declspec(implementation_key(2342)) double IComTriangleStair::GetElevation ( );
__declspec(implementation_key(2343)) void IComTriangleStair::PutElevation ( double pVal );
__declspec(implementation_key(2344)) short IComTriangleStair::GetStepNum1 ( );
__declspec(implementation_key(2345)) void IComTriangleStair::PutStepNum1 ( short pVal );
__declspec(implementation_key(2346)) double IComTriangleStair::GetStepHeight ( );
__declspec(implementation_key(2347)) void IComTriangleStair::PutStepHeight ( double pVal );
__declspec(implementation_key(2348)) double IComTriangleStair::GetStepWidth ( );
__declspec(implementation_key(2349)) void IComTriangleStair::PutStepWidth ( double pVal );
__declspec(implementation_key(2350)) double IComTriangleStair::GetRailWidth ( );
__declspec(implementation_key(2351)) void IComTriangleStair::PutRailWidth ( double pVal );
__declspec(implementation_key(2352)) double IComTriangleStair::GetRailDistToSide ( );
__declspec(implementation_key(2353)) void IComTriangleStair::PutRailDistToSide ( double pVal );
__declspec(implementation_key(2354)) _bstr_t IComTriangleStair::GetHasRailConnect ( );
__declspec(implementation_key(2355)) void IComTriangleStair::PutHasRailConnect ( _bstr_t pVal );
__declspec(implementation_key(2356)) _bstr_t IComTriangleStair::GetRailIsOpen ( );
__declspec(implementation_key(2357)) void IComTriangleStair::PutRailIsOpen ( _bstr_t pVal );
__declspec(implementation_key(2358)) _bstr_t IComTriangleStair::GetRailMake ( );
__declspec(implementation_key(2359)) void IComTriangleStair::PutRailMake ( _bstr_t pVal );
__declspec(implementation_key(2360)) _bstr_t IComTriangleStair::GetHasOutRail ( );
__declspec(implementation_key(2361)) void IComTriangleStair::PutHasOutRail ( _bstr_t pVal );
__declspec(implementation_key(2362)) _bstr_t IComTriangleStair::GetHasOutsideHandrail ( );
__declspec(implementation_key(2363)) void IComTriangleStair::PutHasOutsideHandrail ( _bstr_t pVal );
__declspec(implementation_key(2364)) double IComTriangleStair::GetRailOutDist ( );
__declspec(implementation_key(2365)) void IComTriangleStair::PutRailOutDist ( double pVal );
__declspec(implementation_key(2366)) _bstr_t IComTriangleStair::GetHasSlab ( );
__declspec(implementation_key(2367)) void IComTriangleStair::PutHasSlab ( _bstr_t pVal );
__declspec(implementation_key(2368)) double IComTriangleStair::GetSlabSize ( );
__declspec(implementation_key(2369)) void IComTriangleStair::PutSlabSize ( double pVal );
__declspec(implementation_key(2370)) double IComTriangleStair::GetSlabThickness ( );
__declspec(implementation_key(2371)) void IComTriangleStair::PutSlabThickness ( double pVal );
__declspec(implementation_key(2372)) _bstr_t IComTriangleStair::GetLeftBeam ( );
__declspec(implementation_key(2373)) void IComTriangleStair::PutLeftBeam ( _bstr_t pVal );
__declspec(implementation_key(2374)) _bstr_t IComTriangleStair::GetRightBeam ( );
__declspec(implementation_key(2375)) void IComTriangleStair::PutRightBeam ( _bstr_t pVal );
__declspec(implementation_key(2376)) double IComTriangleStair::GetBeamHeight ( );
__declspec(implementation_key(2377)) void IComTriangleStair::PutBeamHeight ( double pVal );
__declspec(implementation_key(2378)) double IComTriangleStair::GetBeamThickness ( );
__declspec(implementation_key(2379)) void IComTriangleStair::PutBeamThickness ( double pVal );
__declspec(implementation_key(2380)) ACAD_LAYER IComTriangleStair::GetStepLayer ( );
__declspec(implementation_key(2381)) void IComTriangleStair::PutStepLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2382)) ACAD_LAYER IComTriangleStair::GetBeamLayer ( );
__declspec(implementation_key(2383)) void IComTriangleStair::PutBeamLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2384)) ACAD_LAYER IComTriangleStair::GetRailLayer ( );
__declspec(implementation_key(2385)) void IComTriangleStair::PutRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2386)) ACAD_LAYER IComTriangleStair::GetHandRailLayer ( );
__declspec(implementation_key(2387)) void IComTriangleStair::PutHandRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2388)) ACAD_LAYER IComTriangleStair::GetTextLayer ( );
__declspec(implementation_key(2389)) void IComTriangleStair::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2390)) ACAD_LAYER IComTriangleStair::GetArrowLayer ( );
__declspec(implementation_key(2391)) void IComTriangleStair::PutArrowLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2392)) _bstr_t IComTriangleStair::GetStartSide ( );
__declspec(implementation_key(2393)) void IComTriangleStair::PutStartSide ( _bstr_t pVal );
__declspec(implementation_key(2394)) _bstr_t IComTriangleStair::GetStairFlag ( );
__declspec(implementation_key(2395)) void IComTriangleStair::PutStairFlag ( _bstr_t pVal );
__declspec(implementation_key(2396)) short IComTriangleStair::GetSectStepNum ( );
__declspec(implementation_key(2397)) void IComTriangleStair::PutSectStepNum ( short pVal );
__declspec(implementation_key(2398)) _bstr_t IComTriangleStair::GetShadowType ( );
__declspec(implementation_key(2399)) void IComTriangleStair::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2400)) _bstr_t IComTriangleStair::GetHasArrow ( );
__declspec(implementation_key(2401)) void IComTriangleStair::PutHasArrow ( _bstr_t pVal );
__declspec(implementation_key(2402)) _bstr_t IComTriangleStair::GetTextHeight ( );
__declspec(implementation_key(2403)) void IComTriangleStair::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(2404)) _bstr_t IComTriangleStair::GetFontStyle ( );
__declspec(implementation_key(2405)) void IComTriangleStair::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(2406)) _bstr_t IComTriangleStair::GetTextUp ( );
__declspec(implementation_key(2407)) void IComTriangleStair::PutTextUp ( _bstr_t pVal );
__declspec(implementation_key(2408)) _bstr_t IComTriangleStair::GetTextDown ( );
__declspec(implementation_key(2409)) void IComTriangleStair::PutTextDown ( _bstr_t pVal );
__declspec(implementation_key(2410)) double IComRectCornerStair::GetScale ( );
__declspec(implementation_key(2411)) void IComRectCornerStair::PutScale ( double pVal );
__declspec(implementation_key(2412)) double IComRectCornerStair::GetLayoutRotation ( );
__declspec(implementation_key(2413)) void IComRectCornerStair::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2414)) short IComRectCornerStair::GetViewCtrl ( );
__declspec(implementation_key(2415)) void IComRectCornerStair::PutViewCtrl ( short pVal );
__declspec(implementation_key(2416)) double IComRectCornerStair::GetStairHeight ( );
__declspec(implementation_key(2417)) void IComRectCornerStair::PutStairHeight ( double pVal );
__declspec(implementation_key(2418)) double IComRectCornerStair::GetStairWidthOne ( );
__declspec(implementation_key(2419)) void IComRectCornerStair::PutStairWidthOne ( double pVal );
__declspec(implementation_key(2420)) double IComRectCornerStair::GetStairWidthTwo ( );
__declspec(implementation_key(2421)) void IComRectCornerStair::PutStairWidthTwo ( double pVal );
__declspec(implementation_key(2422)) _bstr_t IComRectCornerStair::GetIsSmmetry ( );
__declspec(implementation_key(2423)) void IComRectCornerStair::PutIsSmmetry ( _bstr_t pVal );
__declspec(implementation_key(2424)) _bstr_t IComRectCornerStair::GetStairNum ( );
__declspec(implementation_key(2425)) void IComRectCornerStair::PutStairNum ( _bstr_t pVal );
__declspec(implementation_key(2426)) double IComRectCornerStair::GetStairWidthThree ( );
__declspec(implementation_key(2427)) void IComRectCornerStair::PutStairWidthThree ( double pVal );
__declspec(implementation_key(2428)) short IComRectCornerStair::GetStepNum3 ( );
__declspec(implementation_key(2429)) void IComRectCornerStair::PutStepNum3 ( short pVal );
__declspec(implementation_key(2430)) double IComRectCornerStair::GetStairWidthFour ( );
__declspec(implementation_key(2431)) void IComRectCornerStair::PutStairWidthFour ( double pVal );
__declspec(implementation_key(2432)) short IComRectCornerStair::GetStepNum4 ( );
__declspec(implementation_key(2433)) void IComRectCornerStair::PutStepNum4 ( short pVal );
__declspec(implementation_key(2434)) double IComRectCornerStair::GetElevation ( );
__declspec(implementation_key(2435)) void IComRectCornerStair::PutElevation ( double pVal );
__declspec(implementation_key(2436)) short IComRectCornerStair::GetStepNum1 ( );
__declspec(implementation_key(2437)) void IComRectCornerStair::PutStepNum1 ( short pVal );
__declspec(implementation_key(2438)) short IComRectCornerStair::GetStepNum2 ( );
__declspec(implementation_key(2439)) void IComRectCornerStair::PutStepNum2 ( short pVal );
__declspec(implementation_key(2440)) double IComRectCornerStair::GetStepHeight ( );
__declspec(implementation_key(2441)) void IComRectCornerStair::PutStepHeight ( double pVal );
__declspec(implementation_key(2442)) double IComRectCornerStair::GetStepWidth ( );
__declspec(implementation_key(2443)) void IComRectCornerStair::PutStepWidth ( double pVal );
__declspec(implementation_key(2444)) double IComRectCornerStair::GetRailWidth ( );
__declspec(implementation_key(2445)) void IComRectCornerStair::PutRailWidth ( double pVal );
__declspec(implementation_key(2446)) double IComRectCornerStair::GetRailDistToSide ( );
__declspec(implementation_key(2447)) void IComRectCornerStair::PutRailDistToSide ( double pVal );
__declspec(implementation_key(2448)) _bstr_t IComRectCornerStair::GetHasRailConnect ( );
__declspec(implementation_key(2449)) void IComRectCornerStair::PutHasRailConnect ( _bstr_t pVal );
__declspec(implementation_key(2450)) _bstr_t IComRectCornerStair::GetRailMake ( );
__declspec(implementation_key(2451)) void IComRectCornerStair::PutRailMake ( _bstr_t pVal );
__declspec(implementation_key(2452)) _bstr_t IComRectCornerStair::GetHasOutRail ( );
__declspec(implementation_key(2453)) void IComRectCornerStair::PutHasOutRail ( _bstr_t pVal );
__declspec(implementation_key(2454)) _bstr_t IComRectCornerStair::GetHasOutsideHandrail ( );
__declspec(implementation_key(2455)) void IComRectCornerStair::PutHasOutsideHandrail ( _bstr_t pVal );
__declspec(implementation_key(2456)) double IComRectCornerStair::GetRailOutDist ( );
__declspec(implementation_key(2457)) void IComRectCornerStair::PutRailOutDist ( double pVal );
__declspec(implementation_key(2458)) double IComRectCornerStair::GetRailOutDistDown ( );
__declspec(implementation_key(2459)) void IComRectCornerStair::PutRailOutDistDown ( double pVal );
__declspec(implementation_key(2460)) _bstr_t IComRectCornerStair::GetHasSlab ( );
__declspec(implementation_key(2461)) void IComRectCornerStair::PutHasSlab ( _bstr_t pVal );
__declspec(implementation_key(2462)) double IComRectCornerStair::GetSlabWidthOne ( );
__declspec(implementation_key(2463)) void IComRectCornerStair::PutSlabWidthOne ( double pVal );
__declspec(implementation_key(2464)) double IComRectCornerStair::GetSlabSizeOne ( );
__declspec(implementation_key(2465)) void IComRectCornerStair::PutSlabSizeOne ( double pVal );
__declspec(implementation_key(2466)) double IComRectCornerStair::GetSlabWidthTwo ( );
__declspec(implementation_key(2467)) void IComRectCornerStair::PutSlabWidthTwo ( double pVal );
__declspec(implementation_key(2468)) double IComRectCornerStair::GetSlabSizeTwo ( );
__declspec(implementation_key(2469)) void IComRectCornerStair::PutSlabSizeTwo ( double pVal );
__declspec(implementation_key(2470)) double IComRectCornerStair::GetSlabWidthThree ( );
__declspec(implementation_key(2471)) void IComRectCornerStair::PutSlabWidthThree ( double pVal );
__declspec(implementation_key(2472)) double IComRectCornerStair::GetSlabSizeThree ( );
__declspec(implementation_key(2473)) void IComRectCornerStair::PutSlabSizeThree ( double pVal );
__declspec(implementation_key(2474)) double IComRectCornerStair::GetSlabThickness ( );
__declspec(implementation_key(2475)) void IComRectCornerStair::PutSlabThickness ( double pVal );
__declspec(implementation_key(2476)) _bstr_t IComRectCornerStair::GetLeftBeam ( );
__declspec(implementation_key(2477)) void IComRectCornerStair::PutLeftBeam ( _bstr_t pVal );
__declspec(implementation_key(2478)) _bstr_t IComRectCornerStair::GetRightBeam ( );
__declspec(implementation_key(2479)) void IComRectCornerStair::PutRightBeam ( _bstr_t pVal );
__declspec(implementation_key(2480)) double IComRectCornerStair::GetBeamHeight ( );
__declspec(implementation_key(2481)) void IComRectCornerStair::PutBeamHeight ( double pVal );
__declspec(implementation_key(2482)) double IComRectCornerStair::GetBeamThickness ( );
__declspec(implementation_key(2483)) void IComRectCornerStair::PutBeamThickness ( double pVal );
__declspec(implementation_key(2484)) ACAD_LAYER IComRectCornerStair::GetStepLayer ( );
__declspec(implementation_key(2485)) void IComRectCornerStair::PutStepLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2486)) ACAD_LAYER IComRectCornerStair::GetBeamLayer ( );
__declspec(implementation_key(2487)) void IComRectCornerStair::PutBeamLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2488)) ACAD_LAYER IComRectCornerStair::GetRailLayer ( );
__declspec(implementation_key(2489)) void IComRectCornerStair::PutRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2490)) ACAD_LAYER IComRectCornerStair::GetHandRailLayer ( );
__declspec(implementation_key(2491)) void IComRectCornerStair::PutHandRailLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2492)) ACAD_LAYER IComRectCornerStair::GetTextLayer ( );
__declspec(implementation_key(2493)) void IComRectCornerStair::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2494)) ACAD_LAYER IComRectCornerStair::GetArrowLayer ( );
__declspec(implementation_key(2495)) void IComRectCornerStair::PutArrowLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2496)) _bstr_t IComRectCornerStair::GetStartSide ( );
__declspec(implementation_key(2497)) void IComRectCornerStair::PutStartSide ( _bstr_t pVal );
__declspec(implementation_key(2498)) _bstr_t IComRectCornerStair::GetStairFlag ( );
__declspec(implementation_key(2499)) void IComRectCornerStair::PutStairFlag ( _bstr_t pVal );
__declspec(implementation_key(2500)) short IComRectCornerStair::GetSectStepNum ( );
__declspec(implementation_key(2501)) void IComRectCornerStair::PutSectStepNum ( short pVal );
__declspec(implementation_key(2502)) _bstr_t IComRectCornerStair::GetShadowType ( );
__declspec(implementation_key(2503)) void IComRectCornerStair::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2504)) _bstr_t IComRectCornerStair::GetHasArrow ( );
__declspec(implementation_key(2505)) void IComRectCornerStair::PutHasArrow ( _bstr_t pVal );
__declspec(implementation_key(2506)) _bstr_t IComRectCornerStair::GetTextHeight ( );
__declspec(implementation_key(2507)) void IComRectCornerStair::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(2508)) _bstr_t IComRectCornerStair::GetFontStyle ( );
__declspec(implementation_key(2509)) void IComRectCornerStair::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(2510)) _bstr_t IComRectCornerStair::GetTextUp ( );
__declspec(implementation_key(2511)) void IComRectCornerStair::PutTextUp ( _bstr_t pVal );
__declspec(implementation_key(2512)) _bstr_t IComRectCornerStair::GetTextDown ( );
__declspec(implementation_key(2513)) void IComRectCornerStair::PutTextDown ( _bstr_t pVal );
__declspec(implementation_key(2514)) double IComAutoStair::GetScale ( );
__declspec(implementation_key(2515)) void IComAutoStair::PutScale ( double pVal );
__declspec(implementation_key(2516)) double IComAutoStair::GetLayoutRotation ( );
__declspec(implementation_key(2517)) void IComAutoStair::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2518)) short IComAutoStair::GetViewCtrl ( );
__declspec(implementation_key(2519)) void IComAutoStair::PutViewCtrl ( short pVal );
__declspec(implementation_key(2520)) double IComAutoStair::GetAutoStairTotalLen ( );
__declspec(implementation_key(2521)) void IComAutoStair::PutAutoStairTotalLen ( double pVal );
__declspec(implementation_key(2522)) double IComAutoStair::GetAutoStairTotalWidth ( );
__declspec(implementation_key(2523)) void IComAutoStair::PutAutoStairTotalWidth ( double pVal );
__declspec(implementation_key(2524)) double IComAutoStair::GetStairHeight ( );
__declspec(implementation_key(2525)) void IComAutoStair::PutStairHeight ( double pVal );
__declspec(implementation_key(2526)) double IComAutoStair::GetStepDist ( );
__declspec(implementation_key(2527)) void IComAutoStair::PutStepDist ( double pVal );
__declspec(implementation_key(2528)) double IComAutoStair::GetPlatLength ( );
__declspec(implementation_key(2529)) void IComAutoStair::PutPlatLength ( double pVal );
__declspec(implementation_key(2530)) double IComAutoStair::GetSlopeAngle ( );
__declspec(implementation_key(2531)) void IComAutoStair::PutSlopeAngle ( double pVal );
__declspec(implementation_key(2532)) double IComAutoStair::GetElevation ( );
__declspec(implementation_key(2533)) void IComAutoStair::PutElevation ( double pVal );
__declspec(implementation_key(2534)) _bstr_t IComAutoStair::GetSingleStair ( );
__declspec(implementation_key(2535)) void IComAutoStair::PutSingleStair ( _bstr_t pVal );
__declspec(implementation_key(2536)) double IComAutoStair::GetStairWidth ( );
__declspec(implementation_key(2537)) void IComAutoStair::PutStairWidth ( double pVal );
__declspec(implementation_key(2538)) double IComAutoStair::GetSpaceWidth ( );
__declspec(implementation_key(2539)) void IComAutoStair::PutSpaceWidth ( double pVal );
__declspec(implementation_key(2540)) _bstr_t IComAutoStair::GetCrossAppose ( );
__declspec(implementation_key(2541)) void IComAutoStair::PutCrossAppose ( _bstr_t pVal );
__declspec(implementation_key(2542)) ACAD_LAYER IComAutoStair::GetStepLayer ( );
__declspec(implementation_key(2543)) void IComAutoStair::PutStepLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2544)) ACAD_LAYER IComAutoStair::GetTextLayer ( );
__declspec(implementation_key(2545)) void IComAutoStair::PutTextLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2546)) ACAD_LAYER IComAutoStair::GetArrowLayer ( );
__declspec(implementation_key(2547)) void IComAutoStair::PutArrowLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2548)) _bstr_t IComAutoStair::GetStairFlagTwo ( );
__declspec(implementation_key(2549)) void IComAutoStair::PutStairFlagTwo ( _bstr_t pVal );
__declspec(implementation_key(2550)) _bstr_t IComAutoStair::GetStairFlag ( );
__declspec(implementation_key(2551)) void IComAutoStair::PutStairFlag ( _bstr_t pVal );
__declspec(implementation_key(2552)) _bstr_t IComAutoStair::GetSignArrow ( );
__declspec(implementation_key(2553)) void IComAutoStair::PutSignArrow ( _bstr_t pVal );
__declspec(implementation_key(2554)) _bstr_t IComAutoStair::GetSameDirection ( );
__declspec(implementation_key(2555)) void IComAutoStair::PutSameDirection ( _bstr_t pVal );
__declspec(implementation_key(2556)) _bstr_t IComAutoStair::GetShadowType ( );
__declspec(implementation_key(2557)) void IComAutoStair::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2558)) _bstr_t IComAutoStair::GetTextHeight ( );
__declspec(implementation_key(2559)) void IComAutoStair::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(2560)) _bstr_t IComAutoStair::GetFontStyle ( );
__declspec(implementation_key(2561)) void IComAutoStair::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(2562)) _bstr_t IComAutoStair::GetTextUp ( );
__declspec(implementation_key(2563)) void IComAutoStair::PutTextUp ( _bstr_t pVal );
__declspec(implementation_key(2564)) _bstr_t IComAutoStair::GetTextDown ( );
__declspec(implementation_key(2565)) void IComAutoStair::PutTextDown ( _bstr_t pVal );
__declspec(implementation_key(2566)) double IComApron::GetScale ( );
__declspec(implementation_key(2567)) void IComApron::PutScale ( double pVal );
__declspec(implementation_key(2568)) double IComApron::GetLayoutRotation ( );
__declspec(implementation_key(2569)) void IComApron::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2570)) double IComApron::GetInHeight ( );
__declspec(implementation_key(2571)) void IComApron::PutInHeight ( double pVal );
__declspec(implementation_key(2572)) double IComApron::GetOutHeight ( );
__declspec(implementation_key(2573)) void IComApron::PutOutHeight ( double pVal );
__declspec(implementation_key(2574)) double IComApron::GetElev ( );
__declspec(implementation_key(2575)) void IComApron::PutElev ( double pVal );
__declspec(implementation_key(2576)) _bstr_t IComApron::GetPathLength ( );
__declspec(implementation_key(2577)) _bstr_t IComApron::GetDists ( );
__declspec(implementation_key(2578)) void IComApron::PutDists ( _bstr_t pVal );
__declspec(implementation_key(2579)) _bstr_t IComApron::GetSideArea ( );
__declspec(implementation_key(2580)) _bstr_t IComApron::GetVolume ( );
__declspec(implementation_key(2581)) _bstr_t IComApron::GetCloseFlag ( );
__declspec(implementation_key(2582)) void IComApron::PutCloseFlag ( _bstr_t pVal );
__declspec(implementation_key(2583)) _variant_t IComApron::GetVertex ( );
__declspec(implementation_key(2584)) void IComApron::PutVertex ( const _variant_t & pVal );
__declspec(implementation_key(2585)) double IComMountRoof::GetScale ( );
__declspec(implementation_key(2586)) void IComMountRoof::PutScale ( double pVal );
__declspec(implementation_key(2587)) double IComMountRoof::GetLayoutRotation ( );
__declspec(implementation_key(2588)) void IComMountRoof::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2589)) _bstr_t IComMountRoof::GetShadowType ( );
__declspec(implementation_key(2590)) void IComMountRoof::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2591)) _bstr_t IComMountRoof::GetRoofType ( );
__declspec(implementation_key(2592)) double IComMountRoof::GetElev ( );
__declspec(implementation_key(2593)) void IComMountRoof::PutElev ( double pVal );
__declspec(implementation_key(2594)) _bstr_t IComMountRoof::GetSlopeAng ( );
__declspec(implementation_key(2595)) void IComMountRoof::PutSlopeAng ( _bstr_t pVal );
__declspec(implementation_key(2596)) double IComMountRoof::GetRoofHeight ( );
__declspec(implementation_key(2597)) void IComMountRoof::PutRoofHeight ( double pVal );
__declspec(implementation_key(2598)) double IComMountRoof::GetMountHeight ( );
__declspec(implementation_key(2599)) void IComMountRoof::PutMountHeight ( double pVal );
__declspec(implementation_key(2600)) double IComMountRoof::GetLength ( );
__declspec(implementation_key(2601)) void IComMountRoof::PutLength ( double pVal );
__declspec(implementation_key(2602)) double IComMountRoof::GetWidth ( );
__declspec(implementation_key(2603)) void IComMountRoof::PutWidth ( double pVal );
__declspec(implementation_key(2604)) double IComMountRoof::GetEavesLength ( );
__declspec(implementation_key(2605)) void IComMountRoof::PutEavesLength ( double pVal );
__declspec(implementation_key(2606)) double IComMountRoof::GetMountLength ( );
__declspec(implementation_key(2607)) void IComMountRoof::PutMountLength ( double pVal );
__declspec(implementation_key(2608)) double IComMountRoof::GetTopLength ( );
__declspec(implementation_key(2609)) void IComMountRoof::PutTopLength ( double pVal );
__declspec(implementation_key(2610)) double IComMountRoof::GetSlabThick ( );
__declspec(implementation_key(2611)) void IComMountRoof::PutSlabThick ( double pVal );
__declspec(implementation_key(2612)) double IComFloorRect::GetScale ( );
__declspec(implementation_key(2613)) void IComFloorRect::PutScale ( double pVal );
__declspec(implementation_key(2614)) double IComFloorRect::GetLayoutRotation ( );
__declspec(implementation_key(2615)) void IComFloorRect::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2616)) _bstr_t IComFloorRect::GetProjectName ( );
__declspec(implementation_key(2617)) _bstr_t IComFloorRect::GetFloorName ( );
__declspec(implementation_key(2618)) _bstr_t IComFloorRect::GetFloorHeight ( );
__declspec(implementation_key(2619)) _bstr_t IComFloorRect::GetTextStyle ( );
__declspec(implementation_key(2620)) void IComFloorRect::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(2621)) _bstr_t IComFloorRect::GetTextHeight ( );
__declspec(implementation_key(2622)) void IComFloorRect::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(2623)) ACAD_COLOR IComFloorRect::GetTextColor ( );
__declspec(implementation_key(2624)) void IComFloorRect::PutTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(2625)) _bstr_t IComFloorRect::GetCrossLen ( );
__declspec(implementation_key(2626)) void IComFloorRect::PutCrossLen ( _bstr_t pVal );
__declspec(implementation_key(2627)) _bstr_t ISectionEntity::GetBorder ( );
__declspec(implementation_key(2628)) void ISectionEntity::PutBorder ( _bstr_t pStr );
__declspec(implementation_key(2629)) _bstr_t ISectionEntity::GetLineType ( );
__declspec(implementation_key(2630)) void ISectionEntity::PutLineType ( _bstr_t pStr );
__declspec(implementation_key(2631)) _bstr_t ISectionEntity::GetName ( );
__declspec(implementation_key(2632)) void ISectionEntity::PutName ( _bstr_t pStr );
__declspec(implementation_key(2633)) _bstr_t ISectionEntity::GetHideLine ( );
__declspec(implementation_key(2634)) void ISectionEntity::PutHideLine ( _bstr_t pStr );
__declspec(implementation_key(2635)) _bstr_t ISectionEntity::GetShowFill ( );
__declspec(implementation_key(2636)) void ISectionEntity::PutShowFill ( _bstr_t pStr );
__declspec(implementation_key(2637)) double IComSymbModi::GetScale ( );
__declspec(implementation_key(2638)) void IComSymbModi::PutScale ( double pVal );
__declspec(implementation_key(2639)) double IComSymbModi::GetLayoutRotation ( );
__declspec(implementation_key(2640)) void IComSymbModi::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2641)) _bstr_t IComSymbModi::GetEditText ( );
__declspec(implementation_key(2642)) void IComSymbModi::PutEditText ( _bstr_t pVal );
__declspec(implementation_key(2643)) _bstr_t IComSymbModi::GetTextStyle ( );
__declspec(implementation_key(2644)) void IComSymbModi::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(2645)) _bstr_t IComSymbModi::GetTextContent ( );
__declspec(implementation_key(2646)) void IComSymbModi::PutTextContent ( _bstr_t pVal );
__declspec(implementation_key(2647)) _bstr_t IComSymbModi::GetTextHeight ( );
__declspec(implementation_key(2648)) void IComSymbModi::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(2649)) ACAD_COLOR IComSymbModi::GetTextColor ( );
__declspec(implementation_key(2650)) void IComSymbModi::PutTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(2651)) double IComStruBeam::GetLayoutRotation ( );
__declspec(implementation_key(2652)) void IComStruBeam::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2653)) double IComStruBeam::GetScale ( );
__declspec(implementation_key(2654)) void IComStruBeam::PutScale ( double pVal );
__declspec(implementation_key(2655)) _bstr_t IComStruBeam::GetShadowType ( );
__declspec(implementation_key(2656)) void IComStruBeam::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2657)) _bstr_t IComStruBeam::GetBeamShape ( );
__declspec(implementation_key(2658)) void IComStruBeam::PutBeamShape ( _bstr_t pVal );
__declspec(implementation_key(2659)) double IComStruBeam::GetBeamHeight ( );
__declspec(implementation_key(2660)) void IComStruBeam::PutBeamHeight ( double pVal );
__declspec(implementation_key(2661)) double IComStruBeam::GetBeamWidth ( );
__declspec(implementation_key(2662)) void IComStruBeam::PutBeamWidth ( double pVal );
__declspec(implementation_key(2663)) double IComStruBeam::GetBeamTotalWidth ( );
__declspec(implementation_key(2664)) void IComStruBeam::PutBeamTotalWidth ( double pVal );
__declspec(implementation_key(2665)) double IComStruBeam::GetBeamTotalHeight ( );
__declspec(implementation_key(2666)) void IComStruBeam::PutBeamTotalHeight ( double pVal );
__declspec(implementation_key(2667)) double IComStruBeam::GetBeamUpHeight ( );
__declspec(implementation_key(2668)) void IComStruBeam::PutBeamUpHeight ( double pVal );
__declspec(implementation_key(2669)) double IComStruBeam::GetBeamUpWidth ( );
__declspec(implementation_key(2670)) void IComStruBeam::PutBeamUpWidth ( double pVal );
__declspec(implementation_key(2671)) double IComStruBeam::GetBeamDownHeight ( );
__declspec(implementation_key(2672)) void IComStruBeam::PutBeamDownHeight ( double pVal );
__declspec(implementation_key(2673)) double IComStruBeam::GetBeamDownWidth ( );
__declspec(implementation_key(2674)) void IComStruBeam::PutBeamDownWidth ( double pVal );
__declspec(implementation_key(2675)) double IComStruBeam::GetBeamTopHeight1 ( );
__declspec(implementation_key(2676)) void IComStruBeam::PutBeamTopHeight1 ( double pVal );
__declspec(implementation_key(2677)) double IComStruBeam::GetBeamTopHeight2 ( );
__declspec(implementation_key(2678)) void IComStruBeam::PutBeamTopHeight2 ( double pVal );
__declspec(implementation_key(2679)) double IComStruBeam::GetBeamCorner ( );
__declspec(implementation_key(2680)) void IComStruBeam::PutBeamCorner ( double pVal );
__declspec(implementation_key(2681)) _bstr_t IComStruBeam::GetBeamNumber ( );
__declspec(implementation_key(2682)) void IComStruBeam::PutBeamNumber ( _bstr_t pVal );
__declspec(implementation_key(2683)) _bstr_t IComStruBeam::GetTextHeight ( );
__declspec(implementation_key(2684)) void IComStruBeam::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(2685)) _bstr_t IComStruBeam::GetTextStyle ( );
__declspec(implementation_key(2686)) void IComStruBeam::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(2687)) _bstr_t IComStruBeam::GetHideLabel ( );
__declspec(implementation_key(2688)) void IComStruBeam::PutHideLabel ( _bstr_t pVal );
__declspec(implementation_key(2689)) _bstr_t IComStruBeam::GetBeamIsArc ( );
__declspec(implementation_key(2690)) _bstr_t IComStruBeam::GetBeamMaterial ( );
__declspec(implementation_key(2691)) void IComStruBeam::PutBeamMaterial ( _bstr_t pVal );
__declspec(implementation_key(2692)) double IComStruFloorSlab::GetLayoutRotation ( );
__declspec(implementation_key(2693)) void IComStruFloorSlab::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2694)) double IComStruFloorSlab::GetScale ( );
__declspec(implementation_key(2695)) void IComStruFloorSlab::PutScale ( double pVal );
__declspec(implementation_key(2696)) _bstr_t IComStruFloorSlab::GetShadowType ( );
__declspec(implementation_key(2697)) void IComStruFloorSlab::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2698)) _bstr_t IComStruFloorSlab::GetFloorSlabType ( );
__declspec(implementation_key(2699)) double IComStruFloorSlab::GetFloorSlabThick ( );
__declspec(implementation_key(2700)) void IComStruFloorSlab::PutFloorSlabThick ( double pVal );
__declspec(implementation_key(2701)) double IComStruFloorSlab::GetFloorSlabHeight ( );
__declspec(implementation_key(2702)) void IComStruFloorSlab::PutFloorSlabHeight ( double pVal );
__declspec(implementation_key(2703)) _bstr_t IComStruFloorSlab::GetFloorSlabNumber ( );
__declspec(implementation_key(2704)) void IComStruFloorSlab::PutFloorSlabNumber ( _bstr_t pVal );
__declspec(implementation_key(2705)) _bstr_t IComStruFloorSlab::GetFloorCLTextHeight ( );
__declspec(implementation_key(2706)) void IComStruFloorSlab::PutFloorCLTextHeight ( _bstr_t pVal );
__declspec(implementation_key(2707)) _bstr_t IComStruFloorSlab::GetFloorCLTextStyle ( );
__declspec(implementation_key(2708)) void IComStruFloorSlab::PutFloorCLTextStyle ( _bstr_t pVal );
__declspec(implementation_key(2709)) _bstr_t IComStruFloorSlab::GetFloorCLHideLabel ( );
__declspec(implementation_key(2710)) void IComStruFloorSlab::PutFloorCLHideLabel ( _bstr_t pVal );
__declspec(implementation_key(2711)) _bstr_t IComStruFloorSlab::GetFloorSlabShape ( );
__declspec(implementation_key(2712)) _bstr_t IComStruFloorSlab::GetFloorSlabMaterial ( );
__declspec(implementation_key(2713)) void IComStruFloorSlab::PutFloorSlabMaterial ( _bstr_t pVal );
__declspec(implementation_key(2714)) double IComStruSlabHole::GetLayoutRotation ( );
__declspec(implementation_key(2715)) void IComStruSlabHole::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2716)) double IComStruSlabHole::GetScale ( );
__declspec(implementation_key(2717)) void IComStruSlabHole::PutScale ( double pVal );
__declspec(implementation_key(2718)) _bstr_t IComStruSlabHole::GetShadowType ( );
__declspec(implementation_key(2719)) void IComStruSlabHole::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2720)) _bstr_t IComStruSlabHole::GetSlabHoleType ( );
__declspec(implementation_key(2721)) double IComStruSlabHole::GetSlabHoleWidth ( );
__declspec(implementation_key(2722)) void IComStruSlabHole::PutSlabHoleWidth ( double pVal );
__declspec(implementation_key(2723)) double IComStruSlabHole::GetSlabHoleHeight ( );
__declspec(implementation_key(2724)) void IComStruSlabHole::PutSlabHoleHeight ( double pVal );
__declspec(implementation_key(2725)) double IComStruSlabHole::GetSlabHoleAngle ( );
__declspec(implementation_key(2726)) void IComStruSlabHole::PutSlabHoleAngle ( double pVal );
__declspec(implementation_key(2727)) double IComStruSlabHole::GetSlabHoleDiam ( );
__declspec(implementation_key(2728)) void IComStruSlabHole::PutSlabHoleDiam ( double pVal );
__declspec(implementation_key(2729)) double IComStruSlabHole::GetSlabHoleElevation ( );
__declspec(implementation_key(2730)) void IComStruSlabHole::PutSlabHoleElevation ( double pVal );
__declspec(implementation_key(2731)) _bstr_t IComStruSlabHole::GetLabel ( );
__declspec(implementation_key(2732)) void IComStruSlabHole::PutLabel ( _bstr_t pVal );
__declspec(implementation_key(2733)) _bstr_t IComStruSlabHole::GetTextHeight ( );
__declspec(implementation_key(2734)) void IComStruSlabHole::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(2735)) _bstr_t IComStruSlabHole::GetTextStyle ( );
__declspec(implementation_key(2736)) void IComStruSlabHole::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(2737)) _bstr_t IComStruSlabHole::GetHideLabel ( );
__declspec(implementation_key(2738)) void IComStruSlabHole::PutHideLabel ( _bstr_t pVal );
__declspec(implementation_key(2739)) double IComStruNodePoint::GetLayoutRotation ( );
__declspec(implementation_key(2740)) void IComStruNodePoint::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2741)) double IComStruNodePoint::GetScale ( );
__declspec(implementation_key(2742)) void IComStruNodePoint::PutScale ( double pVal );
__declspec(implementation_key(2743)) _bstr_t IComStruNodePoint::GetShadowType ( );
__declspec(implementation_key(2744)) void IComStruNodePoint::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2745)) _bstr_t IComStruNodePoint::GetNodeNumber ( );
__declspec(implementation_key(2746)) void IComStruNodePoint::PutNodeNumber ( _bstr_t pVal );
__declspec(implementation_key(2747)) double IComStruBarBase::GetLayoutRotation ( );
__declspec(implementation_key(2748)) void IComStruBarBase::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2749)) double IComStruBarBase::GetScale ( );
__declspec(implementation_key(2750)) void IComStruBarBase::PutScale ( double pVal );
__declspec(implementation_key(2751)) _bstr_t IComStruBarBase::GetShadowType ( );
__declspec(implementation_key(2752)) void IComStruBarBase::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2753)) _bstr_t IComStruBarBase::GetBaseNumber ( );
__declspec(implementation_key(2754)) void IComStruBarBase::PutBaseNumber ( _bstr_t pVal );
__declspec(implementation_key(2755)) double IComStruBarBase::GetBaseWidth ( );
__declspec(implementation_key(2756)) void IComStruBarBase::PutBaseWidth ( double pVal );
__declspec(implementation_key(2757)) double IComStruSelfBase::GetLayoutRotation ( );
__declspec(implementation_key(2758)) void IComStruSelfBase::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2759)) double IComStruSelfBase::GetScale ( );
__declspec(implementation_key(2760)) void IComStruSelfBase::PutScale ( double pVal );
__declspec(implementation_key(2761)) _bstr_t IComStruSelfBase::GetShadowType ( );
__declspec(implementation_key(2762)) void IComStruSelfBase::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2763)) _bstr_t IComStruSelfBase::GetBaseNumber ( );
__declspec(implementation_key(2764)) void IComStruSelfBase::PutBaseNumber ( _bstr_t pVal );
__declspec(implementation_key(2765)) double IComStruSelfBase::GetBaseWidth ( );
__declspec(implementation_key(2766)) void IComStruSelfBase::PutBaseWidth ( double pVal );
__declspec(implementation_key(2767)) double IComStruSelfBase::GetBaseHeight ( );
__declspec(implementation_key(2768)) void IComStruSelfBase::PutBaseHeight ( double pVal );
__declspec(implementation_key(2769)) double IComStruReinBar::GetLayoutRotation ( );
__declspec(implementation_key(2770)) void IComStruReinBar::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2771)) double IComStruReinBar::GetScale ( );
__declspec(implementation_key(2772)) void IComStruReinBar::PutScale ( double pVal );
__declspec(implementation_key(2773)) _bstr_t IComStruReinBar::GetShadowType ( );
__declspec(implementation_key(2774)) void IComStruReinBar::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2775)) _bstr_t IComStruReinBar::GetBarType ( );
__declspec(implementation_key(2776)) _bstr_t IComStruReinBar::GetBarTypeStart ( );
__declspec(implementation_key(2777)) void IComStruReinBar::PutBarTypeStart ( _bstr_t pVal );
__declspec(implementation_key(2778)) _bstr_t IComStruReinBar::GetBarTypeEnd ( );
__declspec(implementation_key(2779)) void IComStruReinBar::PutBarTypeEnd ( _bstr_t pVal );
__declspec(implementation_key(2780)) double IComStruReinBar::GetWidth ( );
__declspec(implementation_key(2781)) void IComStruReinBar::PutWidth ( double pVal );
__declspec(implementation_key(2782)) double IComStruReinBar::GetLengthS ( );
__declspec(implementation_key(2783)) void IComStruReinBar::PutLengthS ( double pVal );
__declspec(implementation_key(2784)) double IComStruReinBar::GetLengthO ( );
__declspec(implementation_key(2785)) void IComStruReinBar::PutLengthO ( double pVal );
__declspec(implementation_key(2786)) double IComStruReinBar::GetLengthB ( );
__declspec(implementation_key(2787)) void IComStruReinBar::PutLengthB ( double pVal );
__declspec(implementation_key(2788)) double IComStruReinBar::GetDiaB ( );
__declspec(implementation_key(2789)) void IComStruReinBar::PutDiaB ( double pVal );
__declspec(implementation_key(2790)) double IComStruSymbFocus::GetLayoutRotation ( );
__declspec(implementation_key(2791)) void IComStruSymbFocus::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2792)) double IComStruSymbFocus::GetScale ( );
__declspec(implementation_key(2793)) void IComStruSymbFocus::PutScale ( double pVal );
__declspec(implementation_key(2794)) _bstr_t IComStruSymbFocus::GetShadowType ( );
__declspec(implementation_key(2795)) void IComStruSymbFocus::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2796)) _bstr_t IComStruSymbFocus::GetTxtHeight ( );
__declspec(implementation_key(2797)) void IComStruSymbFocus::PutTxtHeight ( _bstr_t pVal );
__declspec(implementation_key(2798)) _bstr_t IComStruSymbFocus::GetAlign ( );
__declspec(implementation_key(2799)) void IComStruSymbFocus::PutAlign ( _bstr_t pVal );
__declspec(implementation_key(2800)) _bstr_t IComStruSymbFocus::GetTextStyle ( );
__declspec(implementation_key(2801)) void IComStruSymbFocus::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(2802)) double IComStruSymbFocus::GetRowSpaceCoe ( );
__declspec(implementation_key(2803)) void IComStruSymbFocus::PutRowSpaceCoe ( double pVal );
__declspec(implementation_key(2804)) ACAD_COLOR IComStruSymbFocus::GetTxtColor ( );
__declspec(implementation_key(2805)) void IComStruSymbFocus::PutTxtColor ( ACAD_COLOR pVal );
__declspec(implementation_key(2806)) double IComStruSymbInsitu::GetLayoutRotation ( );
__declspec(implementation_key(2807)) void IComStruSymbInsitu::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2808)) double IComStruSymbInsitu::GetScale ( );
__declspec(implementation_key(2809)) void IComStruSymbInsitu::PutScale ( double pVal );
__declspec(implementation_key(2810)) _bstr_t IComStruSymbInsitu::GetShadowType ( );
__declspec(implementation_key(2811)) void IComStruSymbInsitu::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2812)) _bstr_t IComStruSymbInsitu::GetTxtHeight ( );
__declspec(implementation_key(2813)) void IComStruSymbInsitu::PutTxtHeight ( _bstr_t pVal );
__declspec(implementation_key(2814)) _bstr_t IComStruSymbInsitu::GetAlign ( );
__declspec(implementation_key(2815)) void IComStruSymbInsitu::PutAlign ( _bstr_t pVal );
__declspec(implementation_key(2816)) _bstr_t IComStruSymbInsitu::GetTextStyle ( );
__declspec(implementation_key(2817)) void IComStruSymbInsitu::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(2818)) _bstr_t IComStruSymbInsitu::GetContent ( );
__declspec(implementation_key(2819)) void IComStruSymbInsitu::PutContent ( _bstr_t pVal );
__declspec(implementation_key(2820)) ACAD_COLOR IComStruSymbInsitu::GetTxtColor ( );
__declspec(implementation_key(2821)) void IComStruSymbInsitu::PutTxtColor ( ACAD_COLOR pVal );
__declspec(implementation_key(2822)) double IComStruHanger::GetLayoutRotation ( );
__declspec(implementation_key(2823)) void IComStruHanger::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2824)) double IComStruHanger::GetScale ( );
__declspec(implementation_key(2825)) void IComStruHanger::PutScale ( double pVal );
__declspec(implementation_key(2826)) _bstr_t IComStruHanger::GetShadowType ( );
__declspec(implementation_key(2827)) void IComStruHanger::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2828)) _bstr_t IComStruHanger::GetTxtHeight ( );
__declspec(implementation_key(2829)) void IComStruHanger::PutTxtHeight ( _bstr_t pVal );
__declspec(implementation_key(2830)) _bstr_t IComStruHanger::GetTextStyle ( );
__declspec(implementation_key(2831)) void IComStruHanger::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(2832)) _bstr_t IComStruHanger::GetText ( );
__declspec(implementation_key(2833)) void IComStruHanger::PutText ( _bstr_t pVal );
__declspec(implementation_key(2834)) ACAD_COLOR IComStruHanger::GetTxtColor ( );
__declspec(implementation_key(2835)) void IComStruHanger::PutTxtColor ( ACAD_COLOR pVal );
__declspec(implementation_key(2836)) double IComStruStirrup::GetLayoutRotation ( );
__declspec(implementation_key(2837)) void IComStruStirrup::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2838)) double IComStruStirrup::GetScale ( );
__declspec(implementation_key(2839)) void IComStruStirrup::PutScale ( double pVal );
__declspec(implementation_key(2840)) _bstr_t IComStruStirrup::GetShadowType ( );
__declspec(implementation_key(2841)) void IComStruStirrup::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2842)) _bstr_t IComStruStirrup::GetTxtHeight ( );
__declspec(implementation_key(2843)) void IComStruStirrup::PutTxtHeight ( _bstr_t pVal );
__declspec(implementation_key(2844)) _bstr_t IComStruStirrup::GetTextStyle ( );
__declspec(implementation_key(2845)) void IComStruStirrup::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(2846)) _bstr_t IComStruStirrup::GetText ( );
__declspec(implementation_key(2847)) void IComStruStirrup::PutText ( _bstr_t pVal );
__declspec(implementation_key(2848)) ACAD_COLOR IComStruStirrup::GetTxtColor ( );
__declspec(implementation_key(2849)) void IComStruStirrup::PutTxtColor ( ACAD_COLOR pVal );
__declspec(implementation_key(2850)) double IComStruPlainNumber::GetLayoutRotation ( );
__declspec(implementation_key(2851)) void IComStruPlainNumber::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2852)) double IComStruPlainNumber::GetScale ( );
__declspec(implementation_key(2853)) void IComStruPlainNumber::PutScale ( double pVal );
__declspec(implementation_key(2854)) _bstr_t IComStruPlainNumber::GetShadowType ( );
__declspec(implementation_key(2855)) void IComStruPlainNumber::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2856)) _bstr_t IComStruPlainNumber::GetTxtHeight ( );
__declspec(implementation_key(2857)) void IComStruPlainNumber::PutTxtHeight ( _bstr_t pVal );
__declspec(implementation_key(2858)) double IComStruPlainNumber::GetCorner ( );
__declspec(implementation_key(2859)) void IComStruPlainNumber::PutCorner ( double pVal );
__declspec(implementation_key(2860)) _bstr_t IComStruPlainNumber::GetTextStyle ( );
__declspec(implementation_key(2861)) void IComStruPlainNumber::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(2862)) _bstr_t IComStruPlainNumber::GetText ( );
__declspec(implementation_key(2863)) void IComStruPlainNumber::PutText ( _bstr_t pVal );
__declspec(implementation_key(2864)) ACAD_COLOR IComStruPlainNumber::GetTxtColor ( );
__declspec(implementation_key(2865)) void IComStruPlainNumber::PutTxtColor ( ACAD_COLOR pVal );
__declspec(implementation_key(2866)) double IComStruSectStair::GetScale ( );
__declspec(implementation_key(2867)) void IComStruSectStair::PutScale ( double pVal );
__declspec(implementation_key(2868)) double IComStruSectStair::GetLayoutRotation ( );
__declspec(implementation_key(2869)) void IComStruSectStair::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2870)) _bstr_t IComStruSectStair::GetShadowType ( );
__declspec(implementation_key(2871)) void IComStruSectStair::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2872)) _bstr_t IComStruSectStair::GetSectNumber ( );
__declspec(implementation_key(2873)) void IComStruSectStair::PutSectNumber ( _bstr_t pVal );
__declspec(implementation_key(2874)) _bstr_t IComStruSectStair::GetLeftHeight ( );
__declspec(implementation_key(2875)) void IComStruSectStair::PutLeftHeight ( _bstr_t pVal );
__declspec(implementation_key(2876)) _bstr_t IComStruSectStair::GetRightHeight ( );
__declspec(implementation_key(2877)) void IComStruSectStair::PutRightHeight ( _bstr_t pVal );
__declspec(implementation_key(2878)) int IComStruSectStair::GetStepNum ( );
__declspec(implementation_key(2879)) void IComStruSectStair::PutStepNum ( int pVal );
__declspec(implementation_key(2880)) double IComStruSectStair::GetSlabShadowLen ( );
__declspec(implementation_key(2881)) void IComStruSectStair::PutSlabShadowLen ( double pVal );
__declspec(implementation_key(2882)) double IComStruSectStair::GetSlabThickness ( );
__declspec(implementation_key(2883)) void IComStruSectStair::PutSlabThickness ( double pVal );
__declspec(implementation_key(2884)) double IComStruSectStair::GetB1Width ( );
__declspec(implementation_key(2885)) void IComStruSectStair::PutB1Width ( double pVal );
__declspec(implementation_key(2886)) double IComStruSectStair::GetC1Height ( );
__declspec(implementation_key(2887)) void IComStruSectStair::PutC1Height ( double pVal );
__declspec(implementation_key(2888)) double IComStruSectStair::GetD1Width ( );
__declspec(implementation_key(2889)) void IComStruSectStair::PutD1Width ( double pVal );
__declspec(implementation_key(2890)) double IComStruSectStair::GetT1Tickness ( );
__declspec(implementation_key(2891)) void IComStruSectStair::PutT1Tickness ( double pVal );
__declspec(implementation_key(2892)) double IComStruSectStair::GetB2Width ( );
__declspec(implementation_key(2893)) void IComStruSectStair::PutB2Width ( double pVal );
__declspec(implementation_key(2894)) double IComStruSectStair::GetC2Height ( );
__declspec(implementation_key(2895)) void IComStruSectStair::PutC2Height ( double pVal );
__declspec(implementation_key(2896)) double IComStruSectStair::GetD2Width ( );
__declspec(implementation_key(2897)) void IComStruSectStair::PutD2Width ( double pVal );
__declspec(implementation_key(2898)) double IComStruSectStair::GetT2Tickness ( );
__declspec(implementation_key(2899)) void IComStruSectStair::PutT2Tickness ( double pVal );
__declspec(implementation_key(2900)) double IComStruSectStair::GetL2Length ( );
__declspec(implementation_key(2901)) void IComStruSectStair::PutL2Length ( double pVal );
__declspec(implementation_key(2902)) double IComStruSectStair::GetL3Length ( );
__declspec(implementation_key(2903)) void IComStruSectStair::PutL3Length ( double pVal );
__declspec(implementation_key(2904)) double IComReinIndexDim::GetScale ( );
__declspec(implementation_key(2905)) void IComReinIndexDim::PutScale ( double pVal );
__declspec(implementation_key(2906)) double IComReinIndexDim::GetLayoutRotation ( );
__declspec(implementation_key(2907)) void IComReinIndexDim::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2908)) _bstr_t IComReinIndexDim::GetShadowType ( );
__declspec(implementation_key(2909)) void IComReinIndexDim::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2910)) _bstr_t IComReinIndexDim::GetReinCLAB ( );
__declspec(implementation_key(2911)) void IComReinIndexDim::PutReinCLAB ( _bstr_t pVal );
__declspec(implementation_key(2912)) double IComReinIndexDim::GetRadius ( );
__declspec(implementation_key(2913)) void IComReinIndexDim::PutRadius ( double pVal );
__declspec(implementation_key(2914)) _bstr_t IComReinIndexDim::GetInTextStyle ( );
__declspec(implementation_key(2915)) void IComReinIndexDim::PutInTextStyle ( _bstr_t pVal );
__declspec(implementation_key(2916)) double IComReinIndexDim::GetInTextHeight ( );
__declspec(implementation_key(2917)) void IComReinIndexDim::PutInTextHeight ( double pVal );
__declspec(implementation_key(2918)) _bstr_t IComReinIndexDim::GetTextStyle ( );
__declspec(implementation_key(2919)) void IComReinIndexDim::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(2920)) _bstr_t IComReinIndexDim::GetTextHeight ( );
__declspec(implementation_key(2921)) void IComReinIndexDim::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(2922)) _bstr_t IComReinIndexDim::GetTxt ( );
__declspec(implementation_key(2923)) void IComReinIndexDim::PutTxt ( _bstr_t pVal );
__declspec(implementation_key(2924)) ACAD_COLOR IComReinIndexDim::GetTxtColor ( );
__declspec(implementation_key(2925)) void IComReinIndexDim::PutTxtColor ( ACAD_COLOR pVal );
__declspec(implementation_key(2926)) double IComStruWColuSect::GetScale ( );
__declspec(implementation_key(2927)) void IComStruWColuSect::PutScale ( double pVal );
__declspec(implementation_key(2928)) double IComStruWColuSect::GetLayoutRotation ( );
__declspec(implementation_key(2929)) void IComStruWColuSect::PutLayoutRotation ( double pVal );
__declspec(implementation_key(2930)) _bstr_t IComStruWColuSect::GetShadowType ( );
__declspec(implementation_key(2931)) void IComStruWColuSect::PutShadowType ( _bstr_t pVal );
__declspec(implementation_key(2932)) _bstr_t IComStruWColuSect::GetTxtHeight ( );
__declspec(implementation_key(2933)) void IComStruWColuSect::PutTxtHeight ( _bstr_t pVal );
__declspec(implementation_key(2934)) _bstr_t IComStruWColuSect::GetTextStyle ( );
__declspec(implementation_key(2935)) void IComStruWColuSect::PutTextStyle ( _bstr_t pVal );
__declspec(implementation_key(2936)) ACAD_LAYER IComStruWColuSect::GetHatchLayer ( );
__declspec(implementation_key(2937)) void IComStruWColuSect::PutHatchLayer ( ACAD_LAYER pVal );
__declspec(implementation_key(2938)) _bstr_t IComEvacPath::GetShowText ( );
__declspec(implementation_key(2939)) void IComEvacPath::PutShowText ( _bstr_t pVal );
__declspec(implementation_key(2940)) _bstr_t IComEvacPath::GetTextHeight ( );
__declspec(implementation_key(2941)) void IComEvacPath::PutTextHeight ( _bstr_t pVal );
__declspec(implementation_key(2942)) _bstr_t IComEvacPath::GetFontStyle ( );
__declspec(implementation_key(2943)) void IComEvacPath::PutFontStyle ( _bstr_t pVal );
__declspec(implementation_key(2944)) ACAD_COLOR IComEvacPath::GetTextColor ( );
__declspec(implementation_key(2945)) void IComEvacPath::PutTextColor ( ACAD_COLOR pVal );
__declspec(implementation_key(2946)) _bstr_t IComEvacPath::GetText ( );
__declspec(implementation_key(2947)) void IComEvacPath::PutText ( _bstr_t pVal );
__declspec(implementation_key(2948)) double IComEvacPath::GetPolyWidth ( );
__declspec(implementation_key(2949)) void IComEvacPath::PutPolyWidth ( double pVal );
__declspec(implementation_key(2950)) _bstr_t IComEvacPath::GetStandardRange ( );
__declspec(implementation_key(2951)) void IComEvacPath::PutStandardRange ( _bstr_t pVal );
__declspec(implementation_key(2952)) double IComEvacPath::GetScale ( );
__declspec(implementation_key(2953)) void IComEvacPath::PutScale ( double pVal );
__declspec(implementation_key(2954)) double IComEvacPath::GetLayoutRotation ( );
__declspec(implementation_key(2955)) void IComEvacPath::PutLayoutRotation ( double pVal );
#pragma stop_map_region

} // namespace COMKERNALLib

#pragma pack(pop)
