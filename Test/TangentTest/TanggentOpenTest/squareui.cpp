//
//////////////////////////////////////////////////////////////////////////////
//
//  Copyright 2013 Autodesk, Inc.  All rights reserved.
//
//  Use of this software is subject to the terms of the Autodesk license 
//  agreement provided at the time of installation or download, or which 
//  otherwise accompanies this software in either electronic or hard copy form.   
//
//////////////////////////////////////////////////////////////////////////////
//
// squareui.cpp
// 
// Example square custom entity UI
//

#if defined(_DEBUG) && !defined(AC_FULL_DEBUG)
#define WAS_DEBUG
#undef _DEBUG
#endif

#include <afxwin.h>

// ATL includes for sqareCmd.h
#include <atlbase.h>
CComModule _Module;
#include <atlcom.h>

// Acad COM and Automation interfaces
#include <acadi.h>
#include <axtempl.h>
#include <axpnt3d.h>


#ifdef DEBUG_WAS_DEFINED
#undef DEBUG_WAS_DEFINED
#define _DEBUG
#endif

#include <acdocman.h>
#include <aced.h>
#include <acdb.h>
#include <adslib.h>
#include <rxmfcapi.h>

#include <opmext.h>


//#include "..\Tangent\TangentCom\tch10_com19.tlh"
#include "..\Tangent\TangentCom\tch10_com19_opening.tlh"
using namespace TCH10_COM9_T20V5X64;

//#import "C:\Tangent\TArchT20V5\SYS19x64\Tch10_Com19.dll" no_function_mapping
//#import "E:\Soft\CAD\天正\TArch2014_dll\TArch2014\sys19x64\tch9_com19.dll"   no_function_mapping


AcDbObjectId SelectOne()
{
	ads_name ssname;
	AcDbObjectId objId = 0;

	int rt = acedSSGet(L":S",NULL,NULL,NULL,ssname); 
	if (rt == RTNORM)
	{
		ads_name ent;
		acedSSName(ssname, 0, ent);
		acdbGetObjectId(objId, ent);
		acedSSFree(ssname);
	}
	return objId;
}

EXTERN_C const CLSID IID_IOPMPropertyExpander;
//extern const IID IID_IOPMPropertyExpander;

//MIDL_DEFINE_GUID(CLSID, IID_IOPMPropertyExpander_TY,0x5d535710, 0xd49a, 0x11d1, 0xb6, 0x16, 0x0, 0x60, 0xb0, 0x87, 0xe2, 0x35);

//DEFINE_GUID(IID_IOPMPropertyExpander_TY, 
//	0x5d535710, 0xd49a, 0x11d1, 0xb6, 0x16, 0x0, 0x60, 0xb0, 0x87, 0xe2, 0x35);

static const IID IID_IOPMPropertyExpander_TY = { 0x5d535710, 0xd49a, 0x11d1, { 0xb6, 0x16, 0x0, 0x60, 0xb0, 0x87, 0xe2, 0x35 } };


void TangentOpenWindowTest()
{
	AcDbObjectId winId = SelectOne();
	if (winId==AcDbObjectId::kNull)
	{
		return;
	}

	AcDbEntity *pent;
	Acad::ErrorStatus es = acdbOpenAcDbEntity(pent, winId, AcDb::kForRead);
	if (es!=Acad::eOk)
	{
		return;
	}
	
	CLSID entClsid = {0};
	es = pent->getClassID(&entClsid);	//可根据entClsid来决定使用何种版本的天正插件初始化，返回的是ComOpening接口

	pent->close();


	HRESULT hr = S_OK;
	CComPtr<IComOpening> pWin;
	CComQIPtr<IAcadBaseObject> pSquareBase;
	CComQIPtr<IAcadBaseObject2> pSquareBase2;

	CComPtr<IOPMPropertyExpander > pOpmPropExpander;
	CComPtr<IOPMPropertyExpander2 > pOpmPropExpander2;

	//CComQIPtr<IConnectionPointContainer> pConnectionPts;
	//CComPtr<IConnectionPoint> pConnection;
	//CComPtr<IUnknown> pCmd;

	try
	{
		if (FAILED(hr = pWin.CoCreateInstance(__uuidof(ComOpening))))
			throw hr;

		pSquareBase = pWin;
		pSquareBase2 = pWin;

		if (pSquareBase==NULL)
			throw E_POINTER;

		pSquareBase->SetObjectId(winId);

		pWin->PutWidth(2200);
		pWin->PutHeight(2100);

		//////////////////////////////////////////////////////////////////////////
		//hr = pWin->QueryInterface(IID_IOPMPropertyExpander_TY, (void **)&pOpmPropExpander);
		hr = pWin->QueryInterface(__uuidof(IOPMPropertyExpander), (void **)&pOpmPropExpander);
		if (FAILED(hr))
		{
			throw(hr);
		}

		long ncount;
		hr = pOpmPropExpander->GetGroupCount(1, &ncount);

		OPMLPOLESTR caStringsOut ={0};
		OPMDWORD caCookiesOut ={0};
		for(UINT i=0; i<20; i++)
		{
			hr = pOpmPropExpander->GetElementStrings(i, &caStringsOut, &caCookiesOut);
			if (FAILED(hr))
			{
				continue;
				//throw(hr);
			}
		}
		
	}
	catch (HRESULT)
	{

	}

	//CLSID clsid;  
	//IID iid;  
	//HRESULT hr = CLSIDFromString(OLESTR("{92e83a37-399a-47b1-bf6c-0ab052650cfe}"),&clsid); 
}


void TangentOpenWindowCreateTest()
{
	HRESULT hr = S_OK;
	CComPtr<IComOpening> pWin;
	CComQIPtr<IAcadBaseObject> pSquareBase;
	CComQIPtr<IAcadBaseObject2> pSquareBase2;
	CComQIPtr<IConnectionPointContainer> pConnectionPts;
	CComPtr<IConnectionPoint> pConnection;

	CComPtr<IUnknown> pCmd;

	try
	{
		if (FAILED(hr = pWin.CoCreateInstance(__uuidof(ComOpening))))
			throw hr;

		pSquareBase = pWin;
		pSquareBase2 = pWin;
		if (pSquareBase2!=NULL)	 //天正门窗没有此接口
		{
			// Create the underlying square object
			if (FAILED(hr = pSquareBase2->CreateObject()))
				throw hr;

			pWin->PutWidth(2200);
			pWin->PutHeight(2100);


			AcDbObjectId squareId;
			if (FAILED(hr = pSquareBase2->AddToDb(squareId, curDoc()->database()->currentSpaceId()))) 
			{
				acutPrintf(_T("\n Error appending object to database."));
			}
		}
	}
	catch (HRESULT)
	{

	}
}
void initApp()
{
    acutPrintf(_T("AsdkSquare ARX application; Type SQ or ADDSQ to execute"));

    // register a command with the AutoCAD command mechanism

	acedRegCmds->addCommand(_T("SQUARE_COMMANDS"), _T("TTEST"), 
		_T("TTEST"), ACRX_CMD_MODAL | ACRX_CMD_INTERRUPTIBLE, TangentOpenWindowTest);
	acedRegCmds->addCommand(_T("SQUARE_COMMANDS"), _T("TCREATEWIN"), 
		_T("TCREATEWIN"), ACRX_CMD_MODAL | ACRX_CMD_INTERRUPTIBLE, TangentOpenWindowCreateTest);
}


void unloadApp()
{
    // Remove the command group added via acedRegCmds->addCommand
    //
    acedRegCmds->removeGroup(_T("SQUARE_COMMANDS"));

}

extern "C" AcRx::AppRetCode acrxEntryPoint(AcRx::AppMsgCode msg, void* appId)
{
    switch (msg) {
    case AcRx::kInitAppMsg:
        acrxDynamicLinker->unlockApplication(appId);
		acrxDynamicLinker->registerAppMDIAware(appId);
        initApp();
        break;
    case AcRx::kUnloadAppMsg:
        break;
    case AcRx::kLoadDwgMsg:

        break;
    case AcRx::kUnloadDwgMsg:

        break;
	case AcRx::kInvkSubrMsg:

		break;
    default:
		;
    }
    return AcRx::kRetOK;
}

